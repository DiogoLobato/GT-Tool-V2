//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/mihail/Desktop/Tese/master-thesis/csharp/yasat/Ist.Yasat.Php.Parser/grammar\PhpParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class PhpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SeaWhitespace=1, HtmlText=2, XmlStart=3, PHPStart=4, HtmlScriptOpen=5, 
		HtmlStyleOpen=6, HtmlComment=7, HtmlDtd=8, HtmlOpen=9, Shebang=10, Error=11, 
		XmlText=12, XmlClose=13, PHPStartInside=14, HtmlClose=15, HtmlSlashClose=16, 
		HtmlSlash=17, HtmlEquals=18, HtmlStartQuoteString=19, HtmlStartDoubleQuoteString=20, 
		HtmlHex=21, HtmlDecimal=22, HtmlSpace=23, HtmlName=24, ErrorInside=25, 
		PHPStartInsideQuoteString=26, HtmlEndQuoteString=27, HtmlQuoteString=28, 
		ErrorHtmlQuote=29, PHPStartDoubleQuoteString=30, HtmlEndDoubleQuoteString=31, 
		HtmlDoubleQuoteString=32, ErrorHtmlDoubleQuote=33, ScriptText=34, ScriptClose=35, 
		PHPStartInsideScript=36, StyleBody=37, PHPEnd=38, Whitespace=39, MultiLineComment=40, 
		SingleLineComment=41, ShellStyleComment=42, Abstract=43, Array=44, As=45, 
		BinaryCast=46, BoolType=47, BooleanConstant=48, Break=49, Callable=50, 
		Case=51, Catch=52, Class=53, Clone=54, Const=55, Continue=56, Declare=57, 
		Default=58, Do=59, DoubleCast=60, DoubleType=61, Echo=62, Else=63, ElseIf=64, 
		Empty=65, EndDeclare=66, EndFor=67, EndForeach=68, EndIf=69, EndSwitch=70, 
		EndWhile=71, Eval=72, Exit=73, Extends=74, Final=75, Finally=76, FloatCast=77, 
		For=78, Foreach=79, Function=80, Global=81, Goto=82, If=83, Implements=84, 
		Import=85, Include=86, IncludeOnce=87, InstanceOf=88, InsteadOf=89, Int8Cast=90, 
		Int16Cast=91, Int64Type=92, IntType=93, Interface=94, IsSet=95, List=96, 
		LogicalAnd=97, LogicalOr=98, LogicalXor=99, Namespace=100, New=101, Null=102, 
		ObjectType=103, Parent_=104, Partial=105, Print=106, Private=107, Protected=108, 
		Public=109, Require=110, RequireOnce=111, Resource=112, Return=113, Static=114, 
		StringType=115, Switch=116, Throw=117, Trait=118, Try=119, Typeof=120, 
		UintCast=121, UnicodeCast=122, Unset=123, Use=124, Var=125, While=126, 
		Yield=127, From=128, LambdaFn=129, Get=130, Set=131, Call=132, CallStatic=133, 
		Constructor=134, Destruct=135, Wakeup=136, Sleep=137, Autoload=138, IsSet__=139, 
		Unset__=140, ToString__=141, Invoke=142, SetState=143, Clone__=144, DebugInfo=145, 
		Namespace__=146, Class__=147, Traic__=148, Function__=149, Method__=150, 
		Line__=151, File__=152, Dir__=153, Spaceship=154, Lgeneric=155, Rgeneric=156, 
		DoubleArrow=157, Inc=158, Dec=159, IsIdentical=160, IsNoidentical=161, 
		IsEqual=162, IsNotEq=163, IsSmallerOrEqual=164, IsGreaterOrEqual=165, 
		PlusEqual=166, MinusEqual=167, MulEqual=168, Pow=169, PowEqual=170, DivEqual=171, 
		Concaequal=172, ModEqual=173, ShiftLeftEqual=174, ShiftRightEqual=175, 
		AndEqual=176, OrEqual=177, XorEqual=178, BooleanOr=179, BooleanAnd=180, 
		NullCoalescing=181, NullCoalescingEqual=182, ShiftLeft=183, ShiftRight=184, 
		DoubleColon=185, ObjectOperator=186, NamespaceSeparator=187, Ellipsis=188, 
		Less=189, Greater=190, Ampersand=191, Pipe=192, Bang=193, Caret=194, Plus=195, 
		Minus=196, Asterisk=197, Percent=198, Divide=199, Tilde=200, SuppressWarnings=201, 
		Dollar=202, Dot=203, QuestionMark=204, OpenRoundBracket=205, CloseRoundBracket=206, 
		OpenSquareBracket=207, CloseSquareBracket=208, OpenCurlyBracket=209, CloseCurlyBracket=210, 
		Comma=211, Colon=212, SemiColon=213, Eq=214, Quote=215, BackQuote=216, 
		VarName=217, Label=218, Octal=219, Decimal=220, Real=221, Hex=222, Binary=223, 
		BackQuoteString=224, SingleQuoteString=225, DoubleQuote=226, StartNowDoc=227, 
		StartHereDoc=228, ErrorPhp=229, CurlyDollar=230, UnicodeEscape=231, StringPart=232, 
		Comment=233, PHPEndSingleLineComment=234, CommentEnd=235, HereDocText=236, 
		XmlText2=237;
	public const int
		RULE_htmlDocument = 0, RULE_htmlElementOrPhpBlock = 1, RULE_htmlElements = 2, 
		RULE_htmlElement = 3, RULE_scriptTextPart = 4, RULE_phpBlock = 5, RULE_importStatement = 6, 
		RULE_topStatement = 7, RULE_useDeclaration = 8, RULE_useDeclarationContentList = 9, 
		RULE_useDeclarationContent = 10, RULE_namespaceDeclaration = 11, RULE_namespaceStatement = 12, 
		RULE_functionDeclaration = 13, RULE_classDeclaration = 14, RULE_classEntryType = 15, 
		RULE_interfaceList = 16, RULE_typeParameterListInBrackets = 17, RULE_typeParameterList = 18, 
		RULE_typeParameterWithDefaultsList = 19, RULE_typeParameterDecl = 20, 
		RULE_typeParameterWithDefaultDecl = 21, RULE_genericDynamicArgs = 22, 
		RULE_attributes = 23, RULE_attributesGroup = 24, RULE_attribute = 25, 
		RULE_attributeArgList = 26, RULE_attributeNamedArgList = 27, RULE_attributeNamedArg = 28, 
		RULE_innerStatementList = 29, RULE_innerStatement = 30, RULE_statement = 31, 
		RULE_emptyStatement = 32, RULE_blockStatement = 33, RULE_ifStatement = 34, 
		RULE_elseIfStatement = 35, RULE_elseIfColonStatement = 36, RULE_elseStatement = 37, 
		RULE_elseColonStatement = 38, RULE_whileStatement = 39, RULE_doWhileStatement = 40, 
		RULE_forStatement = 41, RULE_forInit = 42, RULE_forUpdate = 43, RULE_switchStatement = 44, 
		RULE_switchBlock = 45, RULE_breakStatement = 46, RULE_continueStatement = 47, 
		RULE_returnStatement = 48, RULE_expressionStatement = 49, RULE_unsetStatement = 50, 
		RULE_foreachStatement = 51, RULE_tryCatchFinally = 52, RULE_catchClause = 53, 
		RULE_finallyStatement = 54, RULE_throwStatement = 55, RULE_gotoStatement = 56, 
		RULE_declareStatement = 57, RULE_inlineHtmlStatement = 58, RULE_inlineHtml = 59, 
		RULE_declareList = 60, RULE_formalParameterList = 61, RULE_formalParameter = 62, 
		RULE_typeHint = 63, RULE_globalStatement = 64, RULE_globalVar = 65, RULE_echoStatement = 66, 
		RULE_staticVariableStatement = 67, RULE_classStatement = 68, RULE_traitAdaptations = 69, 
		RULE_traitAdaptationStatement = 70, RULE_traitPrecedence = 71, RULE_traitAlias = 72, 
		RULE_traitMethodReference = 73, RULE_baseCtorCall = 74, RULE_methodBody = 75, 
		RULE_propertyModifiers = 76, RULE_memberModifiers = 77, RULE_variableInitializer = 78, 
		RULE_identifierInititalizer = 79, RULE_globalConstantDeclaration = 80, 
		RULE_expressionList = 81, RULE_parentheses = 82, RULE_expression = 83, 
		RULE_assignable = 84, RULE_arrayCreation = 85, RULE_lambdaFunctionExpr = 86, 
		RULE_newExpr = 87, RULE_assignmentOperator = 88, RULE_yieldExpression = 89, 
		RULE_arrayItemList = 90, RULE_arrayItem = 91, RULE_lambdaFunctionUseVars = 92, 
		RULE_lambdaFunctionUseVar = 93, RULE_qualifiedStaticTypeRef = 94, RULE_typeRef = 95, 
		RULE_anoymousClass = 96, RULE_indirectTypeRef = 97, RULE_qualifiedNamespaceName = 98, 
		RULE_namespaceNameList = 99, RULE_namespaceNameTail = 100, RULE_qualifiedNamespaceNameList = 101, 
		RULE_arguments = 102, RULE_actualArgument = 103, RULE_constantInititalizer = 104, 
		RULE_constantArrayItemList = 105, RULE_constantArrayItem = 106, RULE_constant = 107, 
		RULE_literalConstant = 108, RULE_numericConstant = 109, RULE_classConstant = 110, 
		RULE_stringConstant = 111, RULE_string = 112, RULE_interpolatedStringPart = 113, 
		RULE_chainList = 114, RULE_chain = 115, RULE_chainOrigin = 116, RULE_memberAccess = 117, 
		RULE_functionCall = 118, RULE_functionCallName = 119, RULE_actualArguments = 120, 
		RULE_chainBase = 121, RULE_keyedFieldName = 122, RULE_keyedSimpleFieldName = 123, 
		RULE_keyedVariable = 124, RULE_squareCurlyExpression = 125, RULE_assignmentList = 126, 
		RULE_assignmentListElement = 127, RULE_modifier = 128, RULE_identifier = 129, 
		RULE_memberModifier = 130, RULE_magicConstant = 131, RULE_magicMethod = 132, 
		RULE_primitiveType = 133, RULE_castOperation = 134;
	public static readonly string[] ruleNames = {
		"htmlDocument", "htmlElementOrPhpBlock", "htmlElements", "htmlElement", 
		"scriptTextPart", "phpBlock", "importStatement", "topStatement", "useDeclaration", 
		"useDeclarationContentList", "useDeclarationContent", "namespaceDeclaration", 
		"namespaceStatement", "functionDeclaration", "classDeclaration", "classEntryType", 
		"interfaceList", "typeParameterListInBrackets", "typeParameterList", "typeParameterWithDefaultsList", 
		"typeParameterDecl", "typeParameterWithDefaultDecl", "genericDynamicArgs", 
		"attributes", "attributesGroup", "attribute", "attributeArgList", "attributeNamedArgList", 
		"attributeNamedArg", "innerStatementList", "innerStatement", "statement", 
		"emptyStatement", "blockStatement", "ifStatement", "elseIfStatement", 
		"elseIfColonStatement", "elseStatement", "elseColonStatement", "whileStatement", 
		"doWhileStatement", "forStatement", "forInit", "forUpdate", "switchStatement", 
		"switchBlock", "breakStatement", "continueStatement", "returnStatement", 
		"expressionStatement", "unsetStatement", "foreachStatement", "tryCatchFinally", 
		"catchClause", "finallyStatement", "throwStatement", "gotoStatement", 
		"declareStatement", "inlineHtmlStatement", "inlineHtml", "declareList", 
		"formalParameterList", "formalParameter", "typeHint", "globalStatement", 
		"globalVar", "echoStatement", "staticVariableStatement", "classStatement", 
		"traitAdaptations", "traitAdaptationStatement", "traitPrecedence", "traitAlias", 
		"traitMethodReference", "baseCtorCall", "methodBody", "propertyModifiers", 
		"memberModifiers", "variableInitializer", "identifierInititalizer", "globalConstantDeclaration", 
		"expressionList", "parentheses", "expression", "assignable", "arrayCreation", 
		"lambdaFunctionExpr", "newExpr", "assignmentOperator", "yieldExpression", 
		"arrayItemList", "arrayItem", "lambdaFunctionUseVars", "lambdaFunctionUseVar", 
		"qualifiedStaticTypeRef", "typeRef", "anoymousClass", "indirectTypeRef", 
		"qualifiedNamespaceName", "namespaceNameList", "namespaceNameTail", "qualifiedNamespaceNameList", 
		"arguments", "actualArgument", "constantInititalizer", "constantArrayItemList", 
		"constantArrayItem", "constant", "literalConstant", "numericConstant", 
		"classConstant", "stringConstant", "string", "interpolatedStringPart", 
		"chainList", "chain", "chainOrigin", "memberAccess", "functionCall", "functionCallName", 
		"actualArguments", "chainBase", "keyedFieldName", "keyedSimpleFieldName", 
		"keyedVariable", "squareCurlyExpression", "assignmentList", "assignmentListElement", 
		"modifier", "identifier", "memberModifier", "magicConstant", "magicMethod", 
		"primitiveType", "castOperation"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "'/>'", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'abstract'", "'array'", "'as'", 
		"'binary'", null, null, "'break'", "'callable'", "'case'", "'catch'", 
		"'class'", "'clone'", "'const'", "'continue'", "'declare'", "'default'", 
		"'do'", "'real'", "'double'", "'echo'", "'else'", "'elseif'", "'empty'", 
		"'enddeclare'", "'endfor'", "'endforeach'", "'endif'", "'endswitch'", 
		"'endwhile'", "'eval'", "'die'", "'extends'", "'final'", "'finally'", 
		"'float'", "'for'", "'foreach'", "'function'", "'global'", "'goto'", "'if'", 
		"'implements'", "'import'", "'include'", "'include_once'", "'instanceof'", 
		"'insteadof'", "'int8'", "'int16'", "'int64'", null, "'interface'", "'isset'", 
		"'list'", "'and'", "'or'", "'xor'", "'namespace'", "'new'", "'null'", 
		"'object'", "'parent'", "'partial'", "'print'", "'private'", "'protected'", 
		"'public'", "'require'", "'require_once'", "'resource'", "'return'", "'static'", 
		"'string'", "'switch'", "'throw'", "'trait'", "'try'", "'clrtypeof'", 
		null, "'unicode'", "'unset'", "'use'", "'var'", "'while'", "'yield'", 
		"'from'", "'fn'", "'__get'", "'__set'", "'__call'", "'__callstatic'", 
		"'__construct'", "'__destruct'", "'__wakeup'", "'__sleep'", "'__autoload'", 
		"'__isset'", "'__unset'", "'__tostring'", "'__invoke'", "'__set_state'", 
		"'__clone'", "'__debuginfo'", "'__namespace__'", "'__class__'", "'__trait__'", 
		"'__function__'", "'__method__'", "'__line__'", "'__file__'", "'__dir__'", 
		"'<=>'", "'<:'", "':>'", "'=>'", "'++'", "'--'", "'==='", "'!=='", "'=='", 
		null, "'<='", "'>='", "'+='", "'-='", "'*='", "'**'", "'**='", "'/='", 
		"'.='", "'%='", "'<<='", "'>>='", "'&='", "'|='", "'^='", "'||'", "'&&'", 
		"'??'", "'??='", "'<<'", "'>>'", "'::'", "'->'", "'\\'", "'...'", null, 
		null, "'&'", "'|'", "'!'", "'^'", "'+'", "'-'", "'*'", "'%'", null, "'~'", 
		"'@'", null, "'.'", null, "'('", "')'", "'['", "']'", null, "'}'", "','", 
		"':'", "';'", null, "'''", "'`'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SeaWhitespace", "HtmlText", "XmlStart", "PHPStart", "HtmlScriptOpen", 
		"HtmlStyleOpen", "HtmlComment", "HtmlDtd", "HtmlOpen", "Shebang", "Error", 
		"XmlText", "XmlClose", "PHPStartInside", "HtmlClose", "HtmlSlashClose", 
		"HtmlSlash", "HtmlEquals", "HtmlStartQuoteString", "HtmlStartDoubleQuoteString", 
		"HtmlHex", "HtmlDecimal", "HtmlSpace", "HtmlName", "ErrorInside", "PHPStartInsideQuoteString", 
		"HtmlEndQuoteString", "HtmlQuoteString", "ErrorHtmlQuote", "PHPStartDoubleQuoteString", 
		"HtmlEndDoubleQuoteString", "HtmlDoubleQuoteString", "ErrorHtmlDoubleQuote", 
		"ScriptText", "ScriptClose", "PHPStartInsideScript", "StyleBody", "PHPEnd", 
		"Whitespace", "MultiLineComment", "SingleLineComment", "ShellStyleComment", 
		"Abstract", "Array", "As", "BinaryCast", "BoolType", "BooleanConstant", 
		"Break", "Callable", "Case", "Catch", "Class", "Clone", "Const", "Continue", 
		"Declare", "Default", "Do", "DoubleCast", "DoubleType", "Echo", "Else", 
		"ElseIf", "Empty", "EndDeclare", "EndFor", "EndForeach", "EndIf", "EndSwitch", 
		"EndWhile", "Eval", "Exit", "Extends", "Final", "Finally", "FloatCast", 
		"For", "Foreach", "Function", "Global", "Goto", "If", "Implements", "Import", 
		"Include", "IncludeOnce", "InstanceOf", "InsteadOf", "Int8Cast", "Int16Cast", 
		"Int64Type", "IntType", "Interface", "IsSet", "List", "LogicalAnd", "LogicalOr", 
		"LogicalXor", "Namespace", "New", "Null", "ObjectType", "Parent_", "Partial", 
		"Print", "Private", "Protected", "Public", "Require", "RequireOnce", "Resource", 
		"Return", "Static", "StringType", "Switch", "Throw", "Trait", "Try", "Typeof", 
		"UintCast", "UnicodeCast", "Unset", "Use", "Var", "While", "Yield", "From", 
		"LambdaFn", "Get", "Set", "Call", "CallStatic", "Constructor", "Destruct", 
		"Wakeup", "Sleep", "Autoload", "IsSet__", "Unset__", "ToString__", "Invoke", 
		"SetState", "Clone__", "DebugInfo", "Namespace__", "Class__", "Traic__", 
		"Function__", "Method__", "Line__", "File__", "Dir__", "Spaceship", "Lgeneric", 
		"Rgeneric", "DoubleArrow", "Inc", "Dec", "IsIdentical", "IsNoidentical", 
		"IsEqual", "IsNotEq", "IsSmallerOrEqual", "IsGreaterOrEqual", "PlusEqual", 
		"MinusEqual", "MulEqual", "Pow", "PowEqual", "DivEqual", "Concaequal", 
		"ModEqual", "ShiftLeftEqual", "ShiftRightEqual", "AndEqual", "OrEqual", 
		"XorEqual", "BooleanOr", "BooleanAnd", "NullCoalescing", "NullCoalescingEqual", 
		"ShiftLeft", "ShiftRight", "DoubleColon", "ObjectOperator", "NamespaceSeparator", 
		"Ellipsis", "Less", "Greater", "Ampersand", "Pipe", "Bang", "Caret", "Plus", 
		"Minus", "Asterisk", "Percent", "Divide", "Tilde", "SuppressWarnings", 
		"Dollar", "Dot", "QuestionMark", "OpenRoundBracket", "CloseRoundBracket", 
		"OpenSquareBracket", "CloseSquareBracket", "OpenCurlyBracket", "CloseCurlyBracket", 
		"Comma", "Colon", "SemiColon", "Eq", "Quote", "BackQuote", "VarName", 
		"Label", "Octal", "Decimal", "Real", "Hex", "Binary", "BackQuoteString", 
		"SingleQuoteString", "DoubleQuote", "StartNowDoc", "StartHereDoc", "ErrorPhp", 
		"CurlyDollar", "UnicodeEscape", "StringPart", "Comment", "PHPEndSingleLineComment", 
		"CommentEnd", "HereDocText", "XmlText2"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PhpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PhpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PhpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PhpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class HtmlDocumentContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(PhpParser.Eof, 0); }
		public ITerminalNode Shebang() { return GetToken(PhpParser.Shebang, 0); }
		public HtmlElementOrPhpBlockContext[] htmlElementOrPhpBlock() {
			return GetRuleContexts<HtmlElementOrPhpBlockContext>();
		}
		public HtmlElementOrPhpBlockContext htmlElementOrPhpBlock(int i) {
			return GetRuleContext<HtmlElementOrPhpBlockContext>(i);
		}
		public HtmlDocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlDocument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterHtmlDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitHtmlDocument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlDocumentContext htmlDocument() {
		HtmlDocumentContext _localctx = new HtmlDocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_htmlDocument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Shebang) {
				{
				State = 270; Match(Shebang);
				}
			}

			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HtmlText) | (1L << XmlStart) | (1L << HtmlScriptOpen) | (1L << HtmlStyleOpen) | (1L << HtmlDtd) | (1L << HtmlOpen) | (1L << HtmlClose) | (1L << HtmlSlashClose) | (1L << HtmlSlash) | (1L << HtmlEquals) | (1L << HtmlStartQuoteString) | (1L << HtmlStartDoubleQuoteString) | (1L << HtmlHex) | (1L << HtmlDecimal) | (1L << HtmlName) | (1L << HtmlEndQuoteString) | (1L << HtmlQuoteString) | (1L << HtmlEndDoubleQuoteString) | (1L << HtmlDoubleQuoteString) | (1L << ScriptText) | (1L << ScriptClose) | (1L << StyleBody) | (1L << Abstract) | (1L << Array) | (1L << As) | (1L << BinaryCast) | (1L << BoolType) | (1L << BooleanConstant) | (1L << Break) | (1L << Callable) | (1L << Case) | (1L << Catch) | (1L << Class) | (1L << Clone) | (1L << Const) | (1L << Continue) | (1L << Declare) | (1L << Default) | (1L << Do) | (1L << DoubleCast) | (1L << DoubleType) | (1L << Echo) | (1L << Else))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ElseIf - 64)) | (1L << (Empty - 64)) | (1L << (EndDeclare - 64)) | (1L << (EndFor - 64)) | (1L << (EndForeach - 64)) | (1L << (EndIf - 64)) | (1L << (EndSwitch - 64)) | (1L << (EndWhile - 64)) | (1L << (Eval - 64)) | (1L << (Exit - 64)) | (1L << (Extends - 64)) | (1L << (Final - 64)) | (1L << (Finally - 64)) | (1L << (FloatCast - 64)) | (1L << (For - 64)) | (1L << (Foreach - 64)) | (1L << (Function - 64)) | (1L << (Global - 64)) | (1L << (Goto - 64)) | (1L << (If - 64)) | (1L << (Implements - 64)) | (1L << (Import - 64)) | (1L << (Include - 64)) | (1L << (IncludeOnce - 64)) | (1L << (InstanceOf - 64)) | (1L << (InsteadOf - 64)) | (1L << (Int8Cast - 64)) | (1L << (Int16Cast - 64)) | (1L << (Int64Type - 64)) | (1L << (IntType - 64)) | (1L << (Interface - 64)) | (1L << (IsSet - 64)) | (1L << (List - 64)) | (1L << (LogicalAnd - 64)) | (1L << (LogicalOr - 64)) | (1L << (LogicalXor - 64)) | (1L << (Namespace - 64)) | (1L << (New - 64)) | (1L << (Null - 64)) | (1L << (ObjectType - 64)) | (1L << (Parent_ - 64)) | (1L << (Partial - 64)) | (1L << (Print - 64)) | (1L << (Private - 64)) | (1L << (Protected - 64)) | (1L << (Public - 64)) | (1L << (Require - 64)) | (1L << (RequireOnce - 64)) | (1L << (Resource - 64)) | (1L << (Return - 64)) | (1L << (Static - 64)) | (1L << (StringType - 64)) | (1L << (Switch - 64)) | (1L << (Throw - 64)) | (1L << (Trait - 64)) | (1L << (Try - 64)) | (1L << (Typeof - 64)) | (1L << (UintCast - 64)) | (1L << (UnicodeCast - 64)) | (1L << (Unset - 64)) | (1L << (Use - 64)) | (1L << (Var - 64)) | (1L << (While - 64)) | (1L << (Yield - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (From - 128)) | (1L << (LambdaFn - 128)) | (1L << (Get - 128)) | (1L << (Set - 128)) | (1L << (Call - 128)) | (1L << (CallStatic - 128)) | (1L << (Constructor - 128)) | (1L << (Destruct - 128)) | (1L << (Wakeup - 128)) | (1L << (Sleep - 128)) | (1L << (Autoload - 128)) | (1L << (IsSet__ - 128)) | (1L << (Unset__ - 128)) | (1L << (ToString__ - 128)) | (1L << (Invoke - 128)) | (1L << (SetState - 128)) | (1L << (Clone__ - 128)) | (1L << (DebugInfo - 128)) | (1L << (Namespace__ - 128)) | (1L << (Class__ - 128)) | (1L << (Traic__ - 128)) | (1L << (Function__ - 128)) | (1L << (Method__ - 128)) | (1L << (Line__ - 128)) | (1L << (File__ - 128)) | (1L << (Dir__ - 128)) | (1L << (Inc - 128)) | (1L << (Dec - 128)) | (1L << (NamespaceSeparator - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (Bang - 193)) | (1L << (Plus - 193)) | (1L << (Minus - 193)) | (1L << (Tilde - 193)) | (1L << (SuppressWarnings - 193)) | (1L << (Dollar - 193)) | (1L << (OpenRoundBracket - 193)) | (1L << (OpenSquareBracket - 193)) | (1L << (OpenCurlyBracket - 193)) | (1L << (SemiColon - 193)) | (1L << (VarName - 193)) | (1L << (Label - 193)) | (1L << (Octal - 193)) | (1L << (Decimal - 193)) | (1L << (Real - 193)) | (1L << (Hex - 193)) | (1L << (Binary - 193)) | (1L << (BackQuoteString - 193)) | (1L << (SingleQuoteString - 193)) | (1L << (DoubleQuote - 193)) | (1L << (StartNowDoc - 193)) | (1L << (StartHereDoc - 193)))) != 0)) {
				{
				{
				State = 273; htmlElementOrPhpBlock();
				}
				}
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 279; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlElementOrPhpBlockContext : ParserRuleContext {
		public HtmlElementsContext htmlElements() {
			return GetRuleContext<HtmlElementsContext>(0);
		}
		public PhpBlockContext phpBlock() {
			return GetRuleContext<PhpBlockContext>(0);
		}
		public ScriptTextPartContext scriptTextPart() {
			return GetRuleContext<ScriptTextPartContext>(0);
		}
		public HtmlElementOrPhpBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlElementOrPhpBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterHtmlElementOrPhpBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitHtmlElementOrPhpBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlElementOrPhpBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlElementOrPhpBlockContext htmlElementOrPhpBlock() {
		HtmlElementOrPhpBlockContext _localctx = new HtmlElementOrPhpBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_htmlElementOrPhpBlock);
		try {
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 281; htmlElements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282; phpBlock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 283; scriptTextPart();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlElementsContext : ParserRuleContext {
		public HtmlElementContext[] htmlElement() {
			return GetRuleContexts<HtmlElementContext>();
		}
		public HtmlElementContext htmlElement(int i) {
			return GetRuleContext<HtmlElementContext>(i);
		}
		public HtmlElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterHtmlElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitHtmlElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlElementsContext htmlElements() {
		HtmlElementsContext _localctx = new HtmlElementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_htmlElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 286; htmlElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 289;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlElementContext : ParserRuleContext {
		public ITerminalNode HtmlDtd() { return GetToken(PhpParser.HtmlDtd, 0); }
		public ITerminalNode HtmlScriptOpen() { return GetToken(PhpParser.HtmlScriptOpen, 0); }
		public ITerminalNode HtmlClose() { return GetToken(PhpParser.HtmlClose, 0); }
		public ITerminalNode HtmlStyleOpen() { return GetToken(PhpParser.HtmlStyleOpen, 0); }
		public ITerminalNode HtmlOpen() { return GetToken(PhpParser.HtmlOpen, 0); }
		public ITerminalNode HtmlName() { return GetToken(PhpParser.HtmlName, 0); }
		public ITerminalNode HtmlSlashClose() { return GetToken(PhpParser.HtmlSlashClose, 0); }
		public ITerminalNode HtmlSlash() { return GetToken(PhpParser.HtmlSlash, 0); }
		public ITerminalNode HtmlText() { return GetToken(PhpParser.HtmlText, 0); }
		public ITerminalNode HtmlEquals() { return GetToken(PhpParser.HtmlEquals, 0); }
		public ITerminalNode HtmlStartQuoteString() { return GetToken(PhpParser.HtmlStartQuoteString, 0); }
		public ITerminalNode HtmlEndQuoteString() { return GetToken(PhpParser.HtmlEndQuoteString, 0); }
		public ITerminalNode HtmlStartDoubleQuoteString() { return GetToken(PhpParser.HtmlStartDoubleQuoteString, 0); }
		public ITerminalNode HtmlEndDoubleQuoteString() { return GetToken(PhpParser.HtmlEndDoubleQuoteString, 0); }
		public ITerminalNode HtmlHex() { return GetToken(PhpParser.HtmlHex, 0); }
		public ITerminalNode HtmlDecimal() { return GetToken(PhpParser.HtmlDecimal, 0); }
		public ITerminalNode HtmlQuoteString() { return GetToken(PhpParser.HtmlQuoteString, 0); }
		public ITerminalNode HtmlDoubleQuoteString() { return GetToken(PhpParser.HtmlDoubleQuoteString, 0); }
		public ITerminalNode StyleBody() { return GetToken(PhpParser.StyleBody, 0); }
		public ITerminalNode ScriptClose() { return GetToken(PhpParser.ScriptClose, 0); }
		public ITerminalNode XmlStart() { return GetToken(PhpParser.XmlStart, 0); }
		public ITerminalNode XmlClose() { return GetToken(PhpParser.XmlClose, 0); }
		public ITerminalNode[] XmlText() { return GetTokens(PhpParser.XmlText); }
		public ITerminalNode XmlText(int i) {
			return GetToken(PhpParser.XmlText, i);
		}
		public HtmlElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterHtmlElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitHtmlElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlElementContext htmlElement() {
		HtmlElementContext _localctx = new HtmlElementContext(Context, State);
		EnterRule(_localctx, 6, RULE_htmlElement);
		int _la;
		try {
			State = 319;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HtmlDtd:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291; Match(HtmlDtd);
				}
				break;
			case HtmlScriptOpen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 292; Match(HtmlScriptOpen);
				}
				break;
			case HtmlClose:
				EnterOuterAlt(_localctx, 3);
				{
				State = 293; Match(HtmlClose);
				}
				break;
			case HtmlStyleOpen:
				EnterOuterAlt(_localctx, 4);
				{
				State = 294; Match(HtmlStyleOpen);
				}
				break;
			case HtmlOpen:
				EnterOuterAlt(_localctx, 5);
				{
				State = 295; Match(HtmlOpen);
				}
				break;
			case HtmlName:
				EnterOuterAlt(_localctx, 6);
				{
				State = 296; Match(HtmlName);
				}
				break;
			case HtmlSlashClose:
				EnterOuterAlt(_localctx, 7);
				{
				State = 297; Match(HtmlSlashClose);
				}
				break;
			case HtmlSlash:
				EnterOuterAlt(_localctx, 8);
				{
				State = 298; Match(HtmlSlash);
				}
				break;
			case HtmlText:
				EnterOuterAlt(_localctx, 9);
				{
				State = 299; Match(HtmlText);
				}
				break;
			case HtmlEquals:
				EnterOuterAlt(_localctx, 10);
				{
				State = 300; Match(HtmlEquals);
				}
				break;
			case HtmlStartQuoteString:
				EnterOuterAlt(_localctx, 11);
				{
				State = 301; Match(HtmlStartQuoteString);
				}
				break;
			case HtmlEndQuoteString:
				EnterOuterAlt(_localctx, 12);
				{
				State = 302; Match(HtmlEndQuoteString);
				}
				break;
			case HtmlStartDoubleQuoteString:
				EnterOuterAlt(_localctx, 13);
				{
				State = 303; Match(HtmlStartDoubleQuoteString);
				}
				break;
			case HtmlEndDoubleQuoteString:
				EnterOuterAlt(_localctx, 14);
				{
				State = 304; Match(HtmlEndDoubleQuoteString);
				}
				break;
			case HtmlHex:
				EnterOuterAlt(_localctx, 15);
				{
				State = 305; Match(HtmlHex);
				}
				break;
			case HtmlDecimal:
				EnterOuterAlt(_localctx, 16);
				{
				State = 306; Match(HtmlDecimal);
				}
				break;
			case HtmlQuoteString:
				EnterOuterAlt(_localctx, 17);
				{
				State = 307; Match(HtmlQuoteString);
				}
				break;
			case HtmlDoubleQuoteString:
				EnterOuterAlt(_localctx, 18);
				{
				State = 308; Match(HtmlDoubleQuoteString);
				}
				break;
			case StyleBody:
				EnterOuterAlt(_localctx, 19);
				{
				State = 309; Match(StyleBody);
				}
				break;
			case ScriptClose:
				EnterOuterAlt(_localctx, 20);
				{
				State = 310; Match(ScriptClose);
				}
				break;
			case XmlStart:
				EnterOuterAlt(_localctx, 21);
				{
				State = 311; Match(XmlStart);
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==XmlText) {
					{
					{
					State = 312; Match(XmlText);
					}
					}
					State = 317;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 318; Match(XmlClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptTextPartContext : ParserRuleContext {
		public ITerminalNode[] ScriptText() { return GetTokens(PhpParser.ScriptText); }
		public ITerminalNode ScriptText(int i) {
			return GetToken(PhpParser.ScriptText, i);
		}
		public ScriptTextPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptTextPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterScriptTextPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitScriptTextPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptTextPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptTextPartContext scriptTextPart() {
		ScriptTextPartContext _localctx = new ScriptTextPartContext(Context, State);
		EnterRule(_localctx, 8, RULE_scriptTextPart);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 321; Match(ScriptText);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 324;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PhpBlockContext : ParserRuleContext {
		public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		public TopStatementContext[] topStatement() {
			return GetRuleContexts<TopStatementContext>();
		}
		public TopStatementContext topStatement(int i) {
			return GetRuleContext<TopStatementContext>(i);
		}
		public PhpBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_phpBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterPhpBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitPhpBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhpBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PhpBlockContext phpBlock() {
		PhpBlockContext _localctx = new PhpBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_phpBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 326; importStatement();
					}
					} 
				}
				State = 331;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 333;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 332; topStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public ITerminalNode Import() { return GetToken(PhpParser.Import, 0); }
		public ITerminalNode Namespace() { return GetToken(PhpParser.Namespace, 0); }
		public NamespaceNameListContext namespaceNameList() {
			return GetRuleContext<NamespaceNameListContext>(0);
		}
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(Import);
			State = 338; Match(Namespace);
			State = 339; namespaceNameList();
			State = 340; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public UseDeclarationContext useDeclaration() {
			return GetRuleContext<UseDeclarationContext>(0);
		}
		public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public GlobalConstantDeclarationContext globalConstantDeclaration() {
			return GetRuleContext<GlobalConstantDeclarationContext>(0);
		}
		public TopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterTopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitTopStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopStatementContext topStatement() {
		TopStatementContext _localctx = new TopStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_topStatement);
		try {
			State = 348;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 342; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343; useDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 344; namespaceDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 345; functionDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 346; classDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 347; globalConstantDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseDeclarationContext : ParserRuleContext {
		public ITerminalNode Use() { return GetToken(PhpParser.Use, 0); }
		public UseDeclarationContentListContext useDeclarationContentList() {
			return GetRuleContext<UseDeclarationContentListContext>(0);
		}
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public ITerminalNode Function() { return GetToken(PhpParser.Function, 0); }
		public ITerminalNode Const() { return GetToken(PhpParser.Const, 0); }
		public UseDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterUseDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitUseDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseDeclarationContext useDeclaration() {
		UseDeclarationContext _localctx = new UseDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_useDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(Use);
			State = 352;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 351;
				_la = TokenStream.LA(1);
				if ( !(_la==Const || _la==Function) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 354; useDeclarationContentList();
			State = 355; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseDeclarationContentListContext : ParserRuleContext {
		public UseDeclarationContentContext[] useDeclarationContent() {
			return GetRuleContexts<UseDeclarationContentContext>();
		}
		public UseDeclarationContentContext useDeclarationContent(int i) {
			return GetRuleContext<UseDeclarationContentContext>(i);
		}
		public ITerminalNode[] NamespaceSeparator() { return GetTokens(PhpParser.NamespaceSeparator); }
		public ITerminalNode NamespaceSeparator(int i) {
			return GetToken(PhpParser.NamespaceSeparator, i);
		}
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public UseDeclarationContentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useDeclarationContentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterUseDeclarationContentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitUseDeclarationContentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseDeclarationContentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseDeclarationContentListContext useDeclarationContentList() {
		UseDeclarationContentListContext _localctx = new UseDeclarationContentListContext(Context, State);
		EnterRule(_localctx, 18, RULE_useDeclarationContentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NamespaceSeparator) {
				{
				State = 357; Match(NamespaceSeparator);
				}
			}

			State = 360; useDeclarationContent();
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 361; Match(Comma);
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NamespaceSeparator) {
					{
					State = 362; Match(NamespaceSeparator);
					}
				}

				State = 365; useDeclarationContent();
				}
				}
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseDeclarationContentContext : ParserRuleContext {
		public NamespaceNameListContext namespaceNameList() {
			return GetRuleContext<NamespaceNameListContext>(0);
		}
		public UseDeclarationContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useDeclarationContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterUseDeclarationContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitUseDeclarationContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseDeclarationContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseDeclarationContentContext useDeclarationContent() {
		UseDeclarationContentContext _localctx = new UseDeclarationContentContext(Context, State);
		EnterRule(_localctx, 20, RULE_useDeclarationContent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; namespaceNameList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(PhpParser.Namespace, 0); }
		public ITerminalNode OpenCurlyBracket() { return GetToken(PhpParser.OpenCurlyBracket, 0); }
		public ITerminalNode CloseCurlyBracket() { return GetToken(PhpParser.CloseCurlyBracket, 0); }
		public NamespaceNameListContext namespaceNameList() {
			return GetRuleContext<NamespaceNameListContext>(0);
		}
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public NamespaceStatementContext[] namespaceStatement() {
			return GetRuleContexts<NamespaceStatementContext>();
		}
		public NamespaceStatementContext namespaceStatement(int i) {
			return GetRuleContext<NamespaceStatementContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; Match(Namespace);
			State = 388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)))) != 0) || _la==Label) {
					{
					State = 374; namespaceNameList();
					}
				}

				State = 377; Match(OpenCurlyBracket);
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HtmlText) | (1L << XmlStart) | (1L << HtmlScriptOpen) | (1L << HtmlStyleOpen) | (1L << HtmlDtd) | (1L << HtmlOpen) | (1L << HtmlClose) | (1L << HtmlSlashClose) | (1L << HtmlSlash) | (1L << HtmlEquals) | (1L << HtmlStartQuoteString) | (1L << HtmlStartDoubleQuoteString) | (1L << HtmlHex) | (1L << HtmlDecimal) | (1L << HtmlName) | (1L << HtmlEndQuoteString) | (1L << HtmlQuoteString) | (1L << HtmlEndDoubleQuoteString) | (1L << HtmlDoubleQuoteString) | (1L << ScriptText) | (1L << ScriptClose) | (1L << StyleBody) | (1L << Abstract) | (1L << Array) | (1L << As) | (1L << BinaryCast) | (1L << BoolType) | (1L << BooleanConstant) | (1L << Break) | (1L << Callable) | (1L << Case) | (1L << Catch) | (1L << Class) | (1L << Clone) | (1L << Const) | (1L << Continue) | (1L << Declare) | (1L << Default) | (1L << Do) | (1L << DoubleCast) | (1L << DoubleType) | (1L << Echo) | (1L << Else))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ElseIf - 64)) | (1L << (Empty - 64)) | (1L << (EndDeclare - 64)) | (1L << (EndFor - 64)) | (1L << (EndForeach - 64)) | (1L << (EndIf - 64)) | (1L << (EndSwitch - 64)) | (1L << (EndWhile - 64)) | (1L << (Eval - 64)) | (1L << (Exit - 64)) | (1L << (Extends - 64)) | (1L << (Final - 64)) | (1L << (Finally - 64)) | (1L << (FloatCast - 64)) | (1L << (For - 64)) | (1L << (Foreach - 64)) | (1L << (Function - 64)) | (1L << (Global - 64)) | (1L << (Goto - 64)) | (1L << (If - 64)) | (1L << (Implements - 64)) | (1L << (Import - 64)) | (1L << (Include - 64)) | (1L << (IncludeOnce - 64)) | (1L << (InstanceOf - 64)) | (1L << (InsteadOf - 64)) | (1L << (Int8Cast - 64)) | (1L << (Int16Cast - 64)) | (1L << (Int64Type - 64)) | (1L << (IntType - 64)) | (1L << (Interface - 64)) | (1L << (IsSet - 64)) | (1L << (List - 64)) | (1L << (LogicalAnd - 64)) | (1L << (LogicalOr - 64)) | (1L << (LogicalXor - 64)) | (1L << (Namespace - 64)) | (1L << (New - 64)) | (1L << (Null - 64)) | (1L << (ObjectType - 64)) | (1L << (Parent_ - 64)) | (1L << (Partial - 64)) | (1L << (Print - 64)) | (1L << (Private - 64)) | (1L << (Protected - 64)) | (1L << (Public - 64)) | (1L << (Require - 64)) | (1L << (RequireOnce - 64)) | (1L << (Resource - 64)) | (1L << (Return - 64)) | (1L << (Static - 64)) | (1L << (StringType - 64)) | (1L << (Switch - 64)) | (1L << (Throw - 64)) | (1L << (Trait - 64)) | (1L << (Try - 64)) | (1L << (Typeof - 64)) | (1L << (UintCast - 64)) | (1L << (UnicodeCast - 64)) | (1L << (Unset - 64)) | (1L << (Use - 64)) | (1L << (Var - 64)) | (1L << (While - 64)) | (1L << (Yield - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (From - 128)) | (1L << (LambdaFn - 128)) | (1L << (Get - 128)) | (1L << (Set - 128)) | (1L << (Call - 128)) | (1L << (CallStatic - 128)) | (1L << (Constructor - 128)) | (1L << (Destruct - 128)) | (1L << (Wakeup - 128)) | (1L << (Sleep - 128)) | (1L << (Autoload - 128)) | (1L << (IsSet__ - 128)) | (1L << (Unset__ - 128)) | (1L << (ToString__ - 128)) | (1L << (Invoke - 128)) | (1L << (SetState - 128)) | (1L << (Clone__ - 128)) | (1L << (DebugInfo - 128)) | (1L << (Namespace__ - 128)) | (1L << (Class__ - 128)) | (1L << (Traic__ - 128)) | (1L << (Function__ - 128)) | (1L << (Method__ - 128)) | (1L << (Line__ - 128)) | (1L << (File__ - 128)) | (1L << (Dir__ - 128)) | (1L << (Inc - 128)) | (1L << (Dec - 128)) | (1L << (NamespaceSeparator - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (Bang - 193)) | (1L << (Plus - 193)) | (1L << (Minus - 193)) | (1L << (Tilde - 193)) | (1L << (SuppressWarnings - 193)) | (1L << (Dollar - 193)) | (1L << (OpenRoundBracket - 193)) | (1L << (OpenSquareBracket - 193)) | (1L << (OpenCurlyBracket - 193)) | (1L << (SemiColon - 193)) | (1L << (VarName - 193)) | (1L << (Label - 193)) | (1L << (Octal - 193)) | (1L << (Decimal - 193)) | (1L << (Real - 193)) | (1L << (Hex - 193)) | (1L << (Binary - 193)) | (1L << (BackQuoteString - 193)) | (1L << (SingleQuoteString - 193)) | (1L << (DoubleQuote - 193)) | (1L << (StartNowDoc - 193)) | (1L << (StartHereDoc - 193)))) != 0)) {
					{
					{
					State = 378; namespaceStatement();
					}
					}
					State = 383;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 384; Match(CloseCurlyBracket);
				}
				break;
			case 2:
				{
				State = 385; namespaceNameList();
				State = 386; Match(SemiColon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public UseDeclarationContext useDeclaration() {
			return GetRuleContext<UseDeclarationContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public GlobalConstantDeclarationContext globalConstantDeclaration() {
			return GetRuleContext<GlobalConstantDeclarationContext>(0);
		}
		public NamespaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterNamespaceStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitNamespaceStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceStatementContext namespaceStatement() {
		NamespaceStatementContext _localctx = new NamespaceStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_namespaceStatement);
		try {
			State = 395;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 390; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391; useDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 392; functionDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 393; classDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 394; globalConstantDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode Function() { return GetToken(PhpParser.Function, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public ITerminalNode Ampersand() { return GetToken(PhpParser.Ampersand, 0); }
		public TypeParameterListInBracketsContext typeParameterListInBrackets() {
			return GetRuleContext<TypeParameterListInBracketsContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(PhpParser.Colon, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode QuestionMark() { return GetToken(PhpParser.QuestionMark, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; attributes();
			State = 398; Match(Function);
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ampersand) {
				{
				State = 399; Match(Ampersand);
				}
			}

			State = 402; identifier();
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Lgeneric) {
				{
				State = 403; typeParameterListInBrackets();
				}
			}

			State = 406; Match(OpenRoundBracket);
			State = 407; formalParameterList();
			State = 408; Match(CloseRoundBracket);
			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 409; Match(Colon);
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QuestionMark) {
					{
					State = 410; Match(QuestionMark);
					}
				}

				State = 413; typeHint();
				}
			}

			State = 416; blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode OpenCurlyBracket() { return GetToken(PhpParser.OpenCurlyBracket, 0); }
		public ITerminalNode CloseCurlyBracket() { return GetToken(PhpParser.CloseCurlyBracket, 0); }
		public ClassEntryTypeContext classEntryType() {
			return GetRuleContext<ClassEntryTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Interface() { return GetToken(PhpParser.Interface, 0); }
		public ITerminalNode Private() { return GetToken(PhpParser.Private, 0); }
		public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		public ITerminalNode Partial() { return GetToken(PhpParser.Partial, 0); }
		public ClassStatementContext[] classStatement() {
			return GetRuleContexts<ClassStatementContext>();
		}
		public ClassStatementContext classStatement(int i) {
			return GetRuleContext<ClassStatementContext>(i);
		}
		public TypeParameterListInBracketsContext typeParameterListInBrackets() {
			return GetRuleContext<TypeParameterListInBracketsContext>(0);
		}
		public ITerminalNode Extends() { return GetToken(PhpParser.Extends, 0); }
		public QualifiedStaticTypeRefContext qualifiedStaticTypeRef() {
			return GetRuleContext<QualifiedStaticTypeRefContext>(0);
		}
		public ITerminalNode Implements() { return GetToken(PhpParser.Implements, 0); }
		public InterfaceListContext interfaceList() {
			return GetRuleContext<InterfaceListContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; attributes();
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Private) {
				{
				State = 419; Match(Private);
				}
			}

			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Abstract || _la==Final) {
				{
				State = 422; modifier();
				}
			}

			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Partial) {
				{
				State = 425; Match(Partial);
				}
			}

			State = 450;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Class:
			case Trait:
				{
				State = 428; classEntryType();
				State = 429; identifier();
				State = 431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Lgeneric) {
					{
					State = 430; typeParameterListInBrackets();
					}
				}

				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Extends) {
					{
					State = 433; Match(Extends);
					State = 434; qualifiedStaticTypeRef();
					}
				}

				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Implements) {
					{
					State = 437; Match(Implements);
					State = 438; interfaceList();
					}
				}

				}
				break;
			case Interface:
				{
				State = 441; Match(Interface);
				State = 442; identifier();
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Lgeneric) {
					{
					State = 443; typeParameterListInBrackets();
					}
				}

				State = 448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Extends) {
					{
					State = 446; Match(Extends);
					State = 447; interfaceList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 452; Match(OpenCurlyBracket);
			State = 456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Abstract || _la==Const || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Final - 75)) | (1L << (Function - 75)) | (1L << (Private - 75)) | (1L << (Protected - 75)) | (1L << (Public - 75)) | (1L << (Static - 75)) | (1L << (Use - 75)) | (1L << (Var - 75)))) != 0) || _la==OpenSquareBracket) {
				{
				{
				State = 453; classStatement();
				}
				}
				State = 458;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 459; Match(CloseCurlyBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassEntryTypeContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(PhpParser.Class, 0); }
		public ITerminalNode Trait() { return GetToken(PhpParser.Trait, 0); }
		public ClassEntryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classEntryType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterClassEntryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitClassEntryType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassEntryType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassEntryTypeContext classEntryType() {
		ClassEntryTypeContext _localctx = new ClassEntryTypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_classEntryType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			_la = TokenStream.LA(1);
			if ( !(_la==Class || _la==Trait) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceListContext : ParserRuleContext {
		public QualifiedStaticTypeRefContext[] qualifiedStaticTypeRef() {
			return GetRuleContexts<QualifiedStaticTypeRefContext>();
		}
		public QualifiedStaticTypeRefContext qualifiedStaticTypeRef(int i) {
			return GetRuleContext<QualifiedStaticTypeRefContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public InterfaceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterInterfaceList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitInterfaceList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceListContext interfaceList() {
		InterfaceListContext _localctx = new InterfaceListContext(Context, State);
		EnterRule(_localctx, 32, RULE_interfaceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; qualifiedStaticTypeRef();
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 464; Match(Comma);
				State = 465; qualifiedStaticTypeRef();
				}
				}
				State = 470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListInBracketsContext : ParserRuleContext {
		public ITerminalNode Lgeneric() { return GetToken(PhpParser.Lgeneric, 0); }
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public ITerminalNode Rgeneric() { return GetToken(PhpParser.Rgeneric, 0); }
		public TypeParameterWithDefaultsListContext typeParameterWithDefaultsList() {
			return GetRuleContext<TypeParameterWithDefaultsListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(PhpParser.Comma, 0); }
		public TypeParameterListInBracketsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterListInBrackets; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterListInBrackets(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterListInBrackets(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterListInBrackets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListInBracketsContext typeParameterListInBrackets() {
		TypeParameterListInBracketsContext _localctx = new TypeParameterListInBracketsContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeParameterListInBrackets);
		try {
			State = 485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 471; Match(Lgeneric);
				State = 472; typeParameterList();
				State = 473; Match(Rgeneric);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 475; Match(Lgeneric);
				State = 476; typeParameterWithDefaultsList();
				State = 477; Match(Rgeneric);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 479; Match(Lgeneric);
				State = 480; typeParameterList();
				State = 481; Match(Comma);
				State = 482; typeParameterWithDefaultsList();
				State = 483; Match(Rgeneric);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public TypeParameterDeclContext[] typeParameterDecl() {
			return GetRuleContexts<TypeParameterDeclContext>();
		}
		public TypeParameterDeclContext typeParameterDecl(int i) {
			return GetRuleContext<TypeParameterDeclContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeParameterList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; typeParameterDecl();
			State = 492;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 488; Match(Comma);
					State = 489; typeParameterDecl();
					}
					} 
				}
				State = 494;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterWithDefaultsListContext : ParserRuleContext {
		public TypeParameterWithDefaultDeclContext[] typeParameterWithDefaultDecl() {
			return GetRuleContexts<TypeParameterWithDefaultDeclContext>();
		}
		public TypeParameterWithDefaultDeclContext typeParameterWithDefaultDecl(int i) {
			return GetRuleContext<TypeParameterWithDefaultDeclContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public TypeParameterWithDefaultsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterWithDefaultsList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterWithDefaultsList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterWithDefaultsList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterWithDefaultsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterWithDefaultsListContext typeParameterWithDefaultsList() {
		TypeParameterWithDefaultsListContext _localctx = new TypeParameterWithDefaultsListContext(Context, State);
		EnterRule(_localctx, 38, RULE_typeParameterWithDefaultsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; typeParameterWithDefaultDecl();
			State = 500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 496; Match(Comma);
				State = 497; typeParameterWithDefaultDecl();
				}
				}
				State = 502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterDeclContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeParameterDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterDeclContext typeParameterDecl() {
		TypeParameterDeclContext _localctx = new TypeParameterDeclContext(Context, State);
		EnterRule(_localctx, 40, RULE_typeParameterDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; attributes();
			State = 504; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterWithDefaultDeclContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Eq() { return GetToken(PhpParser.Eq, 0); }
		public QualifiedStaticTypeRefContext qualifiedStaticTypeRef() {
			return GetRuleContext<QualifiedStaticTypeRefContext>(0);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeParameterWithDefaultDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterWithDefaultDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterWithDefaultDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterWithDefaultDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterWithDefaultDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterWithDefaultDeclContext typeParameterWithDefaultDecl() {
		TypeParameterWithDefaultDeclContext _localctx = new TypeParameterWithDefaultDeclContext(Context, State);
		EnterRule(_localctx, 42, RULE_typeParameterWithDefaultDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506; attributes();
			State = 507; identifier();
			State = 508; Match(Eq);
			State = 511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 509; qualifiedStaticTypeRef();
				}
				break;
			case 2:
				{
				State = 510; primitiveType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericDynamicArgsContext : ParserRuleContext {
		public ITerminalNode Lgeneric() { return GetToken(PhpParser.Lgeneric, 0); }
		public TypeRefContext[] typeRef() {
			return GetRuleContexts<TypeRefContext>();
		}
		public TypeRefContext typeRef(int i) {
			return GetRuleContext<TypeRefContext>(i);
		}
		public ITerminalNode Rgeneric() { return GetToken(PhpParser.Rgeneric, 0); }
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public GenericDynamicArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericDynamicArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterGenericDynamicArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitGenericDynamicArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericDynamicArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericDynamicArgsContext genericDynamicArgs() {
		GenericDynamicArgsContext _localctx = new GenericDynamicArgsContext(Context, State);
		EnterRule(_localctx, 44, RULE_genericDynamicArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513; Match(Lgeneric);
			State = 514; typeRef();
			State = 519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 515; Match(Comma);
				State = 516; typeRef();
				}
				}
				State = 521;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 522; Match(Rgeneric);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public AttributesGroupContext[] attributesGroup() {
			return GetRuleContexts<AttributesGroupContext>();
		}
		public AttributesGroupContext attributesGroup(int i) {
			return GetRuleContext<AttributesGroupContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 46, RULE_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OpenSquareBracket) {
				{
				{
				State = 524; attributesGroup();
				}
				}
				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesGroupContext : ParserRuleContext {
		public ITerminalNode OpenSquareBracket() { return GetToken(PhpParser.OpenSquareBracket, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode CloseSquareBracket() { return GetToken(PhpParser.CloseSquareBracket, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(PhpParser.Colon, 0); }
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public AttributesGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributesGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterAttributesGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitAttributesGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributesGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesGroupContext attributesGroup() {
		AttributesGroupContext _localctx = new AttributesGroupContext(Context, State);
		EnterRule(_localctx, 48, RULE_attributesGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530; Match(OpenSquareBracket);
			State = 534;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 531; identifier();
				State = 532; Match(Colon);
				}
				break;
			}
			State = 536; attribute();
			State = 541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 537; Match(Comma);
				State = 538; attribute();
				}
				}
				State = 543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 544; Match(CloseSquareBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public QualifiedNamespaceNameContext qualifiedNamespaceName() {
			return GetRuleContext<QualifiedNamespaceNameContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public AttributeArgListContext attributeArgList() {
			return GetRuleContext<AttributeArgListContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public AttributeNamedArgListContext attributeNamedArgList() {
			return GetRuleContext<AttributeNamedArgListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(PhpParser.Comma, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 50, RULE_attribute);
		try {
			State = 564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 546; qualifiedNamespaceName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 547; qualifiedNamespaceName();
				State = 548; Match(OpenRoundBracket);
				State = 549; attributeArgList();
				State = 550; Match(CloseRoundBracket);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 552; qualifiedNamespaceName();
				State = 553; Match(OpenRoundBracket);
				State = 554; attributeNamedArgList();
				State = 555; Match(CloseRoundBracket);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 557; qualifiedNamespaceName();
				State = 558; Match(OpenRoundBracket);
				State = 559; attributeArgList();
				State = 560; Match(Comma);
				State = 561; attributeNamedArgList();
				State = 562; Match(CloseRoundBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeArgListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public AttributeArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterAttributeArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitAttributeArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeArgListContext attributeArgList() {
		AttributeArgListContext _localctx = new AttributeArgListContext(Context, State);
		EnterRule(_localctx, 52, RULE_attributeArgList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 566; expression(0);
			State = 571;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 567; Match(Comma);
					State = 568; expression(0);
					}
					} 
				}
				State = 573;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNamedArgListContext : ParserRuleContext {
		public AttributeNamedArgContext[] attributeNamedArg() {
			return GetRuleContexts<AttributeNamedArgContext>();
		}
		public AttributeNamedArgContext attributeNamedArg(int i) {
			return GetRuleContext<AttributeNamedArgContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public AttributeNamedArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeNamedArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterAttributeNamedArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitAttributeNamedArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeNamedArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNamedArgListContext attributeNamedArgList() {
		AttributeNamedArgListContext _localctx = new AttributeNamedArgListContext(Context, State);
		EnterRule(_localctx, 54, RULE_attributeNamedArgList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574; attributeNamedArg();
			State = 579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 575; Match(Comma);
				State = 576; attributeNamedArg();
				}
				}
				State = 581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNamedArgContext : ParserRuleContext {
		public ITerminalNode VarName() { return GetToken(PhpParser.VarName, 0); }
		public ITerminalNode DoubleArrow() { return GetToken(PhpParser.DoubleArrow, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AttributeNamedArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeNamedArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterAttributeNamedArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitAttributeNamedArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeNamedArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNamedArgContext attributeNamedArg() {
		AttributeNamedArgContext _localctx = new AttributeNamedArgContext(Context, State);
		EnterRule(_localctx, 56, RULE_attributeNamedArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582; Match(VarName);
			State = 583; Match(DoubleArrow);
			State = 584; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerStatementListContext : ParserRuleContext {
		public InnerStatementContext[] innerStatement() {
			return GetRuleContexts<InnerStatementContext>();
		}
		public InnerStatementContext innerStatement(int i) {
			return GetRuleContext<InnerStatementContext>(i);
		}
		public InnerStatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerStatementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterInnerStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitInnerStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerStatementListContext innerStatementList() {
		InnerStatementListContext _localctx = new InnerStatementListContext(Context, State);
		EnterRule(_localctx, 58, RULE_innerStatementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 586; innerStatement();
					}
					} 
				}
				State = 591;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InnerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterInnerStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitInnerStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerStatementContext innerStatement() {
		InnerStatementContext _localctx = new InnerStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_innerStatement);
		try {
			State = 595;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 593; functionDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 594; classDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(PhpParser.Colon, 0); }
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public YieldExpressionContext yieldExpression() {
			return GetRuleContext<YieldExpressionContext>(0);
		}
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public GlobalStatementContext globalStatement() {
			return GetRuleContext<GlobalStatementContext>(0);
		}
		public StaticVariableStatementContext staticVariableStatement() {
			return GetRuleContext<StaticVariableStatementContext>(0);
		}
		public EchoStatementContext echoStatement() {
			return GetRuleContext<EchoStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public UnsetStatementContext unsetStatement() {
			return GetRuleContext<UnsetStatementContext>(0);
		}
		public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		public TryCatchFinallyContext tryCatchFinally() {
			return GetRuleContext<TryCatchFinallyContext>(0);
		}
		public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		public DeclareStatementContext declareStatement() {
			return GetRuleContext<DeclareStatementContext>(0);
		}
		public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		public InlineHtmlStatementContext inlineHtmlStatement() {
			return GetRuleContext<InlineHtmlStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_statement);
		try {
			State = 624;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 597; identifier();
				State = 598; Match(Colon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 600; blockStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 601; ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 602; whileStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 603; doWhileStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 604; forStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 605; switchStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 606; breakStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 607; continueStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 608; returnStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 609; yieldExpression();
				State = 610; Match(SemiColon);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 612; globalStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 613; staticVariableStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 614; echoStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 615; expressionStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 616; unsetStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 617; foreachStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 618; tryCatchFinally();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 619; throwStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 620; gotoStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 621; declareStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 622; emptyStatement();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 623; inlineHtmlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public ITerminalNode OpenCurlyBracket() { return GetToken(PhpParser.OpenCurlyBracket, 0); }
		public InnerStatementListContext innerStatementList() {
			return GetRuleContext<InnerStatementListContext>(0);
		}
		public ITerminalNode CloseCurlyBracket() { return GetToken(PhpParser.CloseCurlyBracket, 0); }
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_blockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628; Match(OpenCurlyBracket);
			State = 629; innerStatementList();
			State = 630; Match(CloseCurlyBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(PhpParser.If, 0); }
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseIfStatementContext[] elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(PhpParser.Colon, 0); }
		public InnerStatementListContext innerStatementList() {
			return GetRuleContext<InnerStatementListContext>(0);
		}
		public ITerminalNode EndIf() { return GetToken(PhpParser.EndIf, 0); }
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public ElseIfColonStatementContext[] elseIfColonStatement() {
			return GetRuleContexts<ElseIfColonStatementContext>();
		}
		public ElseIfColonStatementContext elseIfColonStatement(int i) {
			return GetRuleContext<ElseIfColonStatementContext>(i);
		}
		public ElseColonStatementContext elseColonStatement() {
			return GetRuleContext<ElseColonStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			State = 660;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 632; Match(If);
				State = 633; parentheses();
				State = 634; statement();
				State = 638;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 635; elseIfStatement();
						}
						} 
					}
					State = 640;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
				}
				State = 642;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 641; elseStatement();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 644; Match(If);
				State = 645; parentheses();
				State = 646; Match(Colon);
				State = 647; innerStatementList();
				State = 651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ElseIf) {
					{
					{
					State = 648; elseIfColonStatement();
					}
					}
					State = 653;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Else) {
					{
					State = 654; elseColonStatement();
					}
				}

				State = 657; Match(EndIf);
				State = 658; Match(SemiColon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		public ITerminalNode ElseIf() { return GetToken(PhpParser.ElseIf, 0); }
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662; Match(ElseIf);
			State = 663; parentheses();
			State = 664; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfColonStatementContext : ParserRuleContext {
		public ITerminalNode ElseIf() { return GetToken(PhpParser.ElseIf, 0); }
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(PhpParser.Colon, 0); }
		public InnerStatementListContext innerStatementList() {
			return GetRuleContext<InnerStatementListContext>(0);
		}
		public ElseIfColonStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfColonStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterElseIfColonStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitElseIfColonStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfColonStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfColonStatementContext elseIfColonStatement() {
		ElseIfColonStatementContext _localctx = new ElseIfColonStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_elseIfColonStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666; Match(ElseIf);
			State = 667; parentheses();
			State = 668; Match(Colon);
			State = 669; innerStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public ITerminalNode Else() { return GetToken(PhpParser.Else, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671; Match(Else);
			State = 672; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseColonStatementContext : ParserRuleContext {
		public ITerminalNode Else() { return GetToken(PhpParser.Else, 0); }
		public ITerminalNode Colon() { return GetToken(PhpParser.Colon, 0); }
		public InnerStatementListContext innerStatementList() {
			return GetRuleContext<InnerStatementListContext>(0);
		}
		public ElseColonStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseColonStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterElseColonStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitElseColonStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseColonStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseColonStatementContext elseColonStatement() {
		ElseColonStatementContext _localctx = new ElseColonStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_elseColonStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674; Match(Else);
			State = 675; Match(Colon);
			State = 676; innerStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode While() { return GetToken(PhpParser.While, 0); }
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(PhpParser.Colon, 0); }
		public InnerStatementListContext innerStatementList() {
			return GetRuleContext<InnerStatementListContext>(0);
		}
		public ITerminalNode EndWhile() { return GetToken(PhpParser.EndWhile, 0); }
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678; Match(While);
			State = 679; parentheses();
			State = 686;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HtmlText:
			case XmlStart:
			case HtmlScriptOpen:
			case HtmlStyleOpen:
			case HtmlDtd:
			case HtmlOpen:
			case HtmlClose:
			case HtmlSlashClose:
			case HtmlSlash:
			case HtmlEquals:
			case HtmlStartQuoteString:
			case HtmlStartDoubleQuoteString:
			case HtmlHex:
			case HtmlDecimal:
			case HtmlName:
			case HtmlEndQuoteString:
			case HtmlQuoteString:
			case HtmlEndDoubleQuoteString:
			case HtmlDoubleQuoteString:
			case ScriptText:
			case ScriptClose:
			case StyleBody:
			case Abstract:
			case Array:
			case As:
			case BinaryCast:
			case BoolType:
			case BooleanConstant:
			case Break:
			case Callable:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Declare:
			case Default:
			case Do:
			case DoubleCast:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case EndDeclare:
			case EndFor:
			case EndForeach:
			case EndIf:
			case EndSwitch:
			case EndWhile:
			case Eval:
			case Exit:
			case Extends:
			case Final:
			case Finally:
			case FloatCast:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Import:
			case Include:
			case IncludeOnce:
			case InstanceOf:
			case InsteadOf:
			case Int8Cast:
			case Int16Cast:
			case Int64Type:
			case IntType:
			case Interface:
			case IsSet:
			case List:
			case LogicalAnd:
			case LogicalOr:
			case LogicalXor:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Parent_:
			case Partial:
			case Print:
			case Private:
			case Protected:
			case Public:
			case Require:
			case RequireOnce:
			case Resource:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Trait:
			case Try:
			case Typeof:
			case UintCast:
			case UnicodeCast:
			case Unset:
			case Use:
			case Var:
			case While:
			case Yield:
			case From:
			case LambdaFn:
			case Get:
			case Set:
			case Call:
			case CallStatic:
			case Constructor:
			case Destruct:
			case Wakeup:
			case Sleep:
			case Autoload:
			case IsSet__:
			case Unset__:
			case ToString__:
			case Invoke:
			case SetState:
			case Clone__:
			case DebugInfo:
			case Namespace__:
			case Class__:
			case Traic__:
			case Function__:
			case Method__:
			case Line__:
			case File__:
			case Dir__:
			case Inc:
			case Dec:
			case NamespaceSeparator:
			case Bang:
			case Plus:
			case Minus:
			case Tilde:
			case SuppressWarnings:
			case Dollar:
			case OpenRoundBracket:
			case OpenSquareBracket:
			case OpenCurlyBracket:
			case SemiColon:
			case VarName:
			case Label:
			case Octal:
			case Decimal:
			case Real:
			case Hex:
			case Binary:
			case BackQuoteString:
			case SingleQuoteString:
			case DoubleQuote:
			case StartNowDoc:
			case StartHereDoc:
				{
				State = 680; statement();
				}
				break;
			case Colon:
				{
				State = 681; Match(Colon);
				State = 682; innerStatementList();
				State = 683; Match(EndWhile);
				State = 684; Match(SemiColon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		public ITerminalNode Do() { return GetToken(PhpParser.Do, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode While() { return GetToken(PhpParser.While, 0); }
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688; Match(Do);
			State = 689; statement();
			State = 690; Match(While);
			State = 691; parentheses();
			State = 692; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode For() { return GetToken(PhpParser.For, 0); }
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public ITerminalNode[] SemiColon() { return GetTokens(PhpParser.SemiColon); }
		public ITerminalNode SemiColon(int i) {
			return GetToken(PhpParser.SemiColon, i);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(PhpParser.Colon, 0); }
		public InnerStatementListContext innerStatementList() {
			return GetRuleContext<InnerStatementListContext>(0);
		}
		public ITerminalNode EndFor() { return GetToken(PhpParser.EndFor, 0); }
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694; Match(For);
			State = 695; Match(OpenRoundBracket);
			State = 697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (LambdaFn - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)) | (1L << (Inc - 107)) | (1L << (Dec - 107)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (NamespaceSeparator - 187)) | (1L << (Bang - 187)) | (1L << (Plus - 187)) | (1L << (Minus - 187)) | (1L << (Tilde - 187)) | (1L << (SuppressWarnings - 187)) | (1L << (Dollar - 187)) | (1L << (OpenRoundBracket - 187)) | (1L << (OpenSquareBracket - 187)) | (1L << (VarName - 187)) | (1L << (Label - 187)) | (1L << (Octal - 187)) | (1L << (Decimal - 187)) | (1L << (Real - 187)) | (1L << (Hex - 187)) | (1L << (Binary - 187)) | (1L << (BackQuoteString - 187)) | (1L << (SingleQuoteString - 187)) | (1L << (DoubleQuote - 187)) | (1L << (StartNowDoc - 187)) | (1L << (StartHereDoc - 187)))) != 0)) {
				{
				State = 696; forInit();
				}
			}

			State = 699; Match(SemiColon);
			State = 701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (LambdaFn - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)) | (1L << (Inc - 107)) | (1L << (Dec - 107)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (NamespaceSeparator - 187)) | (1L << (Bang - 187)) | (1L << (Plus - 187)) | (1L << (Minus - 187)) | (1L << (Tilde - 187)) | (1L << (SuppressWarnings - 187)) | (1L << (Dollar - 187)) | (1L << (OpenRoundBracket - 187)) | (1L << (OpenSquareBracket - 187)) | (1L << (VarName - 187)) | (1L << (Label - 187)) | (1L << (Octal - 187)) | (1L << (Decimal - 187)) | (1L << (Real - 187)) | (1L << (Hex - 187)) | (1L << (Binary - 187)) | (1L << (BackQuoteString - 187)) | (1L << (SingleQuoteString - 187)) | (1L << (DoubleQuote - 187)) | (1L << (StartNowDoc - 187)) | (1L << (StartHereDoc - 187)))) != 0)) {
				{
				State = 700; expressionList();
				}
			}

			State = 703; Match(SemiColon);
			State = 705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (LambdaFn - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)) | (1L << (Inc - 107)) | (1L << (Dec - 107)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (NamespaceSeparator - 187)) | (1L << (Bang - 187)) | (1L << (Plus - 187)) | (1L << (Minus - 187)) | (1L << (Tilde - 187)) | (1L << (SuppressWarnings - 187)) | (1L << (Dollar - 187)) | (1L << (OpenRoundBracket - 187)) | (1L << (OpenSquareBracket - 187)) | (1L << (VarName - 187)) | (1L << (Label - 187)) | (1L << (Octal - 187)) | (1L << (Decimal - 187)) | (1L << (Real - 187)) | (1L << (Hex - 187)) | (1L << (Binary - 187)) | (1L << (BackQuoteString - 187)) | (1L << (SingleQuoteString - 187)) | (1L << (DoubleQuote - 187)) | (1L << (StartNowDoc - 187)) | (1L << (StartHereDoc - 187)))) != 0)) {
				{
				State = 704; forUpdate();
				}
			}

			State = 707; Match(CloseRoundBracket);
			State = 714;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HtmlText:
			case XmlStart:
			case HtmlScriptOpen:
			case HtmlStyleOpen:
			case HtmlDtd:
			case HtmlOpen:
			case HtmlClose:
			case HtmlSlashClose:
			case HtmlSlash:
			case HtmlEquals:
			case HtmlStartQuoteString:
			case HtmlStartDoubleQuoteString:
			case HtmlHex:
			case HtmlDecimal:
			case HtmlName:
			case HtmlEndQuoteString:
			case HtmlQuoteString:
			case HtmlEndDoubleQuoteString:
			case HtmlDoubleQuoteString:
			case ScriptText:
			case ScriptClose:
			case StyleBody:
			case Abstract:
			case Array:
			case As:
			case BinaryCast:
			case BoolType:
			case BooleanConstant:
			case Break:
			case Callable:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Declare:
			case Default:
			case Do:
			case DoubleCast:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case EndDeclare:
			case EndFor:
			case EndForeach:
			case EndIf:
			case EndSwitch:
			case EndWhile:
			case Eval:
			case Exit:
			case Extends:
			case Final:
			case Finally:
			case FloatCast:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Import:
			case Include:
			case IncludeOnce:
			case InstanceOf:
			case InsteadOf:
			case Int8Cast:
			case Int16Cast:
			case Int64Type:
			case IntType:
			case Interface:
			case IsSet:
			case List:
			case LogicalAnd:
			case LogicalOr:
			case LogicalXor:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Parent_:
			case Partial:
			case Print:
			case Private:
			case Protected:
			case Public:
			case Require:
			case RequireOnce:
			case Resource:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Trait:
			case Try:
			case Typeof:
			case UintCast:
			case UnicodeCast:
			case Unset:
			case Use:
			case Var:
			case While:
			case Yield:
			case From:
			case LambdaFn:
			case Get:
			case Set:
			case Call:
			case CallStatic:
			case Constructor:
			case Destruct:
			case Wakeup:
			case Sleep:
			case Autoload:
			case IsSet__:
			case Unset__:
			case ToString__:
			case Invoke:
			case SetState:
			case Clone__:
			case DebugInfo:
			case Namespace__:
			case Class__:
			case Traic__:
			case Function__:
			case Method__:
			case Line__:
			case File__:
			case Dir__:
			case Inc:
			case Dec:
			case NamespaceSeparator:
			case Bang:
			case Plus:
			case Minus:
			case Tilde:
			case SuppressWarnings:
			case Dollar:
			case OpenRoundBracket:
			case OpenSquareBracket:
			case OpenCurlyBracket:
			case SemiColon:
			case VarName:
			case Label:
			case Octal:
			case Decimal:
			case Real:
			case Hex:
			case Binary:
			case BackQuoteString:
			case SingleQuoteString:
			case DoubleQuote:
			case StartNowDoc:
			case StartHereDoc:
				{
				State = 708; statement();
				}
				break;
			case Colon:
				{
				State = 709; Match(Colon);
				State = 710; innerStatementList();
				State = 711; Match(EndFor);
				State = 712; Match(SemiColon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 84, RULE_forInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716; expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForUpdateContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forUpdate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterForUpdate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitForUpdate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForUpdateContext forUpdate() {
		ForUpdateContext _localctx = new ForUpdateContext(Context, State);
		EnterRule(_localctx, 86, RULE_forUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718; expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ITerminalNode Switch() { return GetToken(PhpParser.Switch, 0); }
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public ITerminalNode OpenCurlyBracket() { return GetToken(PhpParser.OpenCurlyBracket, 0); }
		public ITerminalNode CloseCurlyBracket() { return GetToken(PhpParser.CloseCurlyBracket, 0); }
		public ITerminalNode Colon() { return GetToken(PhpParser.Colon, 0); }
		public ITerminalNode EndSwitch() { return GetToken(PhpParser.EndSwitch, 0); }
		public ITerminalNode[] SemiColon() { return GetTokens(PhpParser.SemiColon); }
		public ITerminalNode SemiColon(int i) {
			return GetToken(PhpParser.SemiColon, i);
		}
		public SwitchBlockContext[] switchBlock() {
			return GetRuleContexts<SwitchBlockContext>();
		}
		public SwitchBlockContext switchBlock(int i) {
			return GetRuleContext<SwitchBlockContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720; Match(Switch);
			State = 721; parentheses();
			State = 745;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenCurlyBracket:
				{
				State = 722; Match(OpenCurlyBracket);
				State = 724;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SemiColon) {
					{
					State = 723; Match(SemiColon);
					}
				}

				State = 729;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Case || _la==Default) {
					{
					{
					State = 726; switchBlock();
					}
					}
					State = 731;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 732; Match(CloseCurlyBracket);
				}
				break;
			case Colon:
				{
				State = 733; Match(Colon);
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SemiColon) {
					{
					State = 734; Match(SemiColon);
					}
				}

				State = 740;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Case || _la==Default) {
					{
					{
					State = 737; switchBlock();
					}
					}
					State = 742;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 743; Match(EndSwitch);
				State = 744; Match(SemiColon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		public InnerStatementListContext innerStatementList() {
			return GetRuleContext<InnerStatementListContext>(0);
		}
		public ITerminalNode[] Colon() { return GetTokens(PhpParser.Colon); }
		public ITerminalNode Colon(int i) {
			return GetToken(PhpParser.Colon, i);
		}
		public ITerminalNode[] SemiColon() { return GetTokens(PhpParser.SemiColon); }
		public ITerminalNode SemiColon(int i) {
			return GetToken(PhpParser.SemiColon, i);
		}
		public ITerminalNode[] Case() { return GetTokens(PhpParser.Case); }
		public ITerminalNode Case(int i) {
			return GetToken(PhpParser.Case, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Default() { return GetTokens(PhpParser.Default); }
		public ITerminalNode Default(int i) {
			return GetToken(PhpParser.Default, i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 90, RULE_switchBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 750;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Case:
						{
						State = 747; Match(Case);
						State = 748; expression(0);
						}
						break;
					case Default:
						{
						State = 749; Match(Default);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 752;
					_la = TokenStream.LA(1);
					if ( !(_la==Colon || _la==SemiColon) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 755;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 757; innerStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(PhpParser.Break, 0); }
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_breakStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759; Match(Break);
			State = 761;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (LambdaFn - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)) | (1L << (Inc - 107)) | (1L << (Dec - 107)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (NamespaceSeparator - 187)) | (1L << (Bang - 187)) | (1L << (Plus - 187)) | (1L << (Minus - 187)) | (1L << (Tilde - 187)) | (1L << (SuppressWarnings - 187)) | (1L << (Dollar - 187)) | (1L << (OpenRoundBracket - 187)) | (1L << (OpenSquareBracket - 187)) | (1L << (VarName - 187)) | (1L << (Label - 187)) | (1L << (Octal - 187)) | (1L << (Decimal - 187)) | (1L << (Real - 187)) | (1L << (Hex - 187)) | (1L << (Binary - 187)) | (1L << (BackQuoteString - 187)) | (1L << (SingleQuoteString - 187)) | (1L << (DoubleQuote - 187)) | (1L << (StartNowDoc - 187)) | (1L << (StartHereDoc - 187)))) != 0)) {
				{
				State = 760; expression(0);
				}
			}

			State = 763; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode Continue() { return GetToken(PhpParser.Continue, 0); }
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_continueStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765; Match(Continue);
			State = 767;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (LambdaFn - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)) | (1L << (Inc - 107)) | (1L << (Dec - 107)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (NamespaceSeparator - 187)) | (1L << (Bang - 187)) | (1L << (Plus - 187)) | (1L << (Minus - 187)) | (1L << (Tilde - 187)) | (1L << (SuppressWarnings - 187)) | (1L << (Dollar - 187)) | (1L << (OpenRoundBracket - 187)) | (1L << (OpenSquareBracket - 187)) | (1L << (VarName - 187)) | (1L << (Label - 187)) | (1L << (Octal - 187)) | (1L << (Decimal - 187)) | (1L << (Real - 187)) | (1L << (Hex - 187)) | (1L << (Binary - 187)) | (1L << (BackQuoteString - 187)) | (1L << (SingleQuoteString - 187)) | (1L << (DoubleQuote - 187)) | (1L << (StartNowDoc - 187)) | (1L << (StartHereDoc - 187)))) != 0)) {
				{
				State = 766; expression(0);
				}
			}

			State = 769; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(PhpParser.Return, 0); }
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771; Match(Return);
			State = 773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (LambdaFn - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)) | (1L << (Inc - 107)) | (1L << (Dec - 107)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (NamespaceSeparator - 187)) | (1L << (Bang - 187)) | (1L << (Plus - 187)) | (1L << (Minus - 187)) | (1L << (Tilde - 187)) | (1L << (SuppressWarnings - 187)) | (1L << (Dollar - 187)) | (1L << (OpenRoundBracket - 187)) | (1L << (OpenSquareBracket - 187)) | (1L << (VarName - 187)) | (1L << (Label - 187)) | (1L << (Octal - 187)) | (1L << (Decimal - 187)) | (1L << (Real - 187)) | (1L << (Hex - 187)) | (1L << (Binary - 187)) | (1L << (BackQuoteString - 187)) | (1L << (SingleQuoteString - 187)) | (1L << (DoubleQuote - 187)) | (1L << (StartNowDoc - 187)) | (1L << (StartHereDoc - 187)))) != 0)) {
				{
				State = 772; expression(0);
				}
			}

			State = 775; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 777; expression(0);
			State = 778; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsetStatementContext : ParserRuleContext {
		public ITerminalNode Unset() { return GetToken(PhpParser.Unset, 0); }
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public ChainListContext chainList() {
			return GetRuleContext<ChainListContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public UnsetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsetStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterUnsetStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitUnsetStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsetStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsetStatementContext unsetStatement() {
		UnsetStatementContext _localctx = new UnsetStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_unsetStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780; Match(Unset);
			State = 781; Match(OpenRoundBracket);
			State = 782; chainList();
			State = 783; Match(CloseRoundBracket);
			State = 784; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		public ITerminalNode Foreach() { return GetToken(PhpParser.Foreach, 0); }
		public ITerminalNode[] OpenRoundBracket() { return GetTokens(PhpParser.OpenRoundBracket); }
		public ITerminalNode OpenRoundBracket(int i) {
			return GetToken(PhpParser.OpenRoundBracket, i);
		}
		public ChainContext[] chain() {
			return GetRuleContexts<ChainContext>();
		}
		public ChainContext chain(int i) {
			return GetRuleContext<ChainContext>(i);
		}
		public ITerminalNode As() { return GetToken(PhpParser.As, 0); }
		public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		public ITerminalNode[] CloseRoundBracket() { return GetTokens(PhpParser.CloseRoundBracket); }
		public ITerminalNode CloseRoundBracket(int i) {
			return GetToken(PhpParser.CloseRoundBracket, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode List() { return GetToken(PhpParser.List, 0); }
		public AssignmentListContext assignmentList() {
			return GetRuleContext<AssignmentListContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(PhpParser.Colon, 0); }
		public InnerStatementListContext innerStatementList() {
			return GetRuleContext<InnerStatementListContext>(0);
		}
		public ITerminalNode EndForeach() { return GetToken(PhpParser.EndForeach, 0); }
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public ITerminalNode[] Ampersand() { return GetTokens(PhpParser.Ampersand); }
		public ITerminalNode Ampersand(int i) {
			return GetToken(PhpParser.Ampersand, i);
		}
		public ITerminalNode DoubleArrow() { return GetToken(PhpParser.DoubleArrow, 0); }
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_foreachStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786; Match(Foreach);
			State = 825;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 787; Match(OpenRoundBracket);
				State = 788; chain();
				State = 789; Match(As);
				State = 791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ampersand) {
					{
					State = 790; Match(Ampersand);
					}
				}

				State = 793; assignable();
				State = 799;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DoubleArrow) {
					{
					State = 794; Match(DoubleArrow);
					State = 796;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Ampersand) {
						{
						State = 795; Match(Ampersand);
						}
					}

					State = 798; chain();
					}
				}

				State = 801; Match(CloseRoundBracket);
				}
				break;
			case 2:
				{
				State = 803; Match(OpenRoundBracket);
				State = 804; expression(0);
				State = 805; Match(As);
				State = 806; assignable();
				State = 812;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DoubleArrow) {
					{
					State = 807; Match(DoubleArrow);
					State = 809;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Ampersand) {
						{
						State = 808; Match(Ampersand);
						}
					}

					State = 811; chain();
					}
				}

				State = 814; Match(CloseRoundBracket);
				}
				break;
			case 3:
				{
				State = 816; Match(OpenRoundBracket);
				State = 817; chain();
				State = 818; Match(As);
				State = 819; Match(List);
				State = 820; Match(OpenRoundBracket);
				State = 821; assignmentList();
				State = 822; Match(CloseRoundBracket);
				State = 823; Match(CloseRoundBracket);
				}
				break;
			}
			State = 833;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HtmlText:
			case XmlStart:
			case HtmlScriptOpen:
			case HtmlStyleOpen:
			case HtmlDtd:
			case HtmlOpen:
			case HtmlClose:
			case HtmlSlashClose:
			case HtmlSlash:
			case HtmlEquals:
			case HtmlStartQuoteString:
			case HtmlStartDoubleQuoteString:
			case HtmlHex:
			case HtmlDecimal:
			case HtmlName:
			case HtmlEndQuoteString:
			case HtmlQuoteString:
			case HtmlEndDoubleQuoteString:
			case HtmlDoubleQuoteString:
			case ScriptText:
			case ScriptClose:
			case StyleBody:
			case Abstract:
			case Array:
			case As:
			case BinaryCast:
			case BoolType:
			case BooleanConstant:
			case Break:
			case Callable:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Declare:
			case Default:
			case Do:
			case DoubleCast:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case EndDeclare:
			case EndFor:
			case EndForeach:
			case EndIf:
			case EndSwitch:
			case EndWhile:
			case Eval:
			case Exit:
			case Extends:
			case Final:
			case Finally:
			case FloatCast:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Import:
			case Include:
			case IncludeOnce:
			case InstanceOf:
			case InsteadOf:
			case Int8Cast:
			case Int16Cast:
			case Int64Type:
			case IntType:
			case Interface:
			case IsSet:
			case List:
			case LogicalAnd:
			case LogicalOr:
			case LogicalXor:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Parent_:
			case Partial:
			case Print:
			case Private:
			case Protected:
			case Public:
			case Require:
			case RequireOnce:
			case Resource:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Trait:
			case Try:
			case Typeof:
			case UintCast:
			case UnicodeCast:
			case Unset:
			case Use:
			case Var:
			case While:
			case Yield:
			case From:
			case LambdaFn:
			case Get:
			case Set:
			case Call:
			case CallStatic:
			case Constructor:
			case Destruct:
			case Wakeup:
			case Sleep:
			case Autoload:
			case IsSet__:
			case Unset__:
			case ToString__:
			case Invoke:
			case SetState:
			case Clone__:
			case DebugInfo:
			case Namespace__:
			case Class__:
			case Traic__:
			case Function__:
			case Method__:
			case Line__:
			case File__:
			case Dir__:
			case Inc:
			case Dec:
			case NamespaceSeparator:
			case Bang:
			case Plus:
			case Minus:
			case Tilde:
			case SuppressWarnings:
			case Dollar:
			case OpenRoundBracket:
			case OpenSquareBracket:
			case OpenCurlyBracket:
			case SemiColon:
			case VarName:
			case Label:
			case Octal:
			case Decimal:
			case Real:
			case Hex:
			case Binary:
			case BackQuoteString:
			case SingleQuoteString:
			case DoubleQuote:
			case StartNowDoc:
			case StartHereDoc:
				{
				State = 827; statement();
				}
				break;
			case Colon:
				{
				State = 828; Match(Colon);
				State = 829; innerStatementList();
				State = 830; Match(EndForeach);
				State = 831; Match(SemiColon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryCatchFinallyContext : ParserRuleContext {
		public ITerminalNode Try() { return GetToken(PhpParser.Try, 0); }
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public FinallyStatementContext finallyStatement() {
			return GetRuleContext<FinallyStatementContext>(0);
		}
		public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		public TryCatchFinallyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryCatchFinally; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterTryCatchFinally(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitTryCatchFinally(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryCatchFinally(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryCatchFinallyContext tryCatchFinally() {
		TryCatchFinallyContext _localctx = new TryCatchFinallyContext(Context, State);
		EnterRule(_localctx, 104, RULE_tryCatchFinally);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 835; Match(Try);
			State = 836; blockStatement();
			State = 852;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 838;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 837; catchClause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 840;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 843;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 842; finallyStatement();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Catch) {
					{
					{
					State = 845; catchClause();
					}
					}
					State = 850;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 851; finallyStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		public ITerminalNode Catch() { return GetToken(PhpParser.Catch, 0); }
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public QualifiedStaticTypeRefContext[] qualifiedStaticTypeRef() {
			return GetRuleContexts<QualifiedStaticTypeRefContext>();
		}
		public QualifiedStaticTypeRefContext qualifiedStaticTypeRef(int i) {
			return GetRuleContext<QualifiedStaticTypeRefContext>(i);
		}
		public ITerminalNode VarName() { return GetToken(PhpParser.VarName, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public ITerminalNode[] Pipe() { return GetTokens(PhpParser.Pipe); }
		public ITerminalNode Pipe(int i) {
			return GetToken(PhpParser.Pipe, i);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterCatchClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitCatchClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(Context, State);
		EnterRule(_localctx, 106, RULE_catchClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854; Match(Catch);
			State = 855; Match(OpenRoundBracket);
			State = 856; qualifiedStaticTypeRef();
			State = 861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Pipe) {
				{
				{
				State = 857; Match(Pipe);
				State = 858; qualifiedStaticTypeRef();
				}
				}
				State = 863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 864; Match(VarName);
			State = 865; Match(CloseRoundBracket);
			State = 866; blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyStatementContext : ParserRuleContext {
		public ITerminalNode Finally() { return GetToken(PhpParser.Finally, 0); }
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public FinallyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterFinallyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitFinallyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyStatementContext finallyStatement() {
		FinallyStatementContext _localctx = new FinallyStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_finallyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 868; Match(Finally);
			State = 869; blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ITerminalNode Throw() { return GetToken(PhpParser.Throw, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 871; Match(Throw);
			State = 872; expression(0);
			State = 873; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		public ITerminalNode Goto() { return GetToken(PhpParser.Goto, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 875; Match(Goto);
			State = 876; identifier();
			State = 877; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStatementContext : ParserRuleContext {
		public ITerminalNode Declare() { return GetToken(PhpParser.Declare, 0); }
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public DeclareListContext declareList() {
			return GetRuleContext<DeclareListContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(PhpParser.Colon, 0); }
		public InnerStatementListContext innerStatementList() {
			return GetRuleContext<InnerStatementListContext>(0);
		}
		public ITerminalNode EndDeclare() { return GetToken(PhpParser.EndDeclare, 0); }
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public DeclareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterDeclareStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitDeclareStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStatementContext declareStatement() {
		DeclareStatementContext _localctx = new DeclareStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_declareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 879; Match(Declare);
			State = 880; Match(OpenRoundBracket);
			State = 881; declareList();
			State = 882; Match(CloseRoundBracket);
			State = 889;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HtmlText:
			case XmlStart:
			case HtmlScriptOpen:
			case HtmlStyleOpen:
			case HtmlDtd:
			case HtmlOpen:
			case HtmlClose:
			case HtmlSlashClose:
			case HtmlSlash:
			case HtmlEquals:
			case HtmlStartQuoteString:
			case HtmlStartDoubleQuoteString:
			case HtmlHex:
			case HtmlDecimal:
			case HtmlName:
			case HtmlEndQuoteString:
			case HtmlQuoteString:
			case HtmlEndDoubleQuoteString:
			case HtmlDoubleQuoteString:
			case ScriptText:
			case ScriptClose:
			case StyleBody:
			case Abstract:
			case Array:
			case As:
			case BinaryCast:
			case BoolType:
			case BooleanConstant:
			case Break:
			case Callable:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Declare:
			case Default:
			case Do:
			case DoubleCast:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case EndDeclare:
			case EndFor:
			case EndForeach:
			case EndIf:
			case EndSwitch:
			case EndWhile:
			case Eval:
			case Exit:
			case Extends:
			case Final:
			case Finally:
			case FloatCast:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Import:
			case Include:
			case IncludeOnce:
			case InstanceOf:
			case InsteadOf:
			case Int8Cast:
			case Int16Cast:
			case Int64Type:
			case IntType:
			case Interface:
			case IsSet:
			case List:
			case LogicalAnd:
			case LogicalOr:
			case LogicalXor:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Parent_:
			case Partial:
			case Print:
			case Private:
			case Protected:
			case Public:
			case Require:
			case RequireOnce:
			case Resource:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Trait:
			case Try:
			case Typeof:
			case UintCast:
			case UnicodeCast:
			case Unset:
			case Use:
			case Var:
			case While:
			case Yield:
			case From:
			case LambdaFn:
			case Get:
			case Set:
			case Call:
			case CallStatic:
			case Constructor:
			case Destruct:
			case Wakeup:
			case Sleep:
			case Autoload:
			case IsSet__:
			case Unset__:
			case ToString__:
			case Invoke:
			case SetState:
			case Clone__:
			case DebugInfo:
			case Namespace__:
			case Class__:
			case Traic__:
			case Function__:
			case Method__:
			case Line__:
			case File__:
			case Dir__:
			case Inc:
			case Dec:
			case NamespaceSeparator:
			case Bang:
			case Plus:
			case Minus:
			case Tilde:
			case SuppressWarnings:
			case Dollar:
			case OpenRoundBracket:
			case OpenSquareBracket:
			case OpenCurlyBracket:
			case SemiColon:
			case VarName:
			case Label:
			case Octal:
			case Decimal:
			case Real:
			case Hex:
			case Binary:
			case BackQuoteString:
			case SingleQuoteString:
			case DoubleQuote:
			case StartNowDoc:
			case StartHereDoc:
				{
				State = 883; statement();
				}
				break;
			case Colon:
				{
				State = 884; Match(Colon);
				State = 885; innerStatementList();
				State = 886; Match(EndDeclare);
				State = 887; Match(SemiColon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineHtmlStatementContext : ParserRuleContext {
		public InlineHtmlContext[] inlineHtml() {
			return GetRuleContexts<InlineHtmlContext>();
		}
		public InlineHtmlContext inlineHtml(int i) {
			return GetRuleContext<InlineHtmlContext>(i);
		}
		public InlineHtmlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineHtmlStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterInlineHtmlStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitInlineHtmlStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineHtmlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineHtmlStatementContext inlineHtmlStatement() {
		InlineHtmlStatementContext _localctx = new InlineHtmlStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_inlineHtmlStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 892;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 891; inlineHtml();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 894;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineHtmlContext : ParserRuleContext {
		public HtmlElementsContext htmlElements() {
			return GetRuleContext<HtmlElementsContext>(0);
		}
		public ScriptTextPartContext scriptTextPart() {
			return GetRuleContext<ScriptTextPartContext>(0);
		}
		public InlineHtmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineHtml; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterInlineHtml(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitInlineHtml(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineHtml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineHtmlContext inlineHtml() {
		InlineHtmlContext _localctx = new InlineHtmlContext(Context, State);
		EnterRule(_localctx, 118, RULE_inlineHtml);
		try {
			State = 898;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HtmlText:
			case XmlStart:
			case HtmlScriptOpen:
			case HtmlStyleOpen:
			case HtmlDtd:
			case HtmlOpen:
			case HtmlClose:
			case HtmlSlashClose:
			case HtmlSlash:
			case HtmlEquals:
			case HtmlStartQuoteString:
			case HtmlStartDoubleQuoteString:
			case HtmlHex:
			case HtmlDecimal:
			case HtmlName:
			case HtmlEndQuoteString:
			case HtmlQuoteString:
			case HtmlEndDoubleQuoteString:
			case HtmlDoubleQuoteString:
			case ScriptClose:
			case StyleBody:
				EnterOuterAlt(_localctx, 1);
				{
				State = 896; htmlElements();
				}
				break;
			case ScriptText:
				EnterOuterAlt(_localctx, 2);
				{
				State = 897; scriptTextPart();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareListContext : ParserRuleContext {
		public IdentifierInititalizerContext[] identifierInititalizer() {
			return GetRuleContexts<IdentifierInititalizerContext>();
		}
		public IdentifierInititalizerContext identifierInititalizer(int i) {
			return GetRuleContext<IdentifierInititalizerContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public DeclareListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterDeclareList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitDeclareList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareListContext declareList() {
		DeclareListContext _localctx = new DeclareListContext(Context, State);
		EnterRule(_localctx, 120, RULE_declareList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 900; identifierInititalizer();
			State = 905;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 901; Match(Comma);
				State = 902; identifierInititalizer();
				}
				}
				State = 907;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 122, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 909;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (NamespaceSeparator - 187)) | (1L << (Ellipsis - 187)) | (1L << (Ampersand - 187)) | (1L << (QuestionMark - 187)) | (1L << (OpenSquareBracket - 187)) | (1L << (VarName - 187)) | (1L << (Label - 187)))) != 0)) {
				{
				State = 908; formalParameter();
				}
			}

			State = 915;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 911; Match(Comma);
				State = 912; formalParameter();
				}
				}
				State = 917;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public ITerminalNode QuestionMark() { return GetToken(PhpParser.QuestionMark, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode Ampersand() { return GetToken(PhpParser.Ampersand, 0); }
		public ITerminalNode Ellipsis() { return GetToken(PhpParser.Ellipsis, 0); }
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 124, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918; attributes();
			State = 920;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QuestionMark) {
				{
				State = 919; Match(QuestionMark);
				}
			}

			State = 923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)))) != 0) || _la==NamespaceSeparator || _la==Label) {
				{
				State = 922; typeHint();
				}
			}

			State = 926;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ampersand) {
				{
				State = 925; Match(Ampersand);
				}
			}

			State = 929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 928; Match(Ellipsis);
				}
			}

			State = 931; variableInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public QualifiedStaticTypeRefContext qualifiedStaticTypeRef() {
			return GetRuleContext<QualifiedStaticTypeRefContext>(0);
		}
		public ITerminalNode Callable() { return GetToken(PhpParser.Callable, 0); }
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(Context, State);
		EnterRule(_localctx, 126, RULE_typeHint);
		try {
			State = 936;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 933; qualifiedStaticTypeRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 934; Match(Callable);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 935; primitiveType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalStatementContext : ParserRuleContext {
		public ITerminalNode Global() { return GetToken(PhpParser.Global, 0); }
		public GlobalVarContext[] globalVar() {
			return GetRuleContexts<GlobalVarContext>();
		}
		public GlobalVarContext globalVar(int i) {
			return GetRuleContext<GlobalVarContext>(i);
		}
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public GlobalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterGlobalStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitGlobalStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalStatementContext globalStatement() {
		GlobalStatementContext _localctx = new GlobalStatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_globalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938; Match(Global);
			State = 939; globalVar();
			State = 944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 940; Match(Comma);
				State = 941; globalVar();
				}
				}
				State = 946;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 947; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarContext : ParserRuleContext {
		public ITerminalNode VarName() { return GetToken(PhpParser.VarName, 0); }
		public ITerminalNode Dollar() { return GetToken(PhpParser.Dollar, 0); }
		public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		public ITerminalNode OpenCurlyBracket() { return GetToken(PhpParser.OpenCurlyBracket, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CloseCurlyBracket() { return GetToken(PhpParser.CloseCurlyBracket, 0); }
		public GlobalVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterGlobalVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitGlobalVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarContext globalVar() {
		GlobalVarContext _localctx = new GlobalVarContext(Context, State);
		EnterRule(_localctx, 130, RULE_globalVar);
		try {
			State = 957;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 949; Match(VarName);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 950; Match(Dollar);
				State = 951; chain();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 952; Match(Dollar);
				State = 953; Match(OpenCurlyBracket);
				State = 954; expression(0);
				State = 955; Match(CloseCurlyBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EchoStatementContext : ParserRuleContext {
		public ITerminalNode Echo() { return GetToken(PhpParser.Echo, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public EchoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_echoStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterEchoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitEchoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEchoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EchoStatementContext echoStatement() {
		EchoStatementContext _localctx = new EchoStatementContext(Context, State);
		EnterRule(_localctx, 132, RULE_echoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 959; Match(Echo);
			State = 960; expressionList();
			State = 961; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticVariableStatementContext : ParserRuleContext {
		public ITerminalNode Static() { return GetToken(PhpParser.Static, 0); }
		public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public StaticVariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticVariableStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterStaticVariableStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitStaticVariableStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticVariableStatementContext staticVariableStatement() {
		StaticVariableStatementContext _localctx = new StaticVariableStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_staticVariableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963; Match(Static);
			State = 964; variableInitializer();
			State = 969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 965; Match(Comma);
				State = 966; variableInitializer();
				}
				}
				State = 971;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 972; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassStatementContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public PropertyModifiersContext propertyModifiers() {
			return GetRuleContext<PropertyModifiersContext>(0);
		}
		public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public ITerminalNode Const() { return GetToken(PhpParser.Const, 0); }
		public IdentifierInititalizerContext[] identifierInititalizer() {
			return GetRuleContexts<IdentifierInititalizerContext>();
		}
		public IdentifierInititalizerContext identifierInititalizer(int i) {
			return GetRuleContext<IdentifierInititalizerContext>(i);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public ITerminalNode Function() { return GetToken(PhpParser.Function, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ITerminalNode Ampersand() { return GetToken(PhpParser.Ampersand, 0); }
		public TypeParameterListInBracketsContext typeParameterListInBrackets() {
			return GetRuleContext<TypeParameterListInBracketsContext>(0);
		}
		public BaseCtorCallContext baseCtorCall() {
			return GetRuleContext<BaseCtorCallContext>(0);
		}
		public ITerminalNode Use() { return GetToken(PhpParser.Use, 0); }
		public QualifiedNamespaceNameListContext qualifiedNamespaceNameList() {
			return GetRuleContext<QualifiedNamespaceNameListContext>(0);
		}
		public TraitAdaptationsContext traitAdaptations() {
			return GetRuleContext<TraitAdaptationsContext>(0);
		}
		public ClassStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterClassStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitClassStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassStatementContext classStatement() {
		ClassStatementContext _localctx = new ClassStatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_classStatement);
		int _la;
		try {
			State = 1031;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 974; attributes();
				State = 975; propertyModifiers();
				State = 977;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)))) != 0) || _la==NamespaceSeparator || _la==Label) {
					{
					State = 976; typeHint();
					}
				}

				State = 979; variableInitializer();
				State = 984;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 980; Match(Comma);
					State = 981; variableInitializer();
					}
					}
					State = 986;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 987; Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 989; attributes();
				State = 991;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Abstract || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Final - 75)) | (1L << (Private - 75)) | (1L << (Protected - 75)) | (1L << (Public - 75)) | (1L << (Static - 75)))) != 0)) {
					{
					State = 990; memberModifiers();
					}
				}

				State = 993; Match(Const);
				State = 995;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
				case 1:
					{
					State = 994; typeHint();
					}
					break;
				}
				State = 997; identifierInititalizer();
				State = 1002;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 998; Match(Comma);
					State = 999; identifierInititalizer();
					}
					}
					State = 1004;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1005; Match(SemiColon);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1007; attributes();
				State = 1009;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Abstract || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Final - 75)) | (1L << (Private - 75)) | (1L << (Protected - 75)) | (1L << (Public - 75)) | (1L << (Static - 75)))) != 0)) {
					{
					State = 1008; memberModifiers();
					}
				}

				State = 1011; Match(Function);
				State = 1013;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ampersand) {
					{
					State = 1012; Match(Ampersand);
					}
				}

				State = 1015; identifier();
				State = 1017;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Lgeneric) {
					{
					State = 1016; typeParameterListInBrackets();
					}
				}

				State = 1019; Match(OpenRoundBracket);
				State = 1020; formalParameterList();
				State = 1021; Match(CloseRoundBracket);
				State = 1023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1022; baseCtorCall();
					}
				}

				State = 1025; methodBody();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1027; Match(Use);
				State = 1028; qualifiedNamespaceNameList();
				State = 1029; traitAdaptations();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitAdaptationsContext : ParserRuleContext {
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public ITerminalNode OpenCurlyBracket() { return GetToken(PhpParser.OpenCurlyBracket, 0); }
		public ITerminalNode CloseCurlyBracket() { return GetToken(PhpParser.CloseCurlyBracket, 0); }
		public TraitAdaptationStatementContext[] traitAdaptationStatement() {
			return GetRuleContexts<TraitAdaptationStatementContext>();
		}
		public TraitAdaptationStatementContext traitAdaptationStatement(int i) {
			return GetRuleContext<TraitAdaptationStatementContext>(i);
		}
		public TraitAdaptationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitAdaptations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterTraitAdaptations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitTraitAdaptations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitAdaptations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitAdaptationsContext traitAdaptations() {
		TraitAdaptationsContext _localctx = new TraitAdaptationsContext(Context, State);
		EnterRule(_localctx, 138, RULE_traitAdaptations);
		int _la;
		try {
			State = 1042;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SemiColon:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1033; Match(SemiColon);
				}
				break;
			case OpenCurlyBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1034; Match(OpenCurlyBracket);
				State = 1038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)))) != 0) || _la==NamespaceSeparator || _la==Label) {
					{
					{
					State = 1035; traitAdaptationStatement();
					}
					}
					State = 1040;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1041; Match(CloseCurlyBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitAdaptationStatementContext : ParserRuleContext {
		public TraitPrecedenceContext traitPrecedence() {
			return GetRuleContext<TraitPrecedenceContext>(0);
		}
		public TraitAliasContext traitAlias() {
			return GetRuleContext<TraitAliasContext>(0);
		}
		public TraitAdaptationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitAdaptationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterTraitAdaptationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitTraitAdaptationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitAdaptationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitAdaptationStatementContext traitAdaptationStatement() {
		TraitAdaptationStatementContext _localctx = new TraitAdaptationStatementContext(Context, State);
		EnterRule(_localctx, 140, RULE_traitAdaptationStatement);
		try {
			State = 1046;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1044; traitPrecedence();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1045; traitAlias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitPrecedenceContext : ParserRuleContext {
		public QualifiedNamespaceNameContext qualifiedNamespaceName() {
			return GetRuleContext<QualifiedNamespaceNameContext>(0);
		}
		public ITerminalNode DoubleColon() { return GetToken(PhpParser.DoubleColon, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode InsteadOf() { return GetToken(PhpParser.InsteadOf, 0); }
		public QualifiedNamespaceNameListContext qualifiedNamespaceNameList() {
			return GetRuleContext<QualifiedNamespaceNameListContext>(0);
		}
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public TraitPrecedenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitPrecedence; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterTraitPrecedence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitTraitPrecedence(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitPrecedence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitPrecedenceContext traitPrecedence() {
		TraitPrecedenceContext _localctx = new TraitPrecedenceContext(Context, State);
		EnterRule(_localctx, 142, RULE_traitPrecedence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1048; qualifiedNamespaceName();
			State = 1049; Match(DoubleColon);
			State = 1050; identifier();
			State = 1051; Match(InsteadOf);
			State = 1052; qualifiedNamespaceNameList();
			State = 1053; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitAliasContext : ParserRuleContext {
		public TraitMethodReferenceContext traitMethodReference() {
			return GetRuleContext<TraitMethodReferenceContext>(0);
		}
		public ITerminalNode As() { return GetToken(PhpParser.As, 0); }
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public MemberModifierContext memberModifier() {
			return GetRuleContext<MemberModifierContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TraitAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitAlias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterTraitAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitTraitAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitAliasContext traitAlias() {
		TraitAliasContext _localctx = new TraitAliasContext(Context, State);
		EnterRule(_localctx, 144, RULE_traitAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1055; traitMethodReference();
			State = 1056; Match(As);
			State = 1062;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				{
				State = 1057; memberModifier();
				}
				break;
			case 2:
				{
				State = 1059;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 1058; memberModifier();
					}
					break;
				}
				State = 1061; identifier();
				}
				break;
			}
			State = 1064; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitMethodReferenceContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public QualifiedNamespaceNameContext qualifiedNamespaceName() {
			return GetRuleContext<QualifiedNamespaceNameContext>(0);
		}
		public ITerminalNode DoubleColon() { return GetToken(PhpParser.DoubleColon, 0); }
		public TraitMethodReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitMethodReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterTraitMethodReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitTraitMethodReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitMethodReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitMethodReferenceContext traitMethodReference() {
		TraitMethodReferenceContext _localctx = new TraitMethodReferenceContext(Context, State);
		EnterRule(_localctx, 146, RULE_traitMethodReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1069;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				State = 1066; qualifiedNamespaceName();
				State = 1067; Match(DoubleColon);
				}
				break;
			}
			State = 1071; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseCtorCallContext : ParserRuleContext {
		public ITerminalNode Colon() { return GetToken(PhpParser.Colon, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public BaseCtorCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseCtorCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterBaseCtorCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitBaseCtorCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseCtorCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseCtorCallContext baseCtorCall() {
		BaseCtorCallContext _localctx = new BaseCtorCallContext(Context, State);
		EnterRule(_localctx, 148, RULE_baseCtorCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1073; Match(Colon);
			State = 1074; identifier();
			State = 1076;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenRoundBracket) {
				{
				State = 1075; arguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 150, RULE_methodBody);
		try {
			State = 1080;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SemiColon:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1078; Match(SemiColon);
				}
				break;
			case OpenCurlyBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1079; blockStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyModifiersContext : ParserRuleContext {
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public ITerminalNode Var() { return GetToken(PhpParser.Var, 0); }
		public PropertyModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterPropertyModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitPropertyModifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyModifiersContext propertyModifiers() {
		PropertyModifiersContext _localctx = new PropertyModifiersContext(Context, State);
		EnterRule(_localctx, 152, RULE_propertyModifiers);
		try {
			State = 1084;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Abstract:
			case Final:
			case Private:
			case Protected:
			case Public:
			case Static:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1082; memberModifiers();
				}
				break;
			case Var:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1083; Match(Var);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberModifiersContext : ParserRuleContext {
		public MemberModifierContext[] memberModifier() {
			return GetRuleContexts<MemberModifierContext>();
		}
		public MemberModifierContext memberModifier(int i) {
			return GetRuleContext<MemberModifierContext>(i);
		}
		public MemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterMemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitMemberModifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberModifiersContext memberModifiers() {
		MemberModifiersContext _localctx = new MemberModifiersContext(Context, State);
		EnterRule(_localctx, 154, RULE_memberModifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1087;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1086; memberModifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1089;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ITerminalNode VarName() { return GetToken(PhpParser.VarName, 0); }
		public ITerminalNode Eq() { return GetToken(PhpParser.Eq, 0); }
		public ConstantInititalizerContext constantInititalizer() {
			return GetRuleContext<ConstantInititalizerContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 156, RULE_variableInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1091; Match(VarName);
			State = 1094;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Eq) {
				{
				State = 1092; Match(Eq);
				State = 1093; constantInititalizer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierInititalizerContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Eq() { return GetToken(PhpParser.Eq, 0); }
		public ConstantInititalizerContext constantInititalizer() {
			return GetRuleContext<ConstantInititalizerContext>(0);
		}
		public IdentifierInititalizerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierInititalizer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterIdentifierInititalizer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitIdentifierInititalizer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierInititalizer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierInititalizerContext identifierInititalizer() {
		IdentifierInititalizerContext _localctx = new IdentifierInititalizerContext(Context, State);
		EnterRule(_localctx, 158, RULE_identifierInititalizer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1096; identifier();
			State = 1097; Match(Eq);
			State = 1098; constantInititalizer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalConstantDeclarationContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode Const() { return GetToken(PhpParser.Const, 0); }
		public IdentifierInititalizerContext[] identifierInititalizer() {
			return GetRuleContexts<IdentifierInititalizerContext>();
		}
		public IdentifierInititalizerContext identifierInititalizer(int i) {
			return GetRuleContext<IdentifierInititalizerContext>(i);
		}
		public ITerminalNode SemiColon() { return GetToken(PhpParser.SemiColon, 0); }
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public GlobalConstantDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalConstantDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterGlobalConstantDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitGlobalConstantDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalConstantDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalConstantDeclarationContext globalConstantDeclaration() {
		GlobalConstantDeclarationContext _localctx = new GlobalConstantDeclarationContext(Context, State);
		EnterRule(_localctx, 160, RULE_globalConstantDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1100; attributes();
			State = 1101; Match(Const);
			State = 1102; identifierInititalizer();
			State = 1107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1103; Match(Comma);
				State = 1104; identifierInititalizer();
				}
				}
				State = 1109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1110; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 162, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1112; expression(0);
			State = 1117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1113; Match(Comma);
				State = 1114; expression(0);
				}
				}
				State = 1119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesesContext : ParserRuleContext {
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public YieldExpressionContext yieldExpression() {
			return GetRuleContext<YieldExpressionContext>(0);
		}
		public ParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parentheses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterParentheses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitParentheses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesesContext parentheses() {
		ParenthesesContext _localctx = new ParenthesesContext(Context, State);
		EnterRule(_localctx, 164, RULE_parentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1120; Match(OpenRoundBracket);
			State = 1123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 1121; expression(0);
				}
				break;
			case 2:
				{
				State = 1122; yieldExpression();
				}
				break;
			}
			State = 1125; Match(CloseRoundBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ChainExpressionContext : ExpressionContext {
		public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		public ChainExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterChainExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitChainExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryOperatorExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Tilde() { return GetToken(PhpParser.Tilde, 0); }
		public ITerminalNode SuppressWarnings() { return GetToken(PhpParser.SuppressWarnings, 0); }
		public ITerminalNode Bang() { return GetToken(PhpParser.Bang, 0); }
		public ITerminalNode Plus() { return GetToken(PhpParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(PhpParser.Minus, 0); }
		public UnaryOperatorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterUnaryOperatorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitUnaryOperatorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperatorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SpecialWordExpressionContext : ExpressionContext {
		public ITerminalNode Yield() { return GetToken(PhpParser.Yield, 0); }
		public ITerminalNode List() { return GetToken(PhpParser.List, 0); }
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public AssignmentListContext assignmentList() {
			return GetRuleContext<AssignmentListContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public ITerminalNode Eq() { return GetToken(PhpParser.Eq, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IsSet() { return GetToken(PhpParser.IsSet, 0); }
		public ChainListContext chainList() {
			return GetRuleContext<ChainListContext>(0);
		}
		public ITerminalNode Empty() { return GetToken(PhpParser.Empty, 0); }
		public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		public ITerminalNode Eval() { return GetToken(PhpParser.Eval, 0); }
		public ITerminalNode Exit() { return GetToken(PhpParser.Exit, 0); }
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public ITerminalNode Include() { return GetToken(PhpParser.Include, 0); }
		public ITerminalNode IncludeOnce() { return GetToken(PhpParser.IncludeOnce, 0); }
		public ITerminalNode Require() { return GetToken(PhpParser.Require, 0); }
		public ITerminalNode RequireOnce() { return GetToken(PhpParser.RequireOnce, 0); }
		public SpecialWordExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterSpecialWordExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitSpecialWordExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialWordExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayCreationExpressionContext : ExpressionContext {
		public ArrayCreationContext arrayCreation() {
			return GetRuleContext<ArrayCreationContext>(0);
		}
		public ArrayCreationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterArrayCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitArrayCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : ExpressionContext {
		public NewExprContext newExpr() {
			return GetRuleContext<NewExprContext>(0);
		}
		public NewExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionContext : ExpressionContext {
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public ParenthesisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SpaceshipExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Spaceship() { return GetToken(PhpParser.Spaceship, 0); }
		public SpaceshipExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterSpaceshipExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitSpaceshipExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceshipExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BackQuoteStringExpressionContext : ExpressionContext {
		public ITerminalNode BackQuoteString() { return GetToken(PhpParser.BackQuoteString, 0); }
		public BackQuoteStringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterBackQuoteStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitBackQuoteStringExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackQuoteStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Colon() { return GetToken(PhpParser.Colon, 0); }
		public ITerminalNode QuestionMark() { return GetToken(PhpParser.QuestionMark, 0); }
		public ConditionalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullCoalescingExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NullCoalescing() { return GetToken(PhpParser.NullCoalescing, 0); }
		public NullCoalescingExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterNullCoalescingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitNullCoalescingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCoalescingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Pow() { return GetToken(PhpParser.Pow, 0); }
		public ITerminalNode Asterisk() { return GetToken(PhpParser.Asterisk, 0); }
		public ITerminalNode Divide() { return GetToken(PhpParser.Divide, 0); }
		public ITerminalNode Percent() { return GetToken(PhpParser.Percent, 0); }
		public ITerminalNode Plus() { return GetToken(PhpParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(PhpParser.Minus, 0); }
		public ITerminalNode Dot() { return GetToken(PhpParser.Dot, 0); }
		public ArithmeticExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterArithmeticExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitArithmeticExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexerExpressionContext : ExpressionContext {
		public StringConstantContext stringConstant() {
			return GetRuleContext<StringConstantContext>(0);
		}
		public ITerminalNode OpenSquareBracket() { return GetToken(PhpParser.OpenSquareBracket, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CloseSquareBracket() { return GetToken(PhpParser.CloseSquareBracket, 0); }
		public IndexerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterIndexerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitIndexerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScalarExpressionContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode Label() { return GetToken(PhpParser.Label, 0); }
		public ScalarExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterScalarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitScalarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixIncDecExpressionContext : ExpressionContext {
		public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		public ITerminalNode Inc() { return GetToken(PhpParser.Inc, 0); }
		public ITerminalNode Dec() { return GetToken(PhpParser.Dec, 0); }
		public PrefixIncDecExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterPrefixIncDecExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitPrefixIncDecExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixIncDecExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ShiftLeft() { return GetToken(PhpParser.ShiftLeft, 0); }
		public ITerminalNode ShiftRight() { return GetToken(PhpParser.ShiftRight, 0); }
		public ITerminalNode Less() { return GetToken(PhpParser.Less, 0); }
		public ITerminalNode IsSmallerOrEqual() { return GetToken(PhpParser.IsSmallerOrEqual, 0); }
		public ITerminalNode Greater() { return GetToken(PhpParser.Greater, 0); }
		public ITerminalNode IsGreaterOrEqual() { return GetToken(PhpParser.IsGreaterOrEqual, 0); }
		public ITerminalNode IsIdentical() { return GetToken(PhpParser.IsIdentical, 0); }
		public ITerminalNode IsNoidentical() { return GetToken(PhpParser.IsNoidentical, 0); }
		public ITerminalNode IsEqual() { return GetToken(PhpParser.IsEqual, 0); }
		public ITerminalNode IsNotEq() { return GetToken(PhpParser.IsNotEq, 0); }
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitComparisonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LogicalAnd() { return GetToken(PhpParser.LogicalAnd, 0); }
		public ITerminalNode LogicalXor() { return GetToken(PhpParser.LogicalXor, 0); }
		public ITerminalNode LogicalOr() { return GetToken(PhpParser.LogicalOr, 0); }
		public LogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintExpressionContext : ExpressionContext {
		public ITerminalNode Print() { return GetToken(PhpParser.Print, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterPrintExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitPrintExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eq() { return GetToken(PhpParser.Eq, 0); }
		public ITerminalNode Ampersand() { return GetToken(PhpParser.Ampersand, 0); }
		public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		public NewExprContext newExpr() {
			return GetRuleContext<NewExprContext>(0);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostfixIncDecExpressionContext : ExpressionContext {
		public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		public ITerminalNode Inc() { return GetToken(PhpParser.Inc, 0); }
		public ITerminalNode Dec() { return GetToken(PhpParser.Dec, 0); }
		public PostfixIncDecExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterPostfixIncDecExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitPostfixIncDecExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixIncDecExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public CastOperationContext castOperation() {
			return GetRuleContext<CastOperationContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstanceOfExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode InstanceOf() { return GetToken(PhpParser.InstanceOf, 0); }
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public InstanceOfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterInstanceOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitInstanceOfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceOfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaFunctionExpressionContext : ExpressionContext {
		public LambdaFunctionExprContext lambdaFunctionExpr() {
			return GetRuleContext<LambdaFunctionExprContext>(0);
		}
		public LambdaFunctionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterLambdaFunctionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitLambdaFunctionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Ampersand() { return GetToken(PhpParser.Ampersand, 0); }
		public ITerminalNode Caret() { return GetToken(PhpParser.Caret, 0); }
		public ITerminalNode Pipe() { return GetToken(PhpParser.Pipe, 0); }
		public ITerminalNode BooleanAnd() { return GetToken(PhpParser.BooleanAnd, 0); }
		public ITerminalNode BooleanOr() { return GetToken(PhpParser.BooleanOr, 0); }
		public BitwiseExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterBitwiseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitBitwiseExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CloneExpressionContext : ExpressionContext {
		public ITerminalNode Clone() { return GetToken(PhpParser.Clone, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CloneExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterCloneExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitCloneExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloneExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 166;
		EnterRecursionRule(_localctx, 166, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				{
				_localctx = new CloneExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1128; Match(Clone);
				State = 1129; expression(45);
				}
				break;
			case 2:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1130; newExpr();
				}
				break;
			case 3:
				{
				_localctx = new IndexerExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1131; stringConstant();
				State = 1132; Match(OpenSquareBracket);
				State = 1133; expression(0);
				State = 1134; Match(CloseSquareBracket);
				}
				break;
			case 4:
				{
				_localctx = new CastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1136; Match(OpenRoundBracket);
				State = 1137; castOperation();
				State = 1138; Match(CloseRoundBracket);
				State = 1139; expression(42);
				}
				break;
			case 5:
				{
				_localctx = new UnaryOperatorExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1141;
				_la = TokenStream.LA(1);
				if ( !(_la==Tilde || _la==SuppressWarnings) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1142; expression(41);
				}
				break;
			case 6:
				{
				_localctx = new UnaryOperatorExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1143;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (Bang - 193)) | (1L << (Plus - 193)) | (1L << (Minus - 193)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1144; expression(40);
				}
				break;
			case 7:
				{
				_localctx = new PrefixIncDecExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1145;
				_la = TokenStream.LA(1);
				if ( !(_la==Inc || _la==Dec) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1146; chain();
				}
				break;
			case 8:
				{
				_localctx = new PostfixIncDecExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1147; chain();
				State = 1148;
				_la = TokenStream.LA(1);
				if ( !(_la==Inc || _la==Dec) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 9:
				{
				_localctx = new PrintExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1150; Match(Print);
				State = 1151; expression(37);
				}
				break;
			case 10:
				{
				_localctx = new ChainExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1152; chain();
				}
				break;
			case 11:
				{
				_localctx = new ScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1153; constant();
				}
				break;
			case 12:
				{
				_localctx = new ScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1154; @string();
				}
				break;
			case 13:
				{
				_localctx = new ScalarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1155; Match(Label);
				}
				break;
			case 14:
				{
				_localctx = new BackQuoteStringExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1156; Match(BackQuoteString);
				}
				break;
			case 15:
				{
				_localctx = new ParenthesisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1157; parentheses();
				}
				break;
			case 16:
				{
				_localctx = new ArrayCreationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1158; arrayCreation();
				}
				break;
			case 17:
				{
				_localctx = new SpecialWordExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1159; Match(Yield);
				}
				break;
			case 18:
				{
				_localctx = new SpecialWordExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1160; Match(List);
				State = 1161; Match(OpenRoundBracket);
				State = 1162; assignmentList();
				State = 1163; Match(CloseRoundBracket);
				State = 1164; Match(Eq);
				State = 1165; expression(28);
				}
				break;
			case 19:
				{
				_localctx = new SpecialWordExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1167; Match(IsSet);
				State = 1168; Match(OpenRoundBracket);
				State = 1169; chainList();
				State = 1170; Match(CloseRoundBracket);
				}
				break;
			case 20:
				{
				_localctx = new SpecialWordExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1172; Match(Empty);
				State = 1173; Match(OpenRoundBracket);
				State = 1174; chain();
				State = 1175; Match(CloseRoundBracket);
				}
				break;
			case 21:
				{
				_localctx = new SpecialWordExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1177; Match(Eval);
				State = 1178; Match(OpenRoundBracket);
				State = 1179; expression(0);
				State = 1180; Match(CloseRoundBracket);
				}
				break;
			case 22:
				{
				_localctx = new SpecialWordExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1182; Match(Exit);
				State = 1186;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
				case 1:
					{
					State = 1183; Match(OpenRoundBracket);
					State = 1184; Match(CloseRoundBracket);
					}
					break;
				case 2:
					{
					State = 1185; parentheses();
					}
					break;
				}
				}
				break;
			case 23:
				{
				_localctx = new SpecialWordExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1188;
				_la = TokenStream.LA(1);
				if ( !(_la==Include || _la==IncludeOnce) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1189; expression(23);
				}
				break;
			case 24:
				{
				_localctx = new SpecialWordExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1190;
				_la = TokenStream.LA(1);
				if ( !(_la==Require || _la==RequireOnce) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1191; expression(22);
				}
				break;
			case 25:
				{
				_localctx = new LambdaFunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1192; lambdaFunctionExpr();
				}
				break;
			case 26:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1193; assignable();
				State = 1194; assignmentOperator();
				State = 1195; expression(5);
				}
				break;
			case 27:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1197; assignable();
				State = 1198; Match(Eq);
				State = 1199; Match(Ampersand);
				State = 1202;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
				case 1:
					{
					State = 1200; chain();
					}
					break;
				case 2:
					{
					State = 1201; newExpr();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1266;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1264;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1206;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1207; ((ArithmeticExpressionContext)_localctx).op = Match(Pow);
						State = 1208; expression(20);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1209;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1210;
						((ArithmeticExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (Asterisk - 197)) | (1L << (Percent - 197)) | (1L << (Divide - 197)))) != 0)) ) {
							((ArithmeticExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1211; expression(19);
						}
						break;
					case 3:
						{
						_localctx = new ArithmeticExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1212;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1213;
						((ArithmeticExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (Plus - 195)) | (1L << (Minus - 195)) | (1L << (Dot - 195)))) != 0)) ) {
							((ArithmeticExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1214; expression(18);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1215;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1216;
						((ComparisonExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ShiftLeft || _la==ShiftRight) ) {
							((ComparisonExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1217; expression(17);
						}
						break;
					case 5:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1218;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1219;
						((ComparisonExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 164)) & ~0x3f) == 0 && ((1L << (_la - 164)) & ((1L << (IsSmallerOrEqual - 164)) | (1L << (IsGreaterOrEqual - 164)) | (1L << (Less - 164)) | (1L << (Greater - 164)))) != 0)) ) {
							((ComparisonExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1220; expression(16);
						}
						break;
					case 6:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1221;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1222;
						((ComparisonExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (IsIdentical - 160)) | (1L << (IsNoidentical - 160)) | (1L << (IsEqual - 160)) | (1L << (IsNotEq - 160)))) != 0)) ) {
							((ComparisonExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1223; expression(15);
						}
						break;
					case 7:
						{
						_localctx = new BitwiseExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1224;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1225; ((BitwiseExpressionContext)_localctx).op = Match(Ampersand);
						State = 1226; expression(14);
						}
						break;
					case 8:
						{
						_localctx = new BitwiseExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1227;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1228; ((BitwiseExpressionContext)_localctx).op = Match(Caret);
						State = 1229; expression(13);
						}
						break;
					case 9:
						{
						_localctx = new BitwiseExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1230;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1231; ((BitwiseExpressionContext)_localctx).op = Match(Pipe);
						State = 1232; expression(12);
						}
						break;
					case 10:
						{
						_localctx = new BitwiseExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1233;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1234; ((BitwiseExpressionContext)_localctx).op = Match(BooleanAnd);
						State = 1235; expression(11);
						}
						break;
					case 11:
						{
						_localctx = new BitwiseExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1236;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1237; ((BitwiseExpressionContext)_localctx).op = Match(BooleanOr);
						State = 1238; expression(10);
						}
						break;
					case 12:
						{
						_localctx = new ConditionalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1239;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1240; ((ConditionalExpressionContext)_localctx).op = Match(QuestionMark);
						State = 1242;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (LambdaFn - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)) | (1L << (Inc - 107)) | (1L << (Dec - 107)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (NamespaceSeparator - 187)) | (1L << (Bang - 187)) | (1L << (Plus - 187)) | (1L << (Minus - 187)) | (1L << (Tilde - 187)) | (1L << (SuppressWarnings - 187)) | (1L << (Dollar - 187)) | (1L << (OpenRoundBracket - 187)) | (1L << (OpenSquareBracket - 187)) | (1L << (VarName - 187)) | (1L << (Label - 187)) | (1L << (Octal - 187)) | (1L << (Decimal - 187)) | (1L << (Real - 187)) | (1L << (Hex - 187)) | (1L << (Binary - 187)) | (1L << (BackQuoteString - 187)) | (1L << (SingleQuoteString - 187)) | (1L << (DoubleQuote - 187)) | (1L << (StartNowDoc - 187)) | (1L << (StartHereDoc - 187)))) != 0)) {
							{
							State = 1241; expression(0);
							}
						}

						State = 1244; Match(Colon);
						State = 1245; expression(9);
						}
						break;
					case 13:
						{
						_localctx = new NullCoalescingExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1246;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1247; ((NullCoalescingExpressionContext)_localctx).op = Match(NullCoalescing);
						State = 1248; expression(8);
						}
						break;
					case 14:
						{
						_localctx = new SpaceshipExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1249;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1250; ((SpaceshipExpressionContext)_localctx).op = Match(Spaceship);
						State = 1251; expression(7);
						}
						break;
					case 15:
						{
						_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1252;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1253; ((LogicalExpressionContext)_localctx).op = Match(LogicalAnd);
						State = 1254; expression(4);
						}
						break;
					case 16:
						{
						_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1255;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1256; ((LogicalExpressionContext)_localctx).op = Match(LogicalXor);
						State = 1257; expression(3);
						}
						break;
					case 17:
						{
						_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1258;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1259; ((LogicalExpressionContext)_localctx).op = Match(LogicalOr);
						State = 1260; expression(2);
						}
						break;
					case 18:
						{
						_localctx = new InstanceOfExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1261;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1262; Match(InstanceOf);
						State = 1263; typeRef();
						}
						break;
					}
					} 
				}
				State = 1268;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignableContext : ParserRuleContext {
		public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		public ArrayCreationContext arrayCreation() {
			return GetRuleContext<ArrayCreationContext>(0);
		}
		public AssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterAssignable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitAssignable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableContext assignable() {
		AssignableContext _localctx = new AssignableContext(Context, State);
		EnterRule(_localctx, 168, RULE_assignable);
		try {
			State = 1271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1269; chain();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1270; arrayCreation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreationContext : ParserRuleContext {
		public ITerminalNode Array() { return GetToken(PhpParser.Array, 0); }
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public ITerminalNode[] OpenSquareBracket() { return GetTokens(PhpParser.OpenSquareBracket); }
		public ITerminalNode OpenSquareBracket(int i) {
			return GetToken(PhpParser.OpenSquareBracket, i);
		}
		public ITerminalNode[] CloseSquareBracket() { return GetTokens(PhpParser.CloseSquareBracket); }
		public ITerminalNode CloseSquareBracket(int i) {
			return GetToken(PhpParser.CloseSquareBracket, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayItemListContext arrayItemList() {
			return GetRuleContext<ArrayItemListContext>(0);
		}
		public ArrayCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterArrayCreation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitArrayCreation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreationContext arrayCreation() {
		ArrayCreationContext _localctx = new ArrayCreationContext(Context, State);
		EnterRule(_localctx, 170, RULE_arrayCreation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Array:
				{
				State = 1273; Match(Array);
				State = 1274; Match(OpenRoundBracket);
				State = 1276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (LambdaFn - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)) | (1L << (Inc - 107)) | (1L << (Dec - 107)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (NamespaceSeparator - 187)) | (1L << (Ampersand - 187)) | (1L << (Bang - 187)) | (1L << (Plus - 187)) | (1L << (Minus - 187)) | (1L << (Tilde - 187)) | (1L << (SuppressWarnings - 187)) | (1L << (Dollar - 187)) | (1L << (OpenRoundBracket - 187)) | (1L << (OpenSquareBracket - 187)) | (1L << (VarName - 187)) | (1L << (Label - 187)) | (1L << (Octal - 187)) | (1L << (Decimal - 187)) | (1L << (Real - 187)) | (1L << (Hex - 187)) | (1L << (Binary - 187)) | (1L << (BackQuoteString - 187)) | (1L << (SingleQuoteString - 187)) | (1L << (DoubleQuote - 187)) | (1L << (StartNowDoc - 187)) | (1L << (StartHereDoc - 187)))) != 0)) {
					{
					State = 1275; arrayItemList();
					}
				}

				State = 1278; Match(CloseRoundBracket);
				}
				break;
			case OpenSquareBracket:
				{
				State = 1279; Match(OpenSquareBracket);
				State = 1281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (LambdaFn - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)) | (1L << (Inc - 107)) | (1L << (Dec - 107)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (NamespaceSeparator - 187)) | (1L << (Ampersand - 187)) | (1L << (Bang - 187)) | (1L << (Plus - 187)) | (1L << (Minus - 187)) | (1L << (Tilde - 187)) | (1L << (SuppressWarnings - 187)) | (1L << (Dollar - 187)) | (1L << (OpenRoundBracket - 187)) | (1L << (OpenSquareBracket - 187)) | (1L << (VarName - 187)) | (1L << (Label - 187)) | (1L << (Octal - 187)) | (1L << (Decimal - 187)) | (1L << (Real - 187)) | (1L << (Hex - 187)) | (1L << (Binary - 187)) | (1L << (BackQuoteString - 187)) | (1L << (SingleQuoteString - 187)) | (1L << (DoubleQuote - 187)) | (1L << (StartNowDoc - 187)) | (1L << (StartHereDoc - 187)))) != 0)) {
					{
					State = 1280; arrayItemList();
					}
				}

				State = 1283; Match(CloseSquareBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				{
				State = 1286; Match(OpenSquareBracket);
				State = 1287; expression(0);
				State = 1288; Match(CloseSquareBracket);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaFunctionExprContext : ParserRuleContext {
		public ITerminalNode Function() { return GetToken(PhpParser.Function, 0); }
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public ITerminalNode Static() { return GetToken(PhpParser.Static, 0); }
		public ITerminalNode Ampersand() { return GetToken(PhpParser.Ampersand, 0); }
		public LambdaFunctionUseVarsContext lambdaFunctionUseVars() {
			return GetRuleContext<LambdaFunctionUseVarsContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(PhpParser.Colon, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode LambdaFn() { return GetToken(PhpParser.LambdaFn, 0); }
		public ITerminalNode DoubleArrow() { return GetToken(PhpParser.DoubleArrow, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaFunctionExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaFunctionExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterLambdaFunctionExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitLambdaFunctionExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaFunctionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaFunctionExprContext lambdaFunctionExpr() {
		LambdaFunctionExprContext _localctx = new LambdaFunctionExprContext(Context, State);
		EnterRule(_localctx, 172, RULE_lambdaFunctionExpr);
		int _la;
		try {
			State = 1318;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Function:
			case Static:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Static) {
					{
					State = 1292; Match(Static);
					}
				}

				State = 1295; Match(Function);
				State = 1297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ampersand) {
					{
					State = 1296; Match(Ampersand);
					}
				}

				State = 1299; Match(OpenRoundBracket);
				State = 1300; formalParameterList();
				State = 1301; Match(CloseRoundBracket);
				State = 1303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Use) {
					{
					State = 1302; lambdaFunctionUseVars();
					}
				}

				State = 1307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1305; Match(Colon);
					State = 1306; typeHint();
					}
				}

				State = 1309; blockStatement();
				}
				break;
			case LambdaFn:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1311; Match(LambdaFn);
				State = 1312; Match(OpenRoundBracket);
				State = 1313; formalParameterList();
				State = 1314; Match(CloseRoundBracket);
				State = 1315; Match(DoubleArrow);
				State = 1316; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExprContext : ParserRuleContext {
		public ITerminalNode New() { return GetToken(PhpParser.New, 0); }
		public TypeRefContext typeRef() {
			return GetRuleContext<TypeRefContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public NewExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterNewExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitNewExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewExprContext newExpr() {
		NewExprContext _localctx = new NewExprContext(Context, State);
		EnterRule(_localctx, 174, RULE_newExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1320; Match(New);
			State = 1321; typeRef();
			State = 1323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				{
				State = 1322; arguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public ITerminalNode Eq() { return GetToken(PhpParser.Eq, 0); }
		public ITerminalNode PlusEqual() { return GetToken(PhpParser.PlusEqual, 0); }
		public ITerminalNode MinusEqual() { return GetToken(PhpParser.MinusEqual, 0); }
		public ITerminalNode MulEqual() { return GetToken(PhpParser.MulEqual, 0); }
		public ITerminalNode PowEqual() { return GetToken(PhpParser.PowEqual, 0); }
		public ITerminalNode DivEqual() { return GetToken(PhpParser.DivEqual, 0); }
		public ITerminalNode Concaequal() { return GetToken(PhpParser.Concaequal, 0); }
		public ITerminalNode ModEqual() { return GetToken(PhpParser.ModEqual, 0); }
		public ITerminalNode AndEqual() { return GetToken(PhpParser.AndEqual, 0); }
		public ITerminalNode OrEqual() { return GetToken(PhpParser.OrEqual, 0); }
		public ITerminalNode XorEqual() { return GetToken(PhpParser.XorEqual, 0); }
		public ITerminalNode ShiftLeftEqual() { return GetToken(PhpParser.ShiftLeftEqual, 0); }
		public ITerminalNode ShiftRightEqual() { return GetToken(PhpParser.ShiftRightEqual, 0); }
		public ITerminalNode NullCoalescingEqual() { return GetToken(PhpParser.NullCoalescingEqual, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 176, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1325;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & ((1L << (PlusEqual - 166)) | (1L << (MinusEqual - 166)) | (1L << (MulEqual - 166)) | (1L << (PowEqual - 166)) | (1L << (DivEqual - 166)) | (1L << (Concaequal - 166)) | (1L << (ModEqual - 166)) | (1L << (ShiftLeftEqual - 166)) | (1L << (ShiftRightEqual - 166)) | (1L << (AndEqual - 166)) | (1L << (OrEqual - 166)) | (1L << (XorEqual - 166)) | (1L << (NullCoalescingEqual - 166)) | (1L << (Eq - 166)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldExpressionContext : ParserRuleContext {
		public ITerminalNode Yield() { return GetToken(PhpParser.Yield, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode From() { return GetToken(PhpParser.From, 0); }
		public ITerminalNode DoubleArrow() { return GetToken(PhpParser.DoubleArrow, 0); }
		public YieldExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterYieldExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitYieldExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YieldExpressionContext yieldExpression() {
		YieldExpressionContext _localctx = new YieldExpressionContext(Context, State);
		EnterRule(_localctx, 178, RULE_yieldExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1327; Match(Yield);
			State = 1335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
			case 1:
				{
				State = 1328; expression(0);
				State = 1331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DoubleArrow) {
					{
					State = 1329; Match(DoubleArrow);
					State = 1330; expression(0);
					}
				}

				}
				break;
			case 2:
				{
				State = 1333; Match(From);
				State = 1334; expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayItemListContext : ParserRuleContext {
		public ArrayItemContext[] arrayItem() {
			return GetRuleContexts<ArrayItemContext>();
		}
		public ArrayItemContext arrayItem(int i) {
			return GetRuleContext<ArrayItemContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public ArrayItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayItemList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterArrayItemList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitArrayItemList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayItemList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayItemListContext arrayItemList() {
		ArrayItemListContext _localctx = new ArrayItemListContext(Context, State);
		EnterRule(_localctx, 180, RULE_arrayItemList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1337; arrayItem();
			State = 1342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1338; Match(Comma);
					State = 1339; arrayItem();
					}
					} 
				}
				State = 1344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			}
			State = 1346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 1345; Match(Comma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayItemContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DoubleArrow() { return GetToken(PhpParser.DoubleArrow, 0); }
		public ITerminalNode Ampersand() { return GetToken(PhpParser.Ampersand, 0); }
		public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		public ArrayItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterArrayItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitArrayItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayItemContext arrayItem() {
		ArrayItemContext _localctx = new ArrayItemContext(Context, State);
		EnterRule(_localctx, 182, RULE_arrayItem);
		int _la;
		try {
			State = 1360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1348; expression(0);
				State = 1351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DoubleArrow) {
					{
					State = 1349; Match(DoubleArrow);
					State = 1350; expression(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (LambdaFn - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)) | (1L << (Inc - 107)) | (1L << (Dec - 107)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (NamespaceSeparator - 187)) | (1L << (Bang - 187)) | (1L << (Plus - 187)) | (1L << (Minus - 187)) | (1L << (Tilde - 187)) | (1L << (SuppressWarnings - 187)) | (1L << (Dollar - 187)) | (1L << (OpenRoundBracket - 187)) | (1L << (OpenSquareBracket - 187)) | (1L << (VarName - 187)) | (1L << (Label - 187)) | (1L << (Octal - 187)) | (1L << (Decimal - 187)) | (1L << (Real - 187)) | (1L << (Hex - 187)) | (1L << (Binary - 187)) | (1L << (BackQuoteString - 187)) | (1L << (SingleQuoteString - 187)) | (1L << (DoubleQuote - 187)) | (1L << (StartNowDoc - 187)) | (1L << (StartHereDoc - 187)))) != 0)) {
					{
					State = 1353; expression(0);
					State = 1354; Match(DoubleArrow);
					}
				}

				State = 1358; Match(Ampersand);
				State = 1359; chain();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaFunctionUseVarsContext : ParserRuleContext {
		public ITerminalNode Use() { return GetToken(PhpParser.Use, 0); }
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public LambdaFunctionUseVarContext[] lambdaFunctionUseVar() {
			return GetRuleContexts<LambdaFunctionUseVarContext>();
		}
		public LambdaFunctionUseVarContext lambdaFunctionUseVar(int i) {
			return GetRuleContext<LambdaFunctionUseVarContext>(i);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public LambdaFunctionUseVarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaFunctionUseVars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterLambdaFunctionUseVars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitLambdaFunctionUseVars(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaFunctionUseVars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaFunctionUseVarsContext lambdaFunctionUseVars() {
		LambdaFunctionUseVarsContext _localctx = new LambdaFunctionUseVarsContext(Context, State);
		EnterRule(_localctx, 184, RULE_lambdaFunctionUseVars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1362; Match(Use);
			State = 1363; Match(OpenRoundBracket);
			State = 1364; lambdaFunctionUseVar();
			State = 1369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1365; Match(Comma);
				State = 1366; lambdaFunctionUseVar();
				}
				}
				State = 1371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1372; Match(CloseRoundBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaFunctionUseVarContext : ParserRuleContext {
		public ITerminalNode VarName() { return GetToken(PhpParser.VarName, 0); }
		public ITerminalNode Ampersand() { return GetToken(PhpParser.Ampersand, 0); }
		public LambdaFunctionUseVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaFunctionUseVar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterLambdaFunctionUseVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitLambdaFunctionUseVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaFunctionUseVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaFunctionUseVarContext lambdaFunctionUseVar() {
		LambdaFunctionUseVarContext _localctx = new LambdaFunctionUseVarContext(Context, State);
		EnterRule(_localctx, 186, RULE_lambdaFunctionUseVar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ampersand) {
				{
				State = 1374; Match(Ampersand);
				}
			}

			State = 1377; Match(VarName);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedStaticTypeRefContext : ParserRuleContext {
		public QualifiedNamespaceNameContext qualifiedNamespaceName() {
			return GetRuleContext<QualifiedNamespaceNameContext>(0);
		}
		public GenericDynamicArgsContext genericDynamicArgs() {
			return GetRuleContext<GenericDynamicArgsContext>(0);
		}
		public ITerminalNode Static() { return GetToken(PhpParser.Static, 0); }
		public QualifiedStaticTypeRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedStaticTypeRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterQualifiedStaticTypeRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitQualifiedStaticTypeRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedStaticTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedStaticTypeRefContext qualifiedStaticTypeRef() {
		QualifiedStaticTypeRefContext _localctx = new QualifiedStaticTypeRefContext(Context, State);
		EnterRule(_localctx, 188, RULE_qualifiedStaticTypeRef);
		int _la;
		try {
			State = 1384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1379; qualifiedNamespaceName();
				State = 1381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Lgeneric) {
					{
					State = 1380; genericDynamicArgs();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1383; Match(Static);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeRefContext : ParserRuleContext {
		public QualifiedNamespaceNameContext qualifiedNamespaceName() {
			return GetRuleContext<QualifiedNamespaceNameContext>(0);
		}
		public IndirectTypeRefContext indirectTypeRef() {
			return GetRuleContext<IndirectTypeRefContext>(0);
		}
		public GenericDynamicArgsContext genericDynamicArgs() {
			return GetRuleContext<GenericDynamicArgsContext>(0);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode Static() { return GetToken(PhpParser.Static, 0); }
		public AnoymousClassContext anoymousClass() {
			return GetRuleContext<AnoymousClassContext>(0);
		}
		public TypeRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterTypeRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitTypeRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeRefContext typeRef() {
		TypeRefContext _localctx = new TypeRefContext(Context, State);
		EnterRule(_localctx, 190, RULE_typeRef);
		try {
			State = 1396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1388;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
				case 1:
					{
					State = 1386; qualifiedNamespaceName();
					}
					break;
				case 2:
					{
					State = 1387; indirectTypeRef();
					}
					break;
				}
				State = 1391;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
				case 1:
					{
					State = 1390; genericDynamicArgs();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1393; primitiveType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1394; Match(Static);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1395; anoymousClass();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnoymousClassContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode OpenCurlyBracket() { return GetToken(PhpParser.OpenCurlyBracket, 0); }
		public ITerminalNode CloseCurlyBracket() { return GetToken(PhpParser.CloseCurlyBracket, 0); }
		public ClassEntryTypeContext classEntryType() {
			return GetRuleContext<ClassEntryTypeContext>(0);
		}
		public ITerminalNode Interface() { return GetToken(PhpParser.Interface, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Private() { return GetToken(PhpParser.Private, 0); }
		public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		public ITerminalNode Partial() { return GetToken(PhpParser.Partial, 0); }
		public ClassStatementContext[] classStatement() {
			return GetRuleContexts<ClassStatementContext>();
		}
		public ClassStatementContext classStatement(int i) {
			return GetRuleContext<ClassStatementContext>(i);
		}
		public TypeParameterListInBracketsContext typeParameterListInBrackets() {
			return GetRuleContext<TypeParameterListInBracketsContext>(0);
		}
		public ITerminalNode Extends() { return GetToken(PhpParser.Extends, 0); }
		public QualifiedStaticTypeRefContext qualifiedStaticTypeRef() {
			return GetRuleContext<QualifiedStaticTypeRefContext>(0);
		}
		public ITerminalNode Implements() { return GetToken(PhpParser.Implements, 0); }
		public InterfaceListContext interfaceList() {
			return GetRuleContext<InterfaceListContext>(0);
		}
		public AnoymousClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anoymousClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterAnoymousClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitAnoymousClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnoymousClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnoymousClassContext anoymousClass() {
		AnoymousClassContext _localctx = new AnoymousClassContext(Context, State);
		EnterRule(_localctx, 192, RULE_anoymousClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1398; attributes();
			State = 1400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Private) {
				{
				State = 1399; Match(Private);
				}
			}

			State = 1403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Abstract || _la==Final) {
				{
				State = 1402; modifier();
				}
			}

			State = 1406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Partial) {
				{
				State = 1405; Match(Partial);
				}
			}

			State = 1429;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Class:
			case Trait:
				{
				State = 1408; classEntryType();
				State = 1410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Lgeneric) {
					{
					State = 1409; typeParameterListInBrackets();
					}
				}

				State = 1414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Extends) {
					{
					State = 1412; Match(Extends);
					State = 1413; qualifiedStaticTypeRef();
					}
				}

				State = 1418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Implements) {
					{
					State = 1416; Match(Implements);
					State = 1417; interfaceList();
					}
				}

				}
				break;
			case Interface:
				{
				State = 1420; Match(Interface);
				State = 1421; identifier();
				State = 1423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Lgeneric) {
					{
					State = 1422; typeParameterListInBrackets();
					}
				}

				State = 1427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Extends) {
					{
					State = 1425; Match(Extends);
					State = 1426; interfaceList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1431; Match(OpenCurlyBracket);
			State = 1435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Abstract || _la==Const || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Final - 75)) | (1L << (Function - 75)) | (1L << (Private - 75)) | (1L << (Protected - 75)) | (1L << (Public - 75)) | (1L << (Static - 75)) | (1L << (Use - 75)) | (1L << (Var - 75)))) != 0) || _la==OpenSquareBracket) {
				{
				{
				State = 1432; classStatement();
				}
				}
				State = 1437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1438; Match(CloseCurlyBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndirectTypeRefContext : ParserRuleContext {
		public ChainBaseContext chainBase() {
			return GetRuleContext<ChainBaseContext>(0);
		}
		public ITerminalNode[] ObjectOperator() { return GetTokens(PhpParser.ObjectOperator); }
		public ITerminalNode ObjectOperator(int i) {
			return GetToken(PhpParser.ObjectOperator, i);
		}
		public KeyedFieldNameContext[] keyedFieldName() {
			return GetRuleContexts<KeyedFieldNameContext>();
		}
		public KeyedFieldNameContext keyedFieldName(int i) {
			return GetRuleContext<KeyedFieldNameContext>(i);
		}
		public IndirectTypeRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirectTypeRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterIndirectTypeRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitIndirectTypeRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirectTypeRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndirectTypeRefContext indirectTypeRef() {
		IndirectTypeRefContext _localctx = new IndirectTypeRefContext(Context, State);
		EnterRule(_localctx, 194, RULE_indirectTypeRef);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1440; chainBase();
			State = 1445;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1441; Match(ObjectOperator);
					State = 1442; keyedFieldName();
					}
					} 
				}
				State = 1447;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNamespaceNameContext : ParserRuleContext {
		public NamespaceNameListContext namespaceNameList() {
			return GetRuleContext<NamespaceNameListContext>(0);
		}
		public ITerminalNode Namespace() { return GetToken(PhpParser.Namespace, 0); }
		public ITerminalNode NamespaceSeparator() { return GetToken(PhpParser.NamespaceSeparator, 0); }
		public QualifiedNamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNamespaceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterQualifiedNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitQualifiedNamespaceName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNamespaceNameContext qualifiedNamespaceName() {
		QualifiedNamespaceNameContext _localctx = new QualifiedNamespaceNameContext(Context, State);
		EnterRule(_localctx, 196, RULE_qualifiedNamespaceName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				{
				State = 1448; Match(Namespace);
				}
				break;
			}
			State = 1452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NamespaceSeparator) {
				{
				State = 1451; Match(NamespaceSeparator);
				}
			}

			State = 1454; namespaceNameList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] NamespaceSeparator() { return GetTokens(PhpParser.NamespaceSeparator); }
		public ITerminalNode NamespaceSeparator(int i) {
			return GetToken(PhpParser.NamespaceSeparator, i);
		}
		public NamespaceNameTailContext namespaceNameTail() {
			return GetRuleContext<NamespaceNameTailContext>(0);
		}
		public NamespaceNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterNamespaceNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitNamespaceNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameListContext namespaceNameList() {
		NamespaceNameListContext _localctx = new NamespaceNameListContext(Context, State);
		EnterRule(_localctx, 198, RULE_namespaceNameList);
		try {
			int _alt;
			State = 1469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1456; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1457; identifier();
				State = 1462;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1458; Match(NamespaceSeparator);
						State = 1459; identifier();
						}
						} 
					}
					State = 1464;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,161,Context);
				}
				State = 1467;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
				case 1:
					{
					State = 1465; Match(NamespaceSeparator);
					State = 1466; namespaceNameTail();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameTailContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode As() { return GetToken(PhpParser.As, 0); }
		public ITerminalNode OpenCurlyBracket() { return GetToken(PhpParser.OpenCurlyBracket, 0); }
		public NamespaceNameTailContext[] namespaceNameTail() {
			return GetRuleContexts<NamespaceNameTailContext>();
		}
		public NamespaceNameTailContext namespaceNameTail(int i) {
			return GetRuleContext<NamespaceNameTailContext>(i);
		}
		public ITerminalNode CloseCurlyBracket() { return GetToken(PhpParser.CloseCurlyBracket, 0); }
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public NamespaceNameTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceNameTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterNamespaceNameTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitNamespaceNameTail(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceNameTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameTailContext namespaceNameTail() {
		NamespaceNameTailContext _localctx = new NamespaceNameTailContext(Context, State);
		EnterRule(_localctx, 200, RULE_namespaceNameTail);
		int _la;
		try {
			int _alt;
			State = 1490;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Abstract:
			case Array:
			case As:
			case BinaryCast:
			case BoolType:
			case BooleanConstant:
			case Break:
			case Callable:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Declare:
			case Default:
			case Do:
			case DoubleCast:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case EndDeclare:
			case EndFor:
			case EndForeach:
			case EndIf:
			case EndSwitch:
			case EndWhile:
			case Eval:
			case Exit:
			case Extends:
			case Final:
			case Finally:
			case FloatCast:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Import:
			case Include:
			case IncludeOnce:
			case InstanceOf:
			case InsteadOf:
			case Int8Cast:
			case Int16Cast:
			case Int64Type:
			case IntType:
			case Interface:
			case IsSet:
			case List:
			case LogicalAnd:
			case LogicalOr:
			case LogicalXor:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Parent_:
			case Partial:
			case Print:
			case Private:
			case Protected:
			case Public:
			case Require:
			case RequireOnce:
			case Resource:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Trait:
			case Try:
			case Typeof:
			case UintCast:
			case UnicodeCast:
			case Unset:
			case Use:
			case Var:
			case While:
			case Yield:
			case From:
			case Get:
			case Set:
			case Call:
			case CallStatic:
			case Constructor:
			case Destruct:
			case Wakeup:
			case Sleep:
			case Autoload:
			case IsSet__:
			case Unset__:
			case ToString__:
			case Invoke:
			case SetState:
			case Clone__:
			case DebugInfo:
			case Namespace__:
			case Class__:
			case Traic__:
			case Function__:
			case Method__:
			case Line__:
			case File__:
			case Dir__:
			case Label:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1471; identifier();
				State = 1474;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
				case 1:
					{
					State = 1472; Match(As);
					State = 1473; identifier();
					}
					break;
				}
				}
				break;
			case OpenCurlyBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1476; Match(OpenCurlyBracket);
				State = 1477; namespaceNameTail();
				State = 1482;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,165,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1478; Match(Comma);
						State = 1479; namespaceNameTail();
						}
						} 
					}
					State = 1484;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,165,Context);
				}
				State = 1486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1485; Match(Comma);
					}
				}

				State = 1488; Match(CloseCurlyBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNamespaceNameListContext : ParserRuleContext {
		public QualifiedNamespaceNameContext[] qualifiedNamespaceName() {
			return GetRuleContexts<QualifiedNamespaceNameContext>();
		}
		public QualifiedNamespaceNameContext qualifiedNamespaceName(int i) {
			return GetRuleContext<QualifiedNamespaceNameContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public QualifiedNamespaceNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNamespaceNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterQualifiedNamespaceNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitQualifiedNamespaceNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNamespaceNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNamespaceNameListContext qualifiedNamespaceNameList() {
		QualifiedNamespaceNameListContext _localctx = new QualifiedNamespaceNameListContext(Context, State);
		EnterRule(_localctx, 202, RULE_qualifiedNamespaceNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1492; qualifiedNamespaceName();
			State = 1497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1493; Match(Comma);
				State = 1494; qualifiedNamespaceName();
				}
				}
				State = 1499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public ActualArgumentContext[] actualArgument() {
			return GetRuleContexts<ActualArgumentContext>();
		}
		public ActualArgumentContext actualArgument(int i) {
			return GetRuleContext<ActualArgumentContext>(i);
		}
		public YieldExpressionContext yieldExpression() {
			return GetRuleContext<YieldExpressionContext>(0);
		}
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 204, RULE_arguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1500; Match(OpenRoundBracket);
			State = 1510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				{
				State = 1501; actualArgument();
				State = 1506;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1502; Match(Comma);
						State = 1503; actualArgument();
						}
						} 
					}
					State = 1508;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
				}
				}
				break;
			case 2:
				{
				State = 1509; yieldExpression();
				}
				break;
			}
			State = 1513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 1512; Match(Comma);
				}
			}

			State = 1515; Match(CloseRoundBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(PhpParser.Ellipsis, 0); }
		public ITerminalNode Ampersand() { return GetToken(PhpParser.Ampersand, 0); }
		public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		public ActualArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterActualArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitActualArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualArgumentContext actualArgument() {
		ActualArgumentContext _localctx = new ActualArgumentContext(Context, State);
		EnterRule(_localctx, 206, RULE_actualArgument);
		int _la;
		try {
			State = 1523;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Abstract:
			case Array:
			case As:
			case BinaryCast:
			case BoolType:
			case BooleanConstant:
			case Break:
			case Callable:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Declare:
			case Default:
			case Do:
			case DoubleCast:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case EndDeclare:
			case EndFor:
			case EndForeach:
			case EndIf:
			case EndSwitch:
			case EndWhile:
			case Eval:
			case Exit:
			case Extends:
			case Final:
			case Finally:
			case FloatCast:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Import:
			case Include:
			case IncludeOnce:
			case InstanceOf:
			case InsteadOf:
			case Int8Cast:
			case Int16Cast:
			case Int64Type:
			case IntType:
			case Interface:
			case IsSet:
			case List:
			case LogicalAnd:
			case LogicalOr:
			case LogicalXor:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Parent_:
			case Partial:
			case Print:
			case Private:
			case Protected:
			case Public:
			case Require:
			case RequireOnce:
			case Resource:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Trait:
			case Try:
			case Typeof:
			case UintCast:
			case UnicodeCast:
			case Unset:
			case Use:
			case Var:
			case While:
			case Yield:
			case From:
			case LambdaFn:
			case Get:
			case Set:
			case Call:
			case CallStatic:
			case Constructor:
			case Destruct:
			case Wakeup:
			case Sleep:
			case Autoload:
			case IsSet__:
			case Unset__:
			case ToString__:
			case Invoke:
			case SetState:
			case Clone__:
			case DebugInfo:
			case Namespace__:
			case Class__:
			case Traic__:
			case Function__:
			case Method__:
			case Line__:
			case File__:
			case Dir__:
			case Inc:
			case Dec:
			case NamespaceSeparator:
			case Ellipsis:
			case Bang:
			case Plus:
			case Minus:
			case Tilde:
			case SuppressWarnings:
			case Dollar:
			case OpenRoundBracket:
			case OpenSquareBracket:
			case VarName:
			case Label:
			case Octal:
			case Decimal:
			case Real:
			case Hex:
			case Binary:
			case BackQuoteString:
			case SingleQuoteString:
			case DoubleQuote:
			case StartNowDoc:
			case StartHereDoc:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1517; Match(Ellipsis);
					}
				}

				State = 1520; expression(0);
				}
				break;
			case Ampersand:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1521; Match(Ampersand);
				State = 1522; chain();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantInititalizerContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode Array() { return GetToken(PhpParser.Array, 0); }
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public ConstantArrayItemListContext constantArrayItemList() {
			return GetRuleContext<ConstantArrayItemListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(PhpParser.Comma, 0); }
		public ITerminalNode OpenSquareBracket() { return GetToken(PhpParser.OpenSquareBracket, 0); }
		public ITerminalNode CloseSquareBracket() { return GetToken(PhpParser.CloseSquareBracket, 0); }
		public ConstantInititalizerContext constantInititalizer() {
			return GetRuleContext<ConstantInititalizerContext>(0);
		}
		public ITerminalNode Plus() { return GetToken(PhpParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(PhpParser.Minus, 0); }
		public ConstantInititalizerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantInititalizer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterConstantInititalizer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitConstantInititalizer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantInititalizer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantInititalizerContext constantInititalizer() {
		ConstantInititalizerContext _localctx = new ConstantInititalizerContext(Context, State);
		EnterRule(_localctx, 208, RULE_constantInititalizer);
		int _la;
		try {
			State = 1546;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1525; constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1526; @string();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1527; Match(Array);
				State = 1528; Match(OpenRoundBracket);
				State = 1533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (NamespaceSeparator - 187)) | (1L << (Plus - 187)) | (1L << (Minus - 187)) | (1L << (Dollar - 187)) | (1L << (OpenSquareBracket - 187)) | (1L << (VarName - 187)) | (1L << (Label - 187)) | (1L << (Octal - 187)) | (1L << (Decimal - 187)) | (1L << (Real - 187)) | (1L << (Hex - 187)) | (1L << (Binary - 187)) | (1L << (SingleQuoteString - 187)) | (1L << (DoubleQuote - 187)) | (1L << (StartNowDoc - 187)) | (1L << (StartHereDoc - 187)))) != 0)) {
					{
					State = 1529; constantArrayItemList();
					State = 1531;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Comma) {
						{
						State = 1530; Match(Comma);
						}
					}

					}
				}

				State = 1535; Match(CloseRoundBracket);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1536; Match(OpenSquareBracket);
				State = 1541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (NamespaceSeparator - 187)) | (1L << (Plus - 187)) | (1L << (Minus - 187)) | (1L << (Dollar - 187)) | (1L << (OpenSquareBracket - 187)) | (1L << (VarName - 187)) | (1L << (Label - 187)) | (1L << (Octal - 187)) | (1L << (Decimal - 187)) | (1L << (Real - 187)) | (1L << (Hex - 187)) | (1L << (Binary - 187)) | (1L << (SingleQuoteString - 187)) | (1L << (DoubleQuote - 187)) | (1L << (StartNowDoc - 187)) | (1L << (StartHereDoc - 187)))) != 0)) {
					{
					State = 1537; constantArrayItemList();
					State = 1539;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Comma) {
						{
						State = 1538; Match(Comma);
						}
					}

					}
				}

				State = 1543; Match(CloseSquareBracket);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1544;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1545; constantInititalizer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantArrayItemListContext : ParserRuleContext {
		public ConstantArrayItemContext[] constantArrayItem() {
			return GetRuleContexts<ConstantArrayItemContext>();
		}
		public ConstantArrayItemContext constantArrayItem(int i) {
			return GetRuleContext<ConstantArrayItemContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public ConstantArrayItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantArrayItemList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterConstantArrayItemList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitConstantArrayItemList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantArrayItemList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantArrayItemListContext constantArrayItemList() {
		ConstantArrayItemListContext _localctx = new ConstantArrayItemListContext(Context, State);
		EnterRule(_localctx, 210, RULE_constantArrayItemList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1548; constantArrayItem();
			State = 1553;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1549; Match(Comma);
					State = 1550; constantArrayItem();
					}
					} 
				}
				State = 1555;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantArrayItemContext : ParserRuleContext {
		public ConstantInititalizerContext[] constantInititalizer() {
			return GetRuleContexts<ConstantInititalizerContext>();
		}
		public ConstantInititalizerContext constantInititalizer(int i) {
			return GetRuleContext<ConstantInititalizerContext>(i);
		}
		public ITerminalNode DoubleArrow() { return GetToken(PhpParser.DoubleArrow, 0); }
		public ConstantArrayItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantArrayItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterConstantArrayItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitConstantArrayItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantArrayItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantArrayItemContext constantArrayItem() {
		ConstantArrayItemContext _localctx = new ConstantArrayItemContext(Context, State);
		EnterRule(_localctx, 212, RULE_constantArrayItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1556; constantInititalizer();
			State = 1559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DoubleArrow) {
				{
				State = 1557; Match(DoubleArrow);
				State = 1558; constantInititalizer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode Null() { return GetToken(PhpParser.Null, 0); }
		public LiteralConstantContext literalConstant() {
			return GetRuleContext<LiteralConstantContext>(0);
		}
		public MagicConstantContext magicConstant() {
			return GetRuleContext<MagicConstantContext>(0);
		}
		public ClassConstantContext classConstant() {
			return GetRuleContext<ClassConstantContext>(0);
		}
		public QualifiedNamespaceNameContext qualifiedNamespaceName() {
			return GetRuleContext<QualifiedNamespaceNameContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 214, RULE_constant);
		try {
			State = 1566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1561; Match(Null);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1562; literalConstant();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1563; magicConstant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1564; classConstant();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1565; qualifiedNamespaceName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralConstantContext : ParserRuleContext {
		public ITerminalNode Real() { return GetToken(PhpParser.Real, 0); }
		public ITerminalNode BooleanConstant() { return GetToken(PhpParser.BooleanConstant, 0); }
		public NumericConstantContext numericConstant() {
			return GetRuleContext<NumericConstantContext>(0);
		}
		public StringConstantContext stringConstant() {
			return GetRuleContext<StringConstantContext>(0);
		}
		public LiteralConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterLiteralConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitLiteralConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralConstantContext literalConstant() {
		LiteralConstantContext _localctx = new LiteralConstantContext(Context, State);
		EnterRule(_localctx, 216, RULE_literalConstant);
		try {
			State = 1572;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Real:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1568; Match(Real);
				}
				break;
			case BooleanConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1569; Match(BooleanConstant);
				}
				break;
			case Octal:
			case Decimal:
			case Hex:
			case Binary:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1570; numericConstant();
				}
				break;
			case Label:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1571; stringConstant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericConstantContext : ParserRuleContext {
		public ITerminalNode Octal() { return GetToken(PhpParser.Octal, 0); }
		public ITerminalNode Decimal() { return GetToken(PhpParser.Decimal, 0); }
		public ITerminalNode Hex() { return GetToken(PhpParser.Hex, 0); }
		public ITerminalNode Binary() { return GetToken(PhpParser.Binary, 0); }
		public NumericConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterNumericConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitNumericConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericConstantContext numericConstant() {
		NumericConstantContext _localctx = new NumericConstantContext(Context, State);
		EnterRule(_localctx, 218, RULE_numericConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1574;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 219)) & ~0x3f) == 0 && ((1L << (_la - 219)) & ((1L << (Octal - 219)) | (1L << (Decimal - 219)) | (1L << (Hex - 219)) | (1L << (Binary - 219)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassConstantContext : ParserRuleContext {
		public ITerminalNode DoubleColon() { return GetToken(PhpParser.DoubleColon, 0); }
		public ITerminalNode Class() { return GetToken(PhpParser.Class, 0); }
		public ITerminalNode Parent_() { return GetToken(PhpParser.Parent_, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Constructor() { return GetToken(PhpParser.Constructor, 0); }
		public ITerminalNode Get() { return GetToken(PhpParser.Get, 0); }
		public ITerminalNode Set() { return GetToken(PhpParser.Set, 0); }
		public QualifiedStaticTypeRefContext qualifiedStaticTypeRef() {
			return GetRuleContext<QualifiedStaticTypeRefContext>(0);
		}
		public KeyedVariableContext[] keyedVariable() {
			return GetRuleContexts<KeyedVariableContext>();
		}
		public KeyedVariableContext keyedVariable(int i) {
			return GetRuleContext<KeyedVariableContext>(i);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ClassConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterClassConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitClassConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassConstantContext classConstant() {
		ClassConstantContext _localctx = new ClassConstantContext(Context, State);
		EnterRule(_localctx, 220, RULE_classConstant);
		int _la;
		try {
			State = 1594;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1576;
				_la = TokenStream.LA(1);
				if ( !(_la==Class || _la==Parent_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1577; Match(DoubleColon);
				State = 1582;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
				case 1:
					{
					State = 1578; identifier();
					}
					break;
				case 2:
					{
					State = 1579; Match(Constructor);
					}
					break;
				case 3:
					{
					State = 1580; Match(Get);
					}
					break;
				case 4:
					{
					State = 1581; Match(Set);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1587;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Abstract:
				case Array:
				case As:
				case BinaryCast:
				case BoolType:
				case BooleanConstant:
				case Break:
				case Callable:
				case Case:
				case Catch:
				case Class:
				case Clone:
				case Const:
				case Continue:
				case Declare:
				case Default:
				case Do:
				case DoubleCast:
				case DoubleType:
				case Echo:
				case Else:
				case ElseIf:
				case Empty:
				case EndDeclare:
				case EndFor:
				case EndForeach:
				case EndIf:
				case EndSwitch:
				case EndWhile:
				case Eval:
				case Exit:
				case Extends:
				case Final:
				case Finally:
				case FloatCast:
				case For:
				case Foreach:
				case Function:
				case Global:
				case Goto:
				case If:
				case Implements:
				case Import:
				case Include:
				case IncludeOnce:
				case InstanceOf:
				case InsteadOf:
				case Int8Cast:
				case Int16Cast:
				case Int64Type:
				case IntType:
				case Interface:
				case IsSet:
				case List:
				case LogicalAnd:
				case LogicalOr:
				case LogicalXor:
				case Namespace:
				case New:
				case Null:
				case ObjectType:
				case Parent_:
				case Partial:
				case Print:
				case Private:
				case Protected:
				case Public:
				case Require:
				case RequireOnce:
				case Resource:
				case Return:
				case Static:
				case StringType:
				case Switch:
				case Throw:
				case Trait:
				case Try:
				case Typeof:
				case UintCast:
				case UnicodeCast:
				case Unset:
				case Use:
				case Var:
				case While:
				case Yield:
				case From:
				case Get:
				case Set:
				case Call:
				case CallStatic:
				case Constructor:
				case Destruct:
				case Wakeup:
				case Sleep:
				case Autoload:
				case IsSet__:
				case Unset__:
				case ToString__:
				case Invoke:
				case SetState:
				case Clone__:
				case DebugInfo:
				case Namespace__:
				case Class__:
				case Traic__:
				case Function__:
				case Method__:
				case Line__:
				case File__:
				case Dir__:
				case NamespaceSeparator:
				case Label:
					{
					State = 1584; qualifiedStaticTypeRef();
					}
					break;
				case Dollar:
				case VarName:
					{
					State = 1585; keyedVariable();
					}
					break;
				case SingleQuoteString:
				case DoubleQuote:
				case StartNowDoc:
				case StartHereDoc:
					{
					State = 1586; @string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1589; Match(DoubleColon);
				State = 1592;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Abstract:
				case Array:
				case As:
				case BinaryCast:
				case BoolType:
				case BooleanConstant:
				case Break:
				case Callable:
				case Case:
				case Catch:
				case Class:
				case Clone:
				case Const:
				case Continue:
				case Declare:
				case Default:
				case Do:
				case DoubleCast:
				case DoubleType:
				case Echo:
				case Else:
				case ElseIf:
				case Empty:
				case EndDeclare:
				case EndFor:
				case EndForeach:
				case EndIf:
				case EndSwitch:
				case EndWhile:
				case Eval:
				case Exit:
				case Extends:
				case Final:
				case Finally:
				case FloatCast:
				case For:
				case Foreach:
				case Function:
				case Global:
				case Goto:
				case If:
				case Implements:
				case Import:
				case Include:
				case IncludeOnce:
				case InstanceOf:
				case InsteadOf:
				case Int8Cast:
				case Int16Cast:
				case Int64Type:
				case IntType:
				case Interface:
				case IsSet:
				case List:
				case LogicalAnd:
				case LogicalOr:
				case LogicalXor:
				case Namespace:
				case New:
				case Null:
				case ObjectType:
				case Parent_:
				case Partial:
				case Print:
				case Private:
				case Protected:
				case Public:
				case Require:
				case RequireOnce:
				case Resource:
				case Return:
				case Static:
				case StringType:
				case Switch:
				case Throw:
				case Trait:
				case Try:
				case Typeof:
				case UintCast:
				case UnicodeCast:
				case Unset:
				case Use:
				case Var:
				case While:
				case Yield:
				case From:
				case Get:
				case Set:
				case Call:
				case CallStatic:
				case Constructor:
				case Destruct:
				case Wakeup:
				case Sleep:
				case Autoload:
				case IsSet__:
				case Unset__:
				case ToString__:
				case Invoke:
				case SetState:
				case Clone__:
				case DebugInfo:
				case Namespace__:
				case Class__:
				case Traic__:
				case Function__:
				case Method__:
				case Line__:
				case File__:
				case Dir__:
				case Label:
					{
					State = 1590; identifier();
					}
					break;
				case Dollar:
				case VarName:
					{
					State = 1591; keyedVariable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringConstantContext : ParserRuleContext {
		public ITerminalNode Label() { return GetToken(PhpParser.Label, 0); }
		public StringConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterStringConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitStringConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringConstantContext stringConstant() {
		StringConstantContext _localctx = new StringConstantContext(Context, State);
		EnterRule(_localctx, 222, RULE_stringConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1596; Match(Label);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode StartHereDoc() { return GetToken(PhpParser.StartHereDoc, 0); }
		public ITerminalNode[] HereDocText() { return GetTokens(PhpParser.HereDocText); }
		public ITerminalNode HereDocText(int i) {
			return GetToken(PhpParser.HereDocText, i);
		}
		public ITerminalNode StartNowDoc() { return GetToken(PhpParser.StartNowDoc, 0); }
		public ITerminalNode SingleQuoteString() { return GetToken(PhpParser.SingleQuoteString, 0); }
		public ITerminalNode[] DoubleQuote() { return GetTokens(PhpParser.DoubleQuote); }
		public ITerminalNode DoubleQuote(int i) {
			return GetToken(PhpParser.DoubleQuote, i);
		}
		public InterpolatedStringPartContext[] interpolatedStringPart() {
			return GetRuleContexts<InterpolatedStringPartContext>();
		}
		public InterpolatedStringPartContext interpolatedStringPart(int i) {
			return GetRuleContext<InterpolatedStringPartContext>(i);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 224, RULE_string);
		try {
			int _alt;
			State = 1619;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StartHereDoc:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1598; Match(StartHereDoc);
				State = 1600;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1599; Match(HereDocText);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1602;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,187,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case StartNowDoc:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1604; Match(StartNowDoc);
				State = 1606;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1605; Match(HereDocText);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1608;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,188,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case SingleQuoteString:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1610; Match(SingleQuoteString);
				}
				break;
			case DoubleQuote:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1611; Match(DoubleQuote);
				State = 1615;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,189,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1612; interpolatedStringPart();
						}
						} 
					}
					State = 1617;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,189,Context);
				}
				State = 1618; Match(DoubleQuote);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolatedStringPartContext : ParserRuleContext {
		public ITerminalNode StringPart() { return GetToken(PhpParser.StringPart, 0); }
		public ITerminalNode UnicodeEscape() { return GetToken(PhpParser.UnicodeEscape, 0); }
		public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		public InterpolatedStringPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolatedStringPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterInterpolatedStringPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitInterpolatedStringPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolatedStringPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterpolatedStringPartContext interpolatedStringPart() {
		InterpolatedStringPartContext _localctx = new InterpolatedStringPartContext(Context, State);
		EnterRule(_localctx, 226, RULE_interpolatedStringPart);
		try {
			State = 1624;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringPart:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1621; Match(StringPart);
				}
				break;
			case UnicodeEscape:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1622; Match(UnicodeEscape);
				}
				break;
			case Abstract:
			case Array:
			case As:
			case BinaryCast:
			case BoolType:
			case BooleanConstant:
			case Break:
			case Callable:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Declare:
			case Default:
			case Do:
			case DoubleCast:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case EndDeclare:
			case EndFor:
			case EndForeach:
			case EndIf:
			case EndSwitch:
			case EndWhile:
			case Eval:
			case Exit:
			case Extends:
			case Final:
			case Finally:
			case FloatCast:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Import:
			case Include:
			case IncludeOnce:
			case InstanceOf:
			case InsteadOf:
			case Int8Cast:
			case Int16Cast:
			case Int64Type:
			case IntType:
			case Interface:
			case IsSet:
			case List:
			case LogicalAnd:
			case LogicalOr:
			case LogicalXor:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Parent_:
			case Partial:
			case Print:
			case Private:
			case Protected:
			case Public:
			case Require:
			case RequireOnce:
			case Resource:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Trait:
			case Try:
			case Typeof:
			case UintCast:
			case UnicodeCast:
			case Unset:
			case Use:
			case Var:
			case While:
			case Yield:
			case From:
			case Get:
			case Set:
			case Call:
			case CallStatic:
			case Constructor:
			case Destruct:
			case Wakeup:
			case Sleep:
			case Autoload:
			case IsSet__:
			case Unset__:
			case ToString__:
			case Invoke:
			case SetState:
			case Clone__:
			case DebugInfo:
			case Namespace__:
			case Class__:
			case Traic__:
			case Function__:
			case Method__:
			case Line__:
			case File__:
			case Dir__:
			case NamespaceSeparator:
			case Dollar:
			case OpenRoundBracket:
			case VarName:
			case Label:
			case SingleQuoteString:
			case DoubleQuote:
			case StartNowDoc:
			case StartHereDoc:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1623; chain();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainListContext : ParserRuleContext {
		public ChainContext[] chain() {
			return GetRuleContexts<ChainContext>();
		}
		public ChainContext chain(int i) {
			return GetRuleContext<ChainContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public ChainListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterChainList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitChainList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainListContext chainList() {
		ChainListContext _localctx = new ChainListContext(Context, State);
		EnterRule(_localctx, 228, RULE_chainList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1626; chain();
			State = 1631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1627; Match(Comma);
				State = 1628; chain();
				}
				}
				State = 1633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainContext : ParserRuleContext {
		public ChainOriginContext chainOrigin() {
			return GetRuleContext<ChainOriginContext>(0);
		}
		public MemberAccessContext[] memberAccess() {
			return GetRuleContexts<MemberAccessContext>();
		}
		public MemberAccessContext memberAccess(int i) {
			return GetRuleContext<MemberAccessContext>(i);
		}
		public ChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterChain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitChain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainContext chain() {
		ChainContext _localctx = new ChainContext(Context, State);
		EnterRule(_localctx, 230, RULE_chain);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1634; chainOrigin();
			State = 1638;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1635; memberAccess();
					}
					} 
				}
				State = 1640;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainOriginContext : ParserRuleContext {
		public ChainBaseContext chainBase() {
			return GetRuleContext<ChainBaseContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public NewExprContext newExpr() {
			return GetRuleContext<NewExprContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public ChainOriginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainOrigin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterChainOrigin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitChainOrigin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainOrigin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainOriginContext chainOrigin() {
		ChainOriginContext _localctx = new ChainOriginContext(Context, State);
		EnterRule(_localctx, 232, RULE_chainOrigin);
		try {
			State = 1647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1641; chainBase();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1642; functionCall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1643; Match(OpenRoundBracket);
				State = 1644; newExpr();
				State = 1645; Match(CloseRoundBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessContext : ParserRuleContext {
		public ITerminalNode ObjectOperator() { return GetToken(PhpParser.ObjectOperator, 0); }
		public KeyedFieldNameContext keyedFieldName() {
			return GetRuleContext<KeyedFieldNameContext>(0);
		}
		public ActualArgumentsContext actualArguments() {
			return GetRuleContext<ActualArgumentsContext>(0);
		}
		public MemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessContext memberAccess() {
		MemberAccessContext _localctx = new MemberAccessContext(Context, State);
		EnterRule(_localctx, 234, RULE_memberAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1649; Match(ObjectOperator);
			State = 1650; keyedFieldName();
			State = 1652;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				{
				State = 1651; actualArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallNameContext functionCallName() {
			return GetRuleContext<FunctionCallNameContext>(0);
		}
		public ActualArgumentsContext actualArguments() {
			return GetRuleContext<ActualArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 236, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1654; functionCallName();
			State = 1655; actualArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallNameContext : ParserRuleContext {
		public QualifiedNamespaceNameContext qualifiedNamespaceName() {
			return GetRuleContext<QualifiedNamespaceNameContext>(0);
		}
		public ClassConstantContext classConstant() {
			return GetRuleContext<ClassConstantContext>(0);
		}
		public ChainBaseContext chainBase() {
			return GetRuleContext<ChainBaseContext>(0);
		}
		public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public FunctionCallNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallNameContext functionCallName() {
		FunctionCallNameContext _localctx = new FunctionCallNameContext(Context, State);
		EnterRule(_localctx, 238, RULE_functionCallName);
		try {
			State = 1661;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1657; qualifiedNamespaceName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1658; classConstant();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1659; chainBase();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1660; parentheses();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualArgumentsContext : ParserRuleContext {
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public GenericDynamicArgsContext genericDynamicArgs() {
			return GetRuleContext<GenericDynamicArgsContext>(0);
		}
		public SquareCurlyExpressionContext[] squareCurlyExpression() {
			return GetRuleContexts<SquareCurlyExpressionContext>();
		}
		public SquareCurlyExpressionContext squareCurlyExpression(int i) {
			return GetRuleContext<SquareCurlyExpressionContext>(i);
		}
		public ActualArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterActualArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitActualArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualArgumentsContext actualArguments() {
		ActualArgumentsContext _localctx = new ActualArgumentsContext(Context, State);
		EnterRule(_localctx, 240, RULE_actualArguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1664;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Lgeneric) {
				{
				State = 1663; genericDynamicArgs();
				}
			}

			State = 1666; arguments();
			State = 1670;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,198,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1667; squareCurlyExpression();
					}
					} 
				}
				State = 1672;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,198,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainBaseContext : ParserRuleContext {
		public KeyedVariableContext[] keyedVariable() {
			return GetRuleContexts<KeyedVariableContext>();
		}
		public KeyedVariableContext keyedVariable(int i) {
			return GetRuleContext<KeyedVariableContext>(i);
		}
		public ITerminalNode DoubleColon() { return GetToken(PhpParser.DoubleColon, 0); }
		public QualifiedStaticTypeRefContext qualifiedStaticTypeRef() {
			return GetRuleContext<QualifiedStaticTypeRefContext>(0);
		}
		public ChainBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterChainBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitChainBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainBaseContext chainBase() {
		ChainBaseContext _localctx = new ChainBaseContext(Context, State);
		EnterRule(_localctx, 242, RULE_chainBase);
		try {
			State = 1682;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Dollar:
			case VarName:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1673; keyedVariable();
				State = 1676;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
				case 1:
					{
					State = 1674; Match(DoubleColon);
					State = 1675; keyedVariable();
					}
					break;
				}
				}
				break;
			case Abstract:
			case Array:
			case As:
			case BinaryCast:
			case BoolType:
			case BooleanConstant:
			case Break:
			case Callable:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Declare:
			case Default:
			case Do:
			case DoubleCast:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case EndDeclare:
			case EndFor:
			case EndForeach:
			case EndIf:
			case EndSwitch:
			case EndWhile:
			case Eval:
			case Exit:
			case Extends:
			case Final:
			case Finally:
			case FloatCast:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Import:
			case Include:
			case IncludeOnce:
			case InstanceOf:
			case InsteadOf:
			case Int8Cast:
			case Int16Cast:
			case Int64Type:
			case IntType:
			case Interface:
			case IsSet:
			case List:
			case LogicalAnd:
			case LogicalOr:
			case LogicalXor:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Parent_:
			case Partial:
			case Print:
			case Private:
			case Protected:
			case Public:
			case Require:
			case RequireOnce:
			case Resource:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Trait:
			case Try:
			case Typeof:
			case UintCast:
			case UnicodeCast:
			case Unset:
			case Use:
			case Var:
			case While:
			case Yield:
			case From:
			case Get:
			case Set:
			case Call:
			case CallStatic:
			case Constructor:
			case Destruct:
			case Wakeup:
			case Sleep:
			case Autoload:
			case IsSet__:
			case Unset__:
			case ToString__:
			case Invoke:
			case SetState:
			case Clone__:
			case DebugInfo:
			case Namespace__:
			case Class__:
			case Traic__:
			case Function__:
			case Method__:
			case Line__:
			case File__:
			case Dir__:
			case NamespaceSeparator:
			case Label:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1678; qualifiedStaticTypeRef();
				State = 1679; Match(DoubleColon);
				State = 1680; keyedVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyedFieldNameContext : ParserRuleContext {
		public KeyedSimpleFieldNameContext keyedSimpleFieldName() {
			return GetRuleContext<KeyedSimpleFieldNameContext>(0);
		}
		public KeyedVariableContext keyedVariable() {
			return GetRuleContext<KeyedVariableContext>(0);
		}
		public KeyedFieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyedFieldName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterKeyedFieldName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitKeyedFieldName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyedFieldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyedFieldNameContext keyedFieldName() {
		KeyedFieldNameContext _localctx = new KeyedFieldNameContext(Context, State);
		EnterRule(_localctx, 244, RULE_keyedFieldName);
		try {
			State = 1686;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Abstract:
			case Array:
			case As:
			case BinaryCast:
			case BoolType:
			case BooleanConstant:
			case Break:
			case Callable:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Declare:
			case Default:
			case Do:
			case DoubleCast:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case EndDeclare:
			case EndFor:
			case EndForeach:
			case EndIf:
			case EndSwitch:
			case EndWhile:
			case Eval:
			case Exit:
			case Extends:
			case Final:
			case Finally:
			case FloatCast:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Import:
			case Include:
			case IncludeOnce:
			case InstanceOf:
			case InsteadOf:
			case Int8Cast:
			case Int16Cast:
			case Int64Type:
			case IntType:
			case Interface:
			case IsSet:
			case List:
			case LogicalAnd:
			case LogicalOr:
			case LogicalXor:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Parent_:
			case Partial:
			case Print:
			case Private:
			case Protected:
			case Public:
			case Require:
			case RequireOnce:
			case Resource:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Trait:
			case Try:
			case Typeof:
			case UintCast:
			case UnicodeCast:
			case Unset:
			case Use:
			case Var:
			case While:
			case Yield:
			case From:
			case Get:
			case Set:
			case Call:
			case CallStatic:
			case Constructor:
			case Destruct:
			case Wakeup:
			case Sleep:
			case Autoload:
			case IsSet__:
			case Unset__:
			case ToString__:
			case Invoke:
			case SetState:
			case Clone__:
			case DebugInfo:
			case Namespace__:
			case Class__:
			case Traic__:
			case Function__:
			case Method__:
			case Line__:
			case File__:
			case Dir__:
			case OpenCurlyBracket:
			case Label:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1684; keyedSimpleFieldName();
				}
				break;
			case Dollar:
			case VarName:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1685; keyedVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyedSimpleFieldNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OpenCurlyBracket() { return GetToken(PhpParser.OpenCurlyBracket, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CloseCurlyBracket() { return GetToken(PhpParser.CloseCurlyBracket, 0); }
		public SquareCurlyExpressionContext[] squareCurlyExpression() {
			return GetRuleContexts<SquareCurlyExpressionContext>();
		}
		public SquareCurlyExpressionContext squareCurlyExpression(int i) {
			return GetRuleContext<SquareCurlyExpressionContext>(i);
		}
		public KeyedSimpleFieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyedSimpleFieldName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterKeyedSimpleFieldName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitKeyedSimpleFieldName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyedSimpleFieldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyedSimpleFieldNameContext keyedSimpleFieldName() {
		KeyedSimpleFieldNameContext _localctx = new KeyedSimpleFieldNameContext(Context, State);
		EnterRule(_localctx, 246, RULE_keyedSimpleFieldName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1693;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Abstract:
			case Array:
			case As:
			case BinaryCast:
			case BoolType:
			case BooleanConstant:
			case Break:
			case Callable:
			case Case:
			case Catch:
			case Class:
			case Clone:
			case Const:
			case Continue:
			case Declare:
			case Default:
			case Do:
			case DoubleCast:
			case DoubleType:
			case Echo:
			case Else:
			case ElseIf:
			case Empty:
			case EndDeclare:
			case EndFor:
			case EndForeach:
			case EndIf:
			case EndSwitch:
			case EndWhile:
			case Eval:
			case Exit:
			case Extends:
			case Final:
			case Finally:
			case FloatCast:
			case For:
			case Foreach:
			case Function:
			case Global:
			case Goto:
			case If:
			case Implements:
			case Import:
			case Include:
			case IncludeOnce:
			case InstanceOf:
			case InsteadOf:
			case Int8Cast:
			case Int16Cast:
			case Int64Type:
			case IntType:
			case Interface:
			case IsSet:
			case List:
			case LogicalAnd:
			case LogicalOr:
			case LogicalXor:
			case Namespace:
			case New:
			case Null:
			case ObjectType:
			case Parent_:
			case Partial:
			case Print:
			case Private:
			case Protected:
			case Public:
			case Require:
			case RequireOnce:
			case Resource:
			case Return:
			case Static:
			case StringType:
			case Switch:
			case Throw:
			case Trait:
			case Try:
			case Typeof:
			case UintCast:
			case UnicodeCast:
			case Unset:
			case Use:
			case Var:
			case While:
			case Yield:
			case From:
			case Get:
			case Set:
			case Call:
			case CallStatic:
			case Constructor:
			case Destruct:
			case Wakeup:
			case Sleep:
			case Autoload:
			case IsSet__:
			case Unset__:
			case ToString__:
			case Invoke:
			case SetState:
			case Clone__:
			case DebugInfo:
			case Namespace__:
			case Class__:
			case Traic__:
			case Function__:
			case Method__:
			case Line__:
			case File__:
			case Dir__:
			case Label:
				{
				State = 1688; identifier();
				}
				break;
			case OpenCurlyBracket:
				{
				State = 1689; Match(OpenCurlyBracket);
				State = 1690; expression(0);
				State = 1691; Match(CloseCurlyBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1698;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1695; squareCurlyExpression();
					}
					} 
				}
				State = 1700;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyedVariableContext : ParserRuleContext {
		public ITerminalNode VarName() { return GetToken(PhpParser.VarName, 0); }
		public ITerminalNode[] Dollar() { return GetTokens(PhpParser.Dollar); }
		public ITerminalNode Dollar(int i) {
			return GetToken(PhpParser.Dollar, i);
		}
		public ITerminalNode OpenCurlyBracket() { return GetToken(PhpParser.OpenCurlyBracket, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CloseCurlyBracket() { return GetToken(PhpParser.CloseCurlyBracket, 0); }
		public SquareCurlyExpressionContext[] squareCurlyExpression() {
			return GetRuleContexts<SquareCurlyExpressionContext>();
		}
		public SquareCurlyExpressionContext squareCurlyExpression(int i) {
			return GetRuleContext<SquareCurlyExpressionContext>(i);
		}
		public KeyedVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyedVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterKeyedVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitKeyedVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyedVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyedVariableContext keyedVariable() {
		KeyedVariableContext _localctx = new KeyedVariableContext(Context, State);
		EnterRule(_localctx, 248, RULE_keyedVariable);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1704;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1701; Match(Dollar);
					}
					} 
				}
				State = 1706;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
			}
			State = 1713;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VarName:
				{
				State = 1707; Match(VarName);
				}
				break;
			case Dollar:
				{
				State = 1708; Match(Dollar);
				State = 1709; Match(OpenCurlyBracket);
				State = 1710; expression(0);
				State = 1711; Match(CloseCurlyBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1718;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,206,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1715; squareCurlyExpression();
					}
					} 
				}
				State = 1720;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,206,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareCurlyExpressionContext : ParserRuleContext {
		public ITerminalNode OpenSquareBracket() { return GetToken(PhpParser.OpenSquareBracket, 0); }
		public ITerminalNode CloseSquareBracket() { return GetToken(PhpParser.CloseSquareBracket, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OpenCurlyBracket() { return GetToken(PhpParser.OpenCurlyBracket, 0); }
		public ITerminalNode CloseCurlyBracket() { return GetToken(PhpParser.CloseCurlyBracket, 0); }
		public SquareCurlyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squareCurlyExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterSquareCurlyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitSquareCurlyExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquareCurlyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareCurlyExpressionContext squareCurlyExpression() {
		SquareCurlyExpressionContext _localctx = new SquareCurlyExpressionContext(Context, State);
		EnterRule(_localctx, 250, RULE_squareCurlyExpression);
		int _la;
		try {
			State = 1730;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenSquareBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1721; Match(OpenSquareBracket);
				State = 1723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (LambdaFn - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)) | (1L << (Inc - 107)) | (1L << (Dec - 107)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (NamespaceSeparator - 187)) | (1L << (Bang - 187)) | (1L << (Plus - 187)) | (1L << (Minus - 187)) | (1L << (Tilde - 187)) | (1L << (SuppressWarnings - 187)) | (1L << (Dollar - 187)) | (1L << (OpenRoundBracket - 187)) | (1L << (OpenSquareBracket - 187)) | (1L << (VarName - 187)) | (1L << (Label - 187)) | (1L << (Octal - 187)) | (1L << (Decimal - 187)) | (1L << (Real - 187)) | (1L << (Hex - 187)) | (1L << (Binary - 187)) | (1L << (BackQuoteString - 187)) | (1L << (SingleQuoteString - 187)) | (1L << (DoubleQuote - 187)) | (1L << (StartNowDoc - 187)) | (1L << (StartHereDoc - 187)))) != 0)) {
					{
					State = 1722; expression(0);
					}
				}

				State = 1725; Match(CloseSquareBracket);
				}
				break;
			case OpenCurlyBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1726; Match(OpenCurlyBracket);
				State = 1727; expression(0);
				State = 1728; Match(CloseCurlyBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentListContext : ParserRuleContext {
		public AssignmentListElementContext[] assignmentListElement() {
			return GetRuleContexts<AssignmentListElementContext>();
		}
		public AssignmentListElementContext assignmentListElement(int i) {
			return GetRuleContext<AssignmentListElementContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(PhpParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(PhpParser.Comma, i);
		}
		public AssignmentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterAssignmentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitAssignmentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentListContext assignmentList() {
		AssignmentListContext _localctx = new AssignmentListContext(Context, State);
		EnterRule(_localctx, 252, RULE_assignmentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (LambdaFn - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)) | (1L << (Inc - 107)) | (1L << (Dec - 107)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (NamespaceSeparator - 187)) | (1L << (Ampersand - 187)) | (1L << (Bang - 187)) | (1L << (Plus - 187)) | (1L << (Minus - 187)) | (1L << (Tilde - 187)) | (1L << (SuppressWarnings - 187)) | (1L << (Dollar - 187)) | (1L << (OpenRoundBracket - 187)) | (1L << (OpenSquareBracket - 187)) | (1L << (VarName - 187)) | (1L << (Label - 187)) | (1L << (Octal - 187)) | (1L << (Decimal - 187)) | (1L << (Real - 187)) | (1L << (Hex - 187)) | (1L << (Binary - 187)) | (1L << (BackQuoteString - 187)) | (1L << (SingleQuoteString - 187)) | (1L << (DoubleQuote - 187)) | (1L << (StartNowDoc - 187)) | (1L << (StartHereDoc - 187)))) != 0)) {
				{
				State = 1732; assignmentListElement();
				}
			}

			State = 1741;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1735; Match(Comma);
				State = 1737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (LambdaFn - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)) | (1L << (Inc - 107)) | (1L << (Dec - 107)))) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (NamespaceSeparator - 187)) | (1L << (Ampersand - 187)) | (1L << (Bang - 187)) | (1L << (Plus - 187)) | (1L << (Minus - 187)) | (1L << (Tilde - 187)) | (1L << (SuppressWarnings - 187)) | (1L << (Dollar - 187)) | (1L << (OpenRoundBracket - 187)) | (1L << (OpenSquareBracket - 187)) | (1L << (VarName - 187)) | (1L << (Label - 187)) | (1L << (Octal - 187)) | (1L << (Decimal - 187)) | (1L << (Real - 187)) | (1L << (Hex - 187)) | (1L << (Binary - 187)) | (1L << (BackQuoteString - 187)) | (1L << (SingleQuoteString - 187)) | (1L << (DoubleQuote - 187)) | (1L << (StartNowDoc - 187)) | (1L << (StartHereDoc - 187)))) != 0)) {
					{
					State = 1736; assignmentListElement();
					}
				}

				}
				}
				State = 1743;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentListElementContext : ParserRuleContext {
		public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		public ITerminalNode List() { return GetToken(PhpParser.List, 0); }
		public ITerminalNode OpenRoundBracket() { return GetToken(PhpParser.OpenRoundBracket, 0); }
		public AssignmentListContext assignmentList() {
			return GetRuleContext<AssignmentListContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(PhpParser.CloseRoundBracket, 0); }
		public ArrayItemContext arrayItem() {
			return GetRuleContext<ArrayItemContext>(0);
		}
		public AssignmentListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentListElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterAssignmentListElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitAssignmentListElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentListElementContext assignmentListElement() {
		AssignmentListElementContext _localctx = new AssignmentListElementContext(Context, State);
		EnterRule(_localctx, 254, RULE_assignmentListElement);
		try {
			State = 1751;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1744; chain();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1745; Match(List);
				State = 1746; Match(OpenRoundBracket);
				State = 1747; assignmentList();
				State = 1748; Match(CloseRoundBracket);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1750; arrayItem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public ITerminalNode Abstract() { return GetToken(PhpParser.Abstract, 0); }
		public ITerminalNode Final() { return GetToken(PhpParser.Final, 0); }
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 256, RULE_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1753;
			_la = TokenStream.LA(1);
			if ( !(_la==Abstract || _la==Final) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode Label() { return GetToken(PhpParser.Label, 0); }
		public ITerminalNode Abstract() { return GetToken(PhpParser.Abstract, 0); }
		public ITerminalNode Array() { return GetToken(PhpParser.Array, 0); }
		public ITerminalNode As() { return GetToken(PhpParser.As, 0); }
		public ITerminalNode BinaryCast() { return GetToken(PhpParser.BinaryCast, 0); }
		public ITerminalNode BoolType() { return GetToken(PhpParser.BoolType, 0); }
		public ITerminalNode BooleanConstant() { return GetToken(PhpParser.BooleanConstant, 0); }
		public ITerminalNode Break() { return GetToken(PhpParser.Break, 0); }
		public ITerminalNode Callable() { return GetToken(PhpParser.Callable, 0); }
		public ITerminalNode Case() { return GetToken(PhpParser.Case, 0); }
		public ITerminalNode Catch() { return GetToken(PhpParser.Catch, 0); }
		public ITerminalNode Class() { return GetToken(PhpParser.Class, 0); }
		public ITerminalNode Clone() { return GetToken(PhpParser.Clone, 0); }
		public ITerminalNode Const() { return GetToken(PhpParser.Const, 0); }
		public ITerminalNode Continue() { return GetToken(PhpParser.Continue, 0); }
		public ITerminalNode Declare() { return GetToken(PhpParser.Declare, 0); }
		public ITerminalNode Default() { return GetToken(PhpParser.Default, 0); }
		public ITerminalNode Do() { return GetToken(PhpParser.Do, 0); }
		public ITerminalNode DoubleCast() { return GetToken(PhpParser.DoubleCast, 0); }
		public ITerminalNode DoubleType() { return GetToken(PhpParser.DoubleType, 0); }
		public ITerminalNode Echo() { return GetToken(PhpParser.Echo, 0); }
		public ITerminalNode Else() { return GetToken(PhpParser.Else, 0); }
		public ITerminalNode ElseIf() { return GetToken(PhpParser.ElseIf, 0); }
		public ITerminalNode Empty() { return GetToken(PhpParser.Empty, 0); }
		public ITerminalNode EndDeclare() { return GetToken(PhpParser.EndDeclare, 0); }
		public ITerminalNode EndFor() { return GetToken(PhpParser.EndFor, 0); }
		public ITerminalNode EndForeach() { return GetToken(PhpParser.EndForeach, 0); }
		public ITerminalNode EndIf() { return GetToken(PhpParser.EndIf, 0); }
		public ITerminalNode EndSwitch() { return GetToken(PhpParser.EndSwitch, 0); }
		public ITerminalNode EndWhile() { return GetToken(PhpParser.EndWhile, 0); }
		public ITerminalNode Eval() { return GetToken(PhpParser.Eval, 0); }
		public ITerminalNode Exit() { return GetToken(PhpParser.Exit, 0); }
		public ITerminalNode Extends() { return GetToken(PhpParser.Extends, 0); }
		public ITerminalNode Final() { return GetToken(PhpParser.Final, 0); }
		public ITerminalNode Finally() { return GetToken(PhpParser.Finally, 0); }
		public ITerminalNode FloatCast() { return GetToken(PhpParser.FloatCast, 0); }
		public ITerminalNode For() { return GetToken(PhpParser.For, 0); }
		public ITerminalNode Foreach() { return GetToken(PhpParser.Foreach, 0); }
		public ITerminalNode Function() { return GetToken(PhpParser.Function, 0); }
		public ITerminalNode Global() { return GetToken(PhpParser.Global, 0); }
		public ITerminalNode Goto() { return GetToken(PhpParser.Goto, 0); }
		public ITerminalNode If() { return GetToken(PhpParser.If, 0); }
		public ITerminalNode Implements() { return GetToken(PhpParser.Implements, 0); }
		public ITerminalNode Import() { return GetToken(PhpParser.Import, 0); }
		public ITerminalNode Include() { return GetToken(PhpParser.Include, 0); }
		public ITerminalNode IncludeOnce() { return GetToken(PhpParser.IncludeOnce, 0); }
		public ITerminalNode InstanceOf() { return GetToken(PhpParser.InstanceOf, 0); }
		public ITerminalNode InsteadOf() { return GetToken(PhpParser.InsteadOf, 0); }
		public ITerminalNode Int16Cast() { return GetToken(PhpParser.Int16Cast, 0); }
		public ITerminalNode Int64Type() { return GetToken(PhpParser.Int64Type, 0); }
		public ITerminalNode Int8Cast() { return GetToken(PhpParser.Int8Cast, 0); }
		public ITerminalNode Interface() { return GetToken(PhpParser.Interface, 0); }
		public ITerminalNode IntType() { return GetToken(PhpParser.IntType, 0); }
		public ITerminalNode IsSet() { return GetToken(PhpParser.IsSet, 0); }
		public ITerminalNode List() { return GetToken(PhpParser.List, 0); }
		public ITerminalNode LogicalAnd() { return GetToken(PhpParser.LogicalAnd, 0); }
		public ITerminalNode LogicalOr() { return GetToken(PhpParser.LogicalOr, 0); }
		public ITerminalNode LogicalXor() { return GetToken(PhpParser.LogicalXor, 0); }
		public ITerminalNode Namespace() { return GetToken(PhpParser.Namespace, 0); }
		public ITerminalNode New() { return GetToken(PhpParser.New, 0); }
		public ITerminalNode Null() { return GetToken(PhpParser.Null, 0); }
		public ITerminalNode ObjectType() { return GetToken(PhpParser.ObjectType, 0); }
		public ITerminalNode Parent_() { return GetToken(PhpParser.Parent_, 0); }
		public ITerminalNode Partial() { return GetToken(PhpParser.Partial, 0); }
		public ITerminalNode Print() { return GetToken(PhpParser.Print, 0); }
		public ITerminalNode Private() { return GetToken(PhpParser.Private, 0); }
		public ITerminalNode Protected() { return GetToken(PhpParser.Protected, 0); }
		public ITerminalNode Public() { return GetToken(PhpParser.Public, 0); }
		public ITerminalNode Require() { return GetToken(PhpParser.Require, 0); }
		public ITerminalNode RequireOnce() { return GetToken(PhpParser.RequireOnce, 0); }
		public ITerminalNode Resource() { return GetToken(PhpParser.Resource, 0); }
		public ITerminalNode Return() { return GetToken(PhpParser.Return, 0); }
		public ITerminalNode Static() { return GetToken(PhpParser.Static, 0); }
		public ITerminalNode StringType() { return GetToken(PhpParser.StringType, 0); }
		public ITerminalNode Switch() { return GetToken(PhpParser.Switch, 0); }
		public ITerminalNode Throw() { return GetToken(PhpParser.Throw, 0); }
		public ITerminalNode Trait() { return GetToken(PhpParser.Trait, 0); }
		public ITerminalNode Try() { return GetToken(PhpParser.Try, 0); }
		public ITerminalNode Typeof() { return GetToken(PhpParser.Typeof, 0); }
		public ITerminalNode UintCast() { return GetToken(PhpParser.UintCast, 0); }
		public ITerminalNode UnicodeCast() { return GetToken(PhpParser.UnicodeCast, 0); }
		public ITerminalNode Unset() { return GetToken(PhpParser.Unset, 0); }
		public ITerminalNode Use() { return GetToken(PhpParser.Use, 0); }
		public ITerminalNode Var() { return GetToken(PhpParser.Var, 0); }
		public ITerminalNode While() { return GetToken(PhpParser.While, 0); }
		public ITerminalNode Yield() { return GetToken(PhpParser.Yield, 0); }
		public ITerminalNode From() { return GetToken(PhpParser.From, 0); }
		public ITerminalNode Get() { return GetToken(PhpParser.Get, 0); }
		public ITerminalNode Set() { return GetToken(PhpParser.Set, 0); }
		public ITerminalNode Call() { return GetToken(PhpParser.Call, 0); }
		public ITerminalNode CallStatic() { return GetToken(PhpParser.CallStatic, 0); }
		public ITerminalNode Constructor() { return GetToken(PhpParser.Constructor, 0); }
		public ITerminalNode Destruct() { return GetToken(PhpParser.Destruct, 0); }
		public ITerminalNode Wakeup() { return GetToken(PhpParser.Wakeup, 0); }
		public ITerminalNode Sleep() { return GetToken(PhpParser.Sleep, 0); }
		public ITerminalNode Autoload() { return GetToken(PhpParser.Autoload, 0); }
		public ITerminalNode IsSet__() { return GetToken(PhpParser.IsSet__, 0); }
		public ITerminalNode Unset__() { return GetToken(PhpParser.Unset__, 0); }
		public ITerminalNode ToString__() { return GetToken(PhpParser.ToString__, 0); }
		public ITerminalNode Invoke() { return GetToken(PhpParser.Invoke, 0); }
		public ITerminalNode SetState() { return GetToken(PhpParser.SetState, 0); }
		public ITerminalNode Clone__() { return GetToken(PhpParser.Clone__, 0); }
		public ITerminalNode DebugInfo() { return GetToken(PhpParser.DebugInfo, 0); }
		public ITerminalNode Namespace__() { return GetToken(PhpParser.Namespace__, 0); }
		public ITerminalNode Class__() { return GetToken(PhpParser.Class__, 0); }
		public ITerminalNode Traic__() { return GetToken(PhpParser.Traic__, 0); }
		public ITerminalNode Function__() { return GetToken(PhpParser.Function__, 0); }
		public ITerminalNode Method__() { return GetToken(PhpParser.Method__, 0); }
		public ITerminalNode Line__() { return GetToken(PhpParser.Line__, 0); }
		public ITerminalNode File__() { return GetToken(PhpParser.File__, 0); }
		public ITerminalNode Dir__() { return GetToken(PhpParser.Dir__, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 258, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1755;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (Abstract - 43)) | (1L << (Array - 43)) | (1L << (As - 43)) | (1L << (BinaryCast - 43)) | (1L << (BoolType - 43)) | (1L << (BooleanConstant - 43)) | (1L << (Break - 43)) | (1L << (Callable - 43)) | (1L << (Case - 43)) | (1L << (Catch - 43)) | (1L << (Class - 43)) | (1L << (Clone - 43)) | (1L << (Const - 43)) | (1L << (Continue - 43)) | (1L << (Declare - 43)) | (1L << (Default - 43)) | (1L << (Do - 43)) | (1L << (DoubleCast - 43)) | (1L << (DoubleType - 43)) | (1L << (Echo - 43)) | (1L << (Else - 43)) | (1L << (ElseIf - 43)) | (1L << (Empty - 43)) | (1L << (EndDeclare - 43)) | (1L << (EndFor - 43)) | (1L << (EndForeach - 43)) | (1L << (EndIf - 43)) | (1L << (EndSwitch - 43)) | (1L << (EndWhile - 43)) | (1L << (Eval - 43)) | (1L << (Exit - 43)) | (1L << (Extends - 43)) | (1L << (Final - 43)) | (1L << (Finally - 43)) | (1L << (FloatCast - 43)) | (1L << (For - 43)) | (1L << (Foreach - 43)) | (1L << (Function - 43)) | (1L << (Global - 43)) | (1L << (Goto - 43)) | (1L << (If - 43)) | (1L << (Implements - 43)) | (1L << (Import - 43)) | (1L << (Include - 43)) | (1L << (IncludeOnce - 43)) | (1L << (InstanceOf - 43)) | (1L << (InsteadOf - 43)) | (1L << (Int8Cast - 43)) | (1L << (Int16Cast - 43)) | (1L << (Int64Type - 43)) | (1L << (IntType - 43)) | (1L << (Interface - 43)) | (1L << (IsSet - 43)) | (1L << (List - 43)) | (1L << (LogicalAnd - 43)) | (1L << (LogicalOr - 43)) | (1L << (LogicalXor - 43)) | (1L << (Namespace - 43)) | (1L << (New - 43)) | (1L << (Null - 43)) | (1L << (ObjectType - 43)) | (1L << (Parent_ - 43)) | (1L << (Partial - 43)) | (1L << (Print - 43)))) != 0) || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (Private - 107)) | (1L << (Protected - 107)) | (1L << (Public - 107)) | (1L << (Require - 107)) | (1L << (RequireOnce - 107)) | (1L << (Resource - 107)) | (1L << (Return - 107)) | (1L << (Static - 107)) | (1L << (StringType - 107)) | (1L << (Switch - 107)) | (1L << (Throw - 107)) | (1L << (Trait - 107)) | (1L << (Try - 107)) | (1L << (Typeof - 107)) | (1L << (UintCast - 107)) | (1L << (UnicodeCast - 107)) | (1L << (Unset - 107)) | (1L << (Use - 107)) | (1L << (Var - 107)) | (1L << (While - 107)) | (1L << (Yield - 107)) | (1L << (From - 107)) | (1L << (Get - 107)) | (1L << (Set - 107)) | (1L << (Call - 107)) | (1L << (CallStatic - 107)) | (1L << (Constructor - 107)) | (1L << (Destruct - 107)) | (1L << (Wakeup - 107)) | (1L << (Sleep - 107)) | (1L << (Autoload - 107)) | (1L << (IsSet__ - 107)) | (1L << (Unset__ - 107)) | (1L << (ToString__ - 107)) | (1L << (Invoke - 107)) | (1L << (SetState - 107)) | (1L << (Clone__ - 107)) | (1L << (DebugInfo - 107)) | (1L << (Namespace__ - 107)) | (1L << (Class__ - 107)) | (1L << (Traic__ - 107)) | (1L << (Function__ - 107)) | (1L << (Method__ - 107)) | (1L << (Line__ - 107)) | (1L << (File__ - 107)) | (1L << (Dir__ - 107)))) != 0) || _la==Label) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberModifierContext : ParserRuleContext {
		public ITerminalNode Public() { return GetToken(PhpParser.Public, 0); }
		public ITerminalNode Protected() { return GetToken(PhpParser.Protected, 0); }
		public ITerminalNode Private() { return GetToken(PhpParser.Private, 0); }
		public ITerminalNode Static() { return GetToken(PhpParser.Static, 0); }
		public ITerminalNode Abstract() { return GetToken(PhpParser.Abstract, 0); }
		public ITerminalNode Final() { return GetToken(PhpParser.Final, 0); }
		public MemberModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterMemberModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitMemberModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberModifierContext memberModifier() {
		MemberModifierContext _localctx = new MemberModifierContext(Context, State);
		EnterRule(_localctx, 260, RULE_memberModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1757;
			_la = TokenStream.LA(1);
			if ( !(_la==Abstract || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Final - 75)) | (1L << (Private - 75)) | (1L << (Protected - 75)) | (1L << (Public - 75)) | (1L << (Static - 75)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MagicConstantContext : ParserRuleContext {
		public ITerminalNode Namespace__() { return GetToken(PhpParser.Namespace__, 0); }
		public ITerminalNode Class__() { return GetToken(PhpParser.Class__, 0); }
		public ITerminalNode Traic__() { return GetToken(PhpParser.Traic__, 0); }
		public ITerminalNode Function__() { return GetToken(PhpParser.Function__, 0); }
		public ITerminalNode Method__() { return GetToken(PhpParser.Method__, 0); }
		public ITerminalNode Line__() { return GetToken(PhpParser.Line__, 0); }
		public ITerminalNode File__() { return GetToken(PhpParser.File__, 0); }
		public ITerminalNode Dir__() { return GetToken(PhpParser.Dir__, 0); }
		public MagicConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_magicConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterMagicConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitMagicConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMagicConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MagicConstantContext magicConstant() {
		MagicConstantContext _localctx = new MagicConstantContext(Context, State);
		EnterRule(_localctx, 262, RULE_magicConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1759;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 146)) & ~0x3f) == 0 && ((1L << (_la - 146)) & ((1L << (Namespace__ - 146)) | (1L << (Class__ - 146)) | (1L << (Traic__ - 146)) | (1L << (Function__ - 146)) | (1L << (Method__ - 146)) | (1L << (Line__ - 146)) | (1L << (File__ - 146)) | (1L << (Dir__ - 146)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MagicMethodContext : ParserRuleContext {
		public ITerminalNode Get() { return GetToken(PhpParser.Get, 0); }
		public ITerminalNode Set() { return GetToken(PhpParser.Set, 0); }
		public ITerminalNode Call() { return GetToken(PhpParser.Call, 0); }
		public ITerminalNode CallStatic() { return GetToken(PhpParser.CallStatic, 0); }
		public ITerminalNode Constructor() { return GetToken(PhpParser.Constructor, 0); }
		public ITerminalNode Destruct() { return GetToken(PhpParser.Destruct, 0); }
		public ITerminalNode Wakeup() { return GetToken(PhpParser.Wakeup, 0); }
		public ITerminalNode Sleep() { return GetToken(PhpParser.Sleep, 0); }
		public ITerminalNode Autoload() { return GetToken(PhpParser.Autoload, 0); }
		public ITerminalNode IsSet__() { return GetToken(PhpParser.IsSet__, 0); }
		public ITerminalNode Unset__() { return GetToken(PhpParser.Unset__, 0); }
		public ITerminalNode ToString__() { return GetToken(PhpParser.ToString__, 0); }
		public ITerminalNode Invoke() { return GetToken(PhpParser.Invoke, 0); }
		public ITerminalNode SetState() { return GetToken(PhpParser.SetState, 0); }
		public ITerminalNode Clone__() { return GetToken(PhpParser.Clone__, 0); }
		public ITerminalNode DebugInfo() { return GetToken(PhpParser.DebugInfo, 0); }
		public MagicMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_magicMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterMagicMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitMagicMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMagicMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MagicMethodContext magicMethod() {
		MagicMethodContext _localctx = new MagicMethodContext(Context, State);
		EnterRule(_localctx, 264, RULE_magicMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1761;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (Get - 130)) | (1L << (Set - 130)) | (1L << (Call - 130)) | (1L << (CallStatic - 130)) | (1L << (Constructor - 130)) | (1L << (Destruct - 130)) | (1L << (Wakeup - 130)) | (1L << (Sleep - 130)) | (1L << (Autoload - 130)) | (1L << (IsSet__ - 130)) | (1L << (Unset__ - 130)) | (1L << (ToString__ - 130)) | (1L << (Invoke - 130)) | (1L << (SetState - 130)) | (1L << (Clone__ - 130)) | (1L << (DebugInfo - 130)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode BoolType() { return GetToken(PhpParser.BoolType, 0); }
		public ITerminalNode IntType() { return GetToken(PhpParser.IntType, 0); }
		public ITerminalNode Int64Type() { return GetToken(PhpParser.Int64Type, 0); }
		public ITerminalNode DoubleType() { return GetToken(PhpParser.DoubleType, 0); }
		public ITerminalNode StringType() { return GetToken(PhpParser.StringType, 0); }
		public ITerminalNode Resource() { return GetToken(PhpParser.Resource, 0); }
		public ITerminalNode ObjectType() { return GetToken(PhpParser.ObjectType, 0); }
		public ITerminalNode Array() { return GetToken(PhpParser.Array, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 266, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1763;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Array) | (1L << BoolType) | (1L << DoubleType))) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (Int64Type - 92)) | (1L << (IntType - 92)) | (1L << (ObjectType - 92)) | (1L << (Resource - 92)) | (1L << (StringType - 92)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastOperationContext : ParserRuleContext {
		public ITerminalNode BoolType() { return GetToken(PhpParser.BoolType, 0); }
		public ITerminalNode Int8Cast() { return GetToken(PhpParser.Int8Cast, 0); }
		public ITerminalNode Int16Cast() { return GetToken(PhpParser.Int16Cast, 0); }
		public ITerminalNode IntType() { return GetToken(PhpParser.IntType, 0); }
		public ITerminalNode Int64Type() { return GetToken(PhpParser.Int64Type, 0); }
		public ITerminalNode UintCast() { return GetToken(PhpParser.UintCast, 0); }
		public ITerminalNode DoubleCast() { return GetToken(PhpParser.DoubleCast, 0); }
		public ITerminalNode DoubleType() { return GetToken(PhpParser.DoubleType, 0); }
		public ITerminalNode FloatCast() { return GetToken(PhpParser.FloatCast, 0); }
		public ITerminalNode StringType() { return GetToken(PhpParser.StringType, 0); }
		public ITerminalNode BinaryCast() { return GetToken(PhpParser.BinaryCast, 0); }
		public ITerminalNode UnicodeCast() { return GetToken(PhpParser.UnicodeCast, 0); }
		public ITerminalNode Array() { return GetToken(PhpParser.Array, 0); }
		public ITerminalNode ObjectType() { return GetToken(PhpParser.ObjectType, 0); }
		public ITerminalNode Resource() { return GetToken(PhpParser.Resource, 0); }
		public ITerminalNode Unset() { return GetToken(PhpParser.Unset, 0); }
		public CastOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.EnterCastOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPhpParserListener typedListener = listener as IPhpParserListener;
			if (typedListener != null) typedListener.ExitCastOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPhpParserVisitor<TResult> typedVisitor = visitor as IPhpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastOperationContext castOperation() {
		CastOperationContext _localctx = new CastOperationContext(Context, State);
		EnterRule(_localctx, 268, RULE_castOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1765;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Array) | (1L << BinaryCast) | (1L << BoolType) | (1L << DoubleCast) | (1L << DoubleType))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (FloatCast - 77)) | (1L << (Int8Cast - 77)) | (1L << (Int16Cast - 77)) | (1L << (Int64Type - 77)) | (1L << (IntType - 77)) | (1L << (ObjectType - 77)) | (1L << (Resource - 77)) | (1L << (StringType - 77)) | (1L << (UintCast - 77)) | (1L << (UnicodeCast - 77)) | (1L << (Unset - 77)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 83: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 18);
		case 2: return Precpred(Context, 17);
		case 3: return Precpred(Context, 16);
		case 4: return Precpred(Context, 15);
		case 5: return Precpred(Context, 14);
		case 6: return Precpred(Context, 13);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 11);
		case 9: return Precpred(Context, 10);
		case 10: return Precpred(Context, 9);
		case 11: return Precpred(Context, 8);
		case 12: return Precpred(Context, 7);
		case 13: return Precpred(Context, 6);
		case 14: return Precpred(Context, 3);
		case 15: return Precpred(Context, 2);
		case 16: return Precpred(Context, 1);
		case 17: return Precpred(Context, 19);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xEF', '\x6EA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x3', '\x2', '\x5', '\x2', '\x112', '\n', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x115', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x118', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x11F', '\n', '\x3', '\x3', 
		'\x4', '\x6', '\x4', '\x122', '\n', '\x4', '\r', '\x4', '\xE', '\x4', 
		'\x123', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x13C', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x13F', '\v', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x142', '\n', '\x5', '\x3', '\x6', '\x6', '\x6', '\x145', '\n', 
		'\x6', '\r', '\x6', '\xE', '\x6', '\x146', '\x3', '\a', '\a', '\a', '\x14A', 
		'\n', '\a', '\f', '\a', '\xE', '\a', '\x14D', '\v', '\a', '\x3', '\a', 
		'\x6', '\a', '\x150', '\n', '\a', '\r', '\a', '\xE', '\a', '\x151', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\x15F', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x163', 
		'\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x5', 
		'\v', '\x169', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '\x16E', '\n', '\v', '\x3', '\v', '\a', '\v', '\x171', '\n', '\v', 
		'\f', '\v', '\xE', '\v', '\x174', '\v', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\x17A', '\n', '\r', '\x3', '\r', 
		'\x3', '\r', '\a', '\r', '\x17E', '\n', '\r', '\f', '\r', '\xE', '\r', 
		'\x181', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\x187', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x18E', '\n', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x193', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x197', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x19E', '\n', '\xF', '\x3', '\xF', '\x5', '\xF', '\x1A1', '\n', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x1A7', '\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x1AA', 
		'\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x1AD', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x1B2', '\n', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x1B6', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x1BA', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x1BF', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x1C3', '\n', '\x10', '\x5', '\x10', 
		'\x1C5', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x1C9', 
		'\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x1CC', '\v', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\a', '\x12', '\x1D5', '\n', '\x12', '\f', '\x12', 
		'\xE', '\x12', '\x1D8', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x1E8', '\n', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x1ED', '\n', '\x14', '\f', 
		'\x14', '\xE', '\x14', '\x1F0', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\a', '\x15', '\x1F5', '\n', '\x15', '\f', '\x15', '\xE', 
		'\x15', '\x1F8', '\v', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x202', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\a', '\x18', '\x208', '\n', '\x18', '\f', '\x18', 
		'\xE', '\x18', '\x20B', '\v', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x19', '\a', '\x19', '\x210', '\n', '\x19', '\f', '\x19', '\xE', '\x19', 
		'\x213', '\v', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x219', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\a', '\x1A', '\x21E', '\n', '\x1A', '\f', '\x1A', '\xE', 
		'\x1A', '\x221', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x237', '\n', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x23C', '\n', '\x1C', 
		'\f', '\x1C', '\xE', '\x1C', '\x23F', '\v', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\a', '\x1D', '\x244', '\n', '\x1D', '\f', '\x1D', 
		'\xE', '\x1D', '\x247', '\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\a', '\x1F', '\x24E', '\n', '\x1F', 
		'\f', '\x1F', '\xE', '\x1F', '\x251', '\v', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x5', ' ', '\x256', '\n', ' ', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x5', '!', '\x273', '\n', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\a', '$', '\x27F', '\n', '$', '\f', '$', '\xE', 
		'$', '\x282', '\v', '$', '\x3', '$', '\x5', '$', '\x285', '\n', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\a', '$', '\x28C', 
		'\n', '$', '\f', '$', '\xE', '$', '\x28F', '\v', '$', '\x3', '$', '\x5', 
		'$', '\x292', '\n', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', 
		'\x297', '\n', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x5', ')', '\x2B1', '\n', ')', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x5', '+', '\x2BC', '\n', '+', '\x3', '+', '\x3', '+', '\x5', 
		'+', '\x2C0', '\n', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x2C4', 
		'\n', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x5', '+', '\x2CD', '\n', '+', '\x3', ',', '\x3', 
		',', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x5', '.', '\x2D7', '\n', '.', '\x3', '.', '\a', '.', '\x2DA', '\n', 
		'.', '\f', '.', '\xE', '.', '\x2DD', '\v', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x5', '.', '\x2E2', '\n', '.', '\x3', '.', '\a', '.', '\x2E5', 
		'\n', '.', '\f', '.', '\xE', '.', '\x2E8', '\v', '.', '\x3', '.', '\x3', 
		'.', '\x5', '.', '\x2EC', '\n', '.', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x5', '/', '\x2F1', '\n', '/', '\x3', '/', '\x6', '/', '\x2F4', '\n', 
		'/', '\r', '/', '\xE', '/', '\x2F5', '\x3', '/', '\x3', '/', '\x3', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x2FC', '\n', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x302', '\n', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', 
		'\x308', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x31A', '\n', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x31F', '\n', 
		'\x35', '\x3', '\x35', '\x5', '\x35', '\x322', '\n', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x32C', '\n', '\x35', '\x3', 
		'\x35', '\x5', '\x35', '\x32F', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', 
		'\x33C', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x344', '\n', '\x35', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x6', '\x36', '\x349', '\n', 
		'\x36', '\r', '\x36', '\xE', '\x36', '\x34A', '\x3', '\x36', '\x5', '\x36', 
		'\x34E', '\n', '\x36', '\x3', '\x36', '\a', '\x36', '\x351', '\n', '\x36', 
		'\f', '\x36', '\xE', '\x36', '\x354', '\v', '\x36', '\x3', '\x36', '\x5', 
		'\x36', '\x357', '\n', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\a', '\x37', '\x35E', '\n', '\x37', '\f', 
		'\x37', '\xE', '\x37', '\x361', '\v', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x5', ';', '\x37C', '\n', ';', '\x3', '<', '\x6', '<', '\x37F', 
		'\n', '<', '\r', '<', '\xE', '<', '\x380', '\x3', '=', '\x3', '=', '\x5', 
		'=', '\x385', '\n', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\a', '>', 
		'\x38A', '\n', '>', '\f', '>', '\xE', '>', '\x38D', '\v', '>', '\x3', 
		'?', '\x5', '?', '\x390', '\n', '?', '\x3', '?', '\x3', '?', '\a', '?', 
		'\x394', '\n', '?', '\f', '?', '\xE', '?', '\x397', '\v', '?', '\x3', 
		'@', '\x3', '@', '\x5', '@', '\x39B', '\n', '@', '\x3', '@', '\x5', '@', 
		'\x39E', '\n', '@', '\x3', '@', '\x5', '@', '\x3A1', '\n', '@', '\x3', 
		'@', '\x5', '@', '\x3A4', '\n', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x3AB', '\n', '\x41', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\a', '\x42', '\x3B1', 
		'\n', '\x42', '\f', '\x42', '\xE', '\x42', '\x3B4', '\v', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', 
		'\x43', '\x3C0', '\n', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\a', '\x45', '\x3CA', '\n', '\x45', '\f', '\x45', '\xE', '\x45', '\x3CD', 
		'\v', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x5', '\x46', '\x3D4', '\n', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\a', '\x46', '\x3D9', '\n', '\x46', '\f', '\x46', 
		'\xE', '\x46', '\x3DC', '\v', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x5', '\x46', '\x3E2', '\n', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x5', '\x46', '\x3E6', '\n', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\a', '\x46', '\x3EB', '\n', '\x46', '\f', '\x46', 
		'\xE', '\x46', '\x3EE', '\v', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x5', '\x46', '\x3F4', '\n', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x5', '\x46', '\x3F8', '\n', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x5', '\x46', '\x3FC', '\n', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x402', '\n', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x5', '\x46', '\x40A', '\n', '\x46', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\a', 'G', '\x40F', '\n', 'G', '\f', 'G', '\xE', 'G', '\x412', 
		'\v', 'G', '\x3', 'G', '\x5', 'G', '\x415', '\n', 'G', '\x3', 'H', '\x3', 
		'H', '\x5', 'H', '\x419', '\n', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x5', 'J', '\x426', '\n', 'J', '\x3', 'J', '\x5', 
		'J', '\x429', '\n', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x5', 'K', '\x430', '\n', 'K', '\x3', 'K', '\x3', 'K', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x437', '\n', 'L', '\x3', 'M', 
		'\x3', 'M', '\x5', 'M', '\x43B', '\n', 'M', '\x3', 'N', '\x3', 'N', '\x5', 
		'N', '\x43F', '\n', 'N', '\x3', 'O', '\x6', 'O', '\x442', '\n', 'O', '\r', 
		'O', '\xE', 'O', '\x443', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x5', 'P', 
		'\x449', '\n', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\a', 'R', '\x454', 
		'\n', 'R', '\f', 'R', '\xE', 'R', '\x457', '\v', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\a', 'S', '\x45E', '\n', 'S', 
		'\f', 'S', '\xE', 'S', '\x461', '\v', 'S', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x5', 'T', '\x466', '\n', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x5', 'U', '\x4A5', '\n', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x5', 'U', '\x4B5', '\n', 'U', '\x5', 'U', 
		'\x4B7', '\n', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x5', 'U', '\x4DD', '\n', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\a', 'U', '\x4F3', '\n', 'U', '\f', 'U', '\xE', 'U', '\x4F6', '\v', 'U', 
		'\x3', 'V', '\x3', 'V', '\x5', 'V', '\x4FA', '\n', 'V', '\x3', 'W', '\x3', 
		'W', '\x3', 'W', '\x5', 'W', '\x4FF', '\n', 'W', '\x3', 'W', '\x3', 'W', 
		'\x3', 'W', '\x5', 'W', '\x504', '\n', 'W', '\x3', 'W', '\x5', 'W', '\x507', 
		'\n', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x5', 'W', 
		'\x50D', '\n', 'W', '\x3', 'X', '\x5', 'X', '\x510', '\n', 'X', '\x3', 
		'X', '\x3', 'X', '\x5', 'X', '\x514', '\n', 'X', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x3', 'X', '\x5', 'X', '\x51A', '\n', 'X', '\x3', 'X', '\x3', 
		'X', '\x5', 'X', '\x51E', '\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', 
		'\x5', 'X', '\x529', '\n', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 
		'Y', '\x52E', '\n', 'Y', '\x3', 'Z', '\x3', 'Z', '\x3', '[', '\x3', '[', 
		'\x3', '[', '\x3', '[', '\x5', '[', '\x536', '\n', '[', '\x3', '[', '\x3', 
		'[', '\x5', '[', '\x53A', '\n', '[', '\x3', '\\', '\x3', '\\', '\x3', 
		'\\', '\a', '\\', '\x53F', '\n', '\\', '\f', '\\', '\xE', '\\', '\x542', 
		'\v', '\\', '\x3', '\\', '\x5', '\\', '\x545', '\n', '\\', '\x3', ']', 
		'\x3', ']', '\x3', ']', '\x5', ']', '\x54A', '\n', ']', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x5', ']', '\x54F', '\n', ']', '\x3', ']', '\x3', ']', 
		'\x5', ']', '\x553', '\n', ']', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\a', '^', '\x55A', '\n', '^', '\f', '^', '\xE', '^', 
		'\x55D', '\v', '^', '\x3', '^', '\x3', '^', '\x3', '_', '\x5', '_', '\x562', 
		'\n', '_', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', '`', '\x5', '`', 
		'\x568', '\n', '`', '\x3', '`', '\x5', '`', '\x56B', '\n', '`', '\x3', 
		'\x61', '\x3', '\x61', '\x5', '\x61', '\x56F', '\n', '\x61', '\x3', '\x61', 
		'\x5', '\x61', '\x572', '\n', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', 
		'\x61', '\x5', '\x61', '\x577', '\n', '\x61', '\x3', '\x62', '\x3', '\x62', 
		'\x5', '\x62', '\x57B', '\n', '\x62', '\x3', '\x62', '\x5', '\x62', '\x57E', 
		'\n', '\x62', '\x3', '\x62', '\x5', '\x62', '\x581', '\n', '\x62', '\x3', 
		'\x62', '\x3', '\x62', '\x5', '\x62', '\x585', '\n', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x5', '\x62', '\x589', '\n', '\x62', '\x3', '\x62', '\x3', 
		'\x62', '\x5', '\x62', '\x58D', '\n', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x5', '\x62', '\x592', '\n', '\x62', '\x3', '\x62', '\x3', 
		'\x62', '\x5', '\x62', '\x596', '\n', '\x62', '\x5', '\x62', '\x598', 
		'\n', '\x62', '\x3', '\x62', '\x3', '\x62', '\a', '\x62', '\x59C', '\n', 
		'\x62', '\f', '\x62', '\xE', '\x62', '\x59F', '\v', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\a', '\x63', 
		'\x5A6', '\n', '\x63', '\f', '\x63', '\xE', '\x63', '\x5A9', '\v', '\x63', 
		'\x3', '\x64', '\x5', '\x64', '\x5AC', '\n', '\x64', '\x3', '\x64', '\x5', 
		'\x64', '\x5AF', '\n', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\a', '\x65', '\x5B7', '\n', 
		'\x65', '\f', '\x65', '\xE', '\x65', '\x5BA', '\v', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x5', '\x65', '\x5BE', '\n', '\x65', '\x5', '\x65', '\x5C0', 
		'\n', '\x65', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', 
		'\x5C5', '\n', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', 
		'\x66', '\a', '\x66', '\x5CB', '\n', '\x66', '\f', '\x66', '\xE', '\x66', 
		'\x5CE', '\v', '\x66', '\x3', '\x66', '\x5', '\x66', '\x5D1', '\n', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x5D5', '\n', '\x66', '\x3', 
		'g', '\x3', 'g', '\x3', 'g', '\a', 'g', '\x5DA', '\n', 'g', '\f', 'g', 
		'\xE', 'g', '\x5DD', '\v', 'g', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 
		'h', '\a', 'h', '\x5E3', '\n', 'h', '\f', 'h', '\xE', 'h', '\x5E6', '\v', 
		'h', '\x3', 'h', '\x5', 'h', '\x5E9', '\n', 'h', '\x3', 'h', '\x5', 'h', 
		'\x5EC', '\n', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'i', '\x5', 'i', '\x5F1', 
		'\n', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x5', 'i', '\x5F6', '\n', 
		'i', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 
		'j', '\x5', 'j', '\x5FE', '\n', 'j', '\x5', 'j', '\x600', '\n', 'j', '\x3', 
		'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x5', 'j', '\x606', '\n', 'j', 
		'\x5', 'j', '\x608', '\n', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x5', 
		'j', '\x60D', '\n', 'j', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\a', 'k', 
		'\x612', '\n', 'k', '\f', 'k', '\xE', 'k', '\x615', '\v', 'k', '\x3', 
		'l', '\x3', 'l', '\x3', 'l', '\x5', 'l', '\x61A', '\n', 'l', '\x3', 'm', 
		'\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\x621', '\n', 
		'm', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x5', 'n', '\x627', 
		'\n', 'n', '\x3', 'o', '\x3', 'o', '\x3', 'p', '\x3', 'p', '\x3', 'p', 
		'\x3', 'p', '\x3', 'p', '\x3', 'p', '\x5', 'p', '\x631', '\n', 'p', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x5', 'p', '\x636', '\n', 'p', '\x3', 'p', 
		'\x3', 'p', '\x3', 'p', '\x5', 'p', '\x63B', '\n', 'p', '\x5', 'p', '\x63D', 
		'\n', 'p', '\x3', 'q', '\x3', 'q', '\x3', 'r', '\x3', 'r', '\x6', 'r', 
		'\x643', '\n', 'r', '\r', 'r', '\xE', 'r', '\x644', '\x3', 'r', '\x3', 
		'r', '\x6', 'r', '\x649', '\n', 'r', '\r', 'r', '\xE', 'r', '\x64A', '\x3', 
		'r', '\x3', 'r', '\x3', 'r', '\a', 'r', '\x650', '\n', 'r', '\f', 'r', 
		'\xE', 'r', '\x653', '\v', 'r', '\x3', 'r', '\x5', 'r', '\x656', '\n', 
		'r', '\x3', 's', '\x3', 's', '\x3', 's', '\x5', 's', '\x65B', '\n', 's', 
		'\x3', 't', '\x3', 't', '\x3', 't', '\a', 't', '\x660', '\n', 't', '\f', 
		't', '\xE', 't', '\x663', '\v', 't', '\x3', 'u', '\x3', 'u', '\a', 'u', 
		'\x667', '\n', 'u', '\f', 'u', '\xE', 'u', '\x66A', '\v', 'u', '\x3', 
		'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x5', 
		'v', '\x672', '\n', 'v', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x5', 'w', 
		'\x677', '\n', 'w', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'y', '\x3', 
		'y', '\x3', 'y', '\x3', 'y', '\x5', 'y', '\x680', '\n', 'y', '\x3', 'z', 
		'\x5', 'z', '\x683', '\n', 'z', '\x3', 'z', '\x3', 'z', '\a', 'z', '\x687', 
		'\n', 'z', '\f', 'z', '\xE', 'z', '\x68A', '\v', 'z', '\x3', '{', '\x3', 
		'{', '\x3', '{', '\x5', '{', '\x68F', '\n', '{', '\x3', '{', '\x3', '{', 
		'\x3', '{', '\x3', '{', '\x5', '{', '\x695', '\n', '{', '\x3', '|', '\x3', 
		'|', '\x5', '|', '\x699', '\n', '|', '\x3', '}', '\x3', '}', '\x3', '}', 
		'\x3', '}', '\x3', '}', '\x5', '}', '\x6A0', '\n', '}', '\x3', '}', '\a', 
		'}', '\x6A3', '\n', '}', '\f', '}', '\xE', '}', '\x6A6', '\v', '}', '\x3', 
		'~', '\a', '~', '\x6A9', '\n', '~', '\f', '~', '\xE', '~', '\x6AC', '\v', 
		'~', '\x3', '~', '\x3', '~', '\x3', '~', '\x3', '~', '\x3', '~', '\x3', 
		'~', '\x5', '~', '\x6B4', '\n', '~', '\x3', '~', '\a', '~', '\x6B7', '\n', 
		'~', '\f', '~', '\xE', '~', '\x6BA', '\v', '~', '\x3', '\x7F', '\x3', 
		'\x7F', '\x5', '\x7F', '\x6BE', '\n', '\x7F', '\x3', '\x7F', '\x3', '\x7F', 
		'\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x5', '\x7F', '\x6C5', '\n', 
		'\x7F', '\x3', '\x80', '\x5', '\x80', '\x6C8', '\n', '\x80', '\x3', '\x80', 
		'\x3', '\x80', '\x5', '\x80', '\x6CC', '\n', '\x80', '\a', '\x80', '\x6CE', 
		'\n', '\x80', '\f', '\x80', '\xE', '\x80', '\x6D1', '\v', '\x80', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x5', '\x81', '\x6DA', '\n', '\x81', '\x3', '\x82', 
		'\x3', '\x82', '\x3', '\x83', '\x3', '\x83', '\x3', '\x84', '\x3', '\x84', 
		'\x3', '\x85', '\x3', '\x85', '\x3', '\x86', '\x3', '\x86', '\x3', '\x87', 
		'\x3', '\x87', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x2', '\x3', 
		'\xA8', '\x89', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 
		'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', 
		'\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', 
		'\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', 
		'\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', '\xBC', 
		'\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', '\xCC', '\xCE', 
		'\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', '\xDE', '\xE0', 
		'\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', '\xF0', '\xF2', 
		'\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', '\x100', '\x102', '\x104', 
		'\x106', '\x108', '\x10A', '\x10C', '\x10E', '\x2', '\x1A', '\x4', '\x2', 
		'\x39', '\x39', 'R', 'R', '\x4', '\x2', '\x37', '\x37', 'x', 'x', '\x3', 
		'\x2', '\xD6', '\xD7', '\x3', '\x2', '\xCA', '\xCB', '\x4', '\x2', '\xC3', 
		'\xC3', '\xC5', '\xC6', '\x3', '\x2', '\xA0', '\xA1', '\x3', '\x2', 'X', 
		'Y', '\x3', '\x2', 'p', 'q', '\x3', '\x2', '\xC7', '\xC9', '\x4', '\x2', 
		'\xC5', '\xC6', '\xCD', '\xCD', '\x3', '\x2', '\xB9', '\xBA', '\x4', '\x2', 
		'\xA6', '\xA7', '\xBF', '\xC0', '\x3', '\x2', '\xA2', '\xA5', '\x6', '\x2', 
		'\xA8', '\xAA', '\xAC', '\xB4', '\xB8', '\xB8', '\xD8', '\xD8', '\x3', 
		'\x2', '\xC5', '\xC6', '\x4', '\x2', '\xDD', '\xDE', '\xE0', '\xE1', '\x4', 
		'\x2', '\x37', '\x37', 'j', 'j', '\x4', '\x2', '-', '-', 'M', 'M', '\x5', 
		'\x2', '-', '\x82', '\x84', '\x9B', '\xDC', '\xDC', '\x6', '\x2', '-', 
		'-', 'M', 'M', 'm', 'o', 't', 't', '\x3', '\x2', '\x94', '\x9B', '\x3', 
		'\x2', '\x84', '\x93', '\t', '\x2', '.', '.', '\x31', '\x31', '?', '?', 
		'^', '_', 'i', 'i', 'r', 'r', 'u', 'u', '\v', '\x2', '.', '.', '\x30', 
		'\x31', '>', '?', 'O', 'O', '\\', '_', 'i', 'i', 'r', 'r', 'u', 'u', '{', 
		'}', '\x2', '\x7AF', '\x2', '\x111', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x11E', '\x3', '\x2', '\x2', '\x2', '\x6', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x141', '\x3', '\x2', '\x2', '\x2', '\n', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x14B', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x10', '\x15E', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x160', '\x3', '\x2', '\x2', '\x2', '\x14', '\x168', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x175', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x18D', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1A4', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\"', '\x1D1', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x1E7', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x1E9', '\x3', '\x2', '\x2', '\x2', '(', '\x1F1', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x1F9', '\x3', '\x2', '\x2', '\x2', ',', '\x1FC', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x203', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x211', '\x3', '\x2', '\x2', '\x2', '\x32', '\x214', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x236', '\x3', '\x2', '\x2', '\x2', '\x36', '\x238', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x240', '\x3', '\x2', '\x2', '\x2', 
		':', '\x248', '\x3', '\x2', '\x2', '\x2', '<', '\x24F', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x255', '\x3', '\x2', '\x2', '\x2', '@', '\x272', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x274', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x276', '\x3', '\x2', '\x2', '\x2', '\x46', '\x296', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x298', '\x3', '\x2', '\x2', '\x2', 'J', '\x29C', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x2A1', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x2A4', '\x3', '\x2', '\x2', '\x2', 'P', '\x2A8', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x2B2', '\x3', '\x2', '\x2', '\x2', 'T', '\x2B8', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x2CE', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x2D0', '\x3', '\x2', '\x2', '\x2', 'Z', '\x2D2', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x2F3', '\x3', '\x2', '\x2', '\x2', '^', '\x2F9', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x2FF', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x305', '\x3', '\x2', '\x2', '\x2', '\x64', '\x30B', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x30E', '\x3', '\x2', '\x2', '\x2', 'h', '\x314', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x345', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x358', '\x3', '\x2', '\x2', '\x2', 'n', '\x366', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x369', '\x3', '\x2', '\x2', '\x2', 'r', '\x36D', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x371', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x37E', '\x3', '\x2', '\x2', '\x2', 'x', '\x384', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x386', '\x3', '\x2', '\x2', '\x2', '|', '\x38F', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x398', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x3AA', '\x3', '\x2', '\x2', '\x2', '\x82', '\x3AC', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x3BF', '\x3', '\x2', '\x2', '\x2', '\x86', '\x3C1', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x3C5', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x409', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x414', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x418', '\x3', '\x2', '\x2', '\x2', '\x90', '\x41A', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x421', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x42F', '\x3', '\x2', '\x2', '\x2', '\x96', '\x433', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x43A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x43E', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x441', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x445', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x44A', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\x44E', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x45A', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\x462', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\x4B6', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x4F9', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\x506', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x528', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\x52A', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\x52F', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x531', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\x53B', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x552', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\x554', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\x561', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x56A', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\x576', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x578', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\x5A2', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\x5AB', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x5BF', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\x5D4', '\x3', '\x2', '\x2', '\x2', '\xCC', '\x5D6', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\x5DE', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\x5F5', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x60C', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\x60E', '\x3', '\x2', '\x2', '\x2', '\xD6', '\x616', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\x620', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\x626', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x628', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\x63C', '\x3', '\x2', '\x2', '\x2', '\xE0', '\x63E', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\x655', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\x65A', '\x3', '\x2', '\x2', '\x2', '\xE6', '\x65C', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\x664', '\x3', '\x2', '\x2', '\x2', '\xEA', '\x671', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\x673', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\x678', '\x3', '\x2', '\x2', '\x2', '\xF0', '\x67F', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\x682', '\x3', '\x2', '\x2', '\x2', '\xF4', '\x694', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\x698', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\x69F', '\x3', '\x2', '\x2', '\x2', '\xFA', '\x6AA', '\x3', '\x2', 
		'\x2', '\x2', '\xFC', '\x6C4', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x6C7', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\x6D9', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x6DB', '\x3', '\x2', '\x2', '\x2', '\x104', '\x6DD', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x6DF', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x6E1', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x6E3', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\x6E5', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x6E7', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x112', '\a', '\f', '\x2', '\x2', 
		'\x111', '\x110', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\x116', '\x3', '\x2', '\x2', '\x2', '\x113', 
		'\x115', '\x5', '\x4', '\x3', '\x2', '\x114', '\x113', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\x118', '\x3', '\x2', '\x2', '\x2', '\x116', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x117', '\x119', '\x3', '\x2', '\x2', '\x2', '\x118', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x11A', '\a', '\x2', '\x2', '\x3', '\x11A', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11F', '\x5', '\x6', '\x4', 
		'\x2', '\x11C', '\x11F', '\x5', '\f', '\a', '\x2', '\x11D', '\x11F', '\x5', 
		'\n', '\x6', '\x2', '\x11E', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x5', '\x3', '\x2', '\x2', '\x2', '\x120', '\x122', '\x5', 
		'\b', '\x5', '\x2', '\x121', '\x120', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x123', '\x3', '\x2', '\x2', '\x2', '\x123', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', '\x124', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x142', '\a', '\n', '\x2', '\x2', '\x126', 
		'\x142', '\a', '\a', '\x2', '\x2', '\x127', '\x142', '\a', '\x11', '\x2', 
		'\x2', '\x128', '\x142', '\a', '\b', '\x2', '\x2', '\x129', '\x142', '\a', 
		'\v', '\x2', '\x2', '\x12A', '\x142', '\a', '\x1A', '\x2', '\x2', '\x12B', 
		'\x142', '\a', '\x12', '\x2', '\x2', '\x12C', '\x142', '\a', '\x13', '\x2', 
		'\x2', '\x12D', '\x142', '\a', '\x4', '\x2', '\x2', '\x12E', '\x142', 
		'\a', '\x14', '\x2', '\x2', '\x12F', '\x142', '\a', '\x15', '\x2', '\x2', 
		'\x130', '\x142', '\a', '\x1D', '\x2', '\x2', '\x131', '\x142', '\a', 
		'\x16', '\x2', '\x2', '\x132', '\x142', '\a', '!', '\x2', '\x2', '\x133', 
		'\x142', '\a', '\x17', '\x2', '\x2', '\x134', '\x142', '\a', '\x18', '\x2', 
		'\x2', '\x135', '\x142', '\a', '\x1E', '\x2', '\x2', '\x136', '\x142', 
		'\a', '\"', '\x2', '\x2', '\x137', '\x142', '\a', '\'', '\x2', '\x2', 
		'\x138', '\x142', '\a', '%', '\x2', '\x2', '\x139', '\x13D', '\a', '\x5', 
		'\x2', '\x2', '\x13A', '\x13C', '\a', '\xE', '\x2', '\x2', '\x13B', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\x3', 
		'\x2', '\x2', '\x2', '\x13E', '\x140', '\x3', '\x2', '\x2', '\x2', '\x13F', 
		'\x13D', '\x3', '\x2', '\x2', '\x2', '\x140', '\x142', '\a', '\xF', '\x2', 
		'\x2', '\x141', '\x125', '\x3', '\x2', '\x2', '\x2', '\x141', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x141', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x141', '\x128', '\x3', '\x2', '\x2', '\x2', '\x141', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x141', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x141', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x141', '\x12C', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x141', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x141', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x141', '\x130', '\x3', '\x2', '\x2', '\x2', '\x141', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x141', '\x132', '\x3', '\x2', '\x2', '\x2', '\x141', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x141', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x135', '\x3', '\x2', '\x2', '\x2', '\x141', '\x136', 
		'\x3', '\x2', '\x2', '\x2', '\x141', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x141', '\x138', '\x3', '\x2', '\x2', '\x2', '\x141', '\x139', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\t', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x145', '\a', '$', '\x2', '\x2', '\x144', '\x143', '\x3', '\x2', '\x2', 
		'\x2', '\x145', '\x146', '\x3', '\x2', '\x2', '\x2', '\x146', '\x144', 
		'\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\x147', '\v', '\x3', '\x2', '\x2', '\x2', '\x148', '\x14A', '\x5', '\xE', 
		'\b', '\x2', '\x149', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\x14B', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x14B', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14F', '\x3', 
		'\x2', '\x2', '\x2', '\x14D', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x150', '\x5', '\x10', '\t', '\x2', '\x14F', '\x14E', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x151', '\x3', '\x2', '\x2', '\x2', '\x151', '\x14F', 
		'\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\r', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', '\a', 'W', 
		'\x2', '\x2', '\x154', '\x155', '\a', '\x66', '\x2', '\x2', '\x155', '\x156', 
		'\x5', '\xC8', '\x65', '\x2', '\x156', '\x157', '\a', '\xD7', '\x2', '\x2', 
		'\x157', '\xF', '\x3', '\x2', '\x2', '\x2', '\x158', '\x15F', '\x5', '@', 
		'!', '\x2', '\x159', '\x15F', '\x5', '\x12', '\n', '\x2', '\x15A', '\x15F', 
		'\x5', '\x18', '\r', '\x2', '\x15B', '\x15F', '\x5', '\x1C', '\xF', '\x2', 
		'\x15C', '\x15F', '\x5', '\x1E', '\x10', '\x2', '\x15D', '\x15F', '\x5', 
		'\xA2', 'R', '\x2', '\x15E', '\x158', '\x3', '\x2', '\x2', '\x2', '\x15E', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15A', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x15F', '\x11', '\x3', '\x2', '\x2', '\x2', '\x160', '\x162', '\a', '~', 
		'\x2', '\x2', '\x161', '\x163', '\t', '\x2', '\x2', '\x2', '\x162', '\x161', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x164', '\x3', '\x2', '\x2', '\x2', '\x164', '\x165', '\x5', 
		'\x14', '\v', '\x2', '\x165', '\x166', '\a', '\xD7', '\x2', '\x2', '\x166', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x167', '\x169', '\a', '\xBD', '\x2', 
		'\x2', '\x168', '\x167', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', 
		'\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '\x172', '\x5', '\x16', '\f', '\x2', '\x16B', '\x16D', '\a', 
		'\xD5', '\x2', '\x2', '\x16C', '\x16E', '\a', '\xBD', '\x2', '\x2', '\x16D', 
		'\x16C', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x171', 
		'\x5', '\x16', '\f', '\x2', '\x170', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x171', '\x174', '\x3', '\x2', '\x2', '\x2', '\x172', '\x170', '\x3', 
		'\x2', '\x2', '\x2', '\x172', '\x173', '\x3', '\x2', '\x2', '\x2', '\x173', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x174', '\x172', '\x3', '\x2', '\x2', 
		'\x2', '\x175', '\x176', '\x5', '\xC8', '\x65', '\x2', '\x176', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x186', '\a', '\x66', '\x2', '\x2', 
		'\x178', '\x17A', '\x5', '\xC8', '\x65', '\x2', '\x179', '\x178', '\x3', 
		'\x2', '\x2', '\x2', '\x179', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17A', 
		'\x17B', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17F', '\a', '\xD3', '\x2', 
		'\x2', '\x17C', '\x17E', '\x5', '\x1A', '\xE', '\x2', '\x17D', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x17F', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\x3', 
		'\x2', '\x2', '\x2', '\x180', '\x182', '\x3', '\x2', '\x2', '\x2', '\x181', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x182', '\x187', '\a', '\xD4', '\x2', 
		'\x2', '\x183', '\x184', '\x5', '\xC8', '\x65', '\x2', '\x184', '\x185', 
		'\a', '\xD7', '\x2', '\x2', '\x185', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x179', '\x3', '\x2', '\x2', '\x2', '\x186', '\x183', '\x3', 
		'\x2', '\x2', '\x2', '\x187', '\x19', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x18E', '\x5', '@', '!', '\x2', '\x189', '\x18E', '\x5', '\x12', '\n', 
		'\x2', '\x18A', '\x18E', '\x5', '\x1C', '\xF', '\x2', '\x18B', '\x18E', 
		'\x5', '\x1E', '\x10', '\x2', '\x18C', '\x18E', '\x5', '\xA2', 'R', '\x2', 
		'\x18D', '\x188', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x18D', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18D', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18C', '\x3', '\x2', '\x2', 
		'\x2', '\x18E', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x190', 
		'\x5', '\x30', '\x19', '\x2', '\x190', '\x192', '\a', 'R', '\x2', '\x2', 
		'\x191', '\x193', '\a', '\xC1', '\x2', '\x2', '\x192', '\x191', '\x3', 
		'\x2', '\x2', '\x2', '\x192', '\x193', '\x3', '\x2', '\x2', '\x2', '\x193', 
		'\x194', '\x3', '\x2', '\x2', '\x2', '\x194', '\x196', '\x5', '\x104', 
		'\x83', '\x2', '\x195', '\x197', '\x5', '$', '\x13', '\x2', '\x196', '\x195', 
		'\x3', '\x2', '\x2', '\x2', '\x196', '\x197', '\x3', '\x2', '\x2', '\x2', 
		'\x197', '\x198', '\x3', '\x2', '\x2', '\x2', '\x198', '\x199', '\a', 
		'\xCF', '\x2', '\x2', '\x199', '\x19A', '\x5', '|', '?', '\x2', '\x19A', 
		'\x1A0', '\a', '\xD0', '\x2', '\x2', '\x19B', '\x19D', '\a', '\xD6', '\x2', 
		'\x2', '\x19C', '\x19E', '\a', '\xCE', '\x2', '\x2', '\x19D', '\x19C', 
		'\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', '\x3', '\x2', '\x2', '\x2', 
		'\x19E', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A1', '\x5', 
		'\x80', '\x41', '\x2', '\x1A0', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x1A0', 
		'\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\x3', '\x2', '\x2', 
		'\x2', '\x1A2', '\x1A3', '\x5', '\x44', '#', '\x2', '\x1A3', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4', '\x1A6', '\x5', '\x30', '\x19', '\x2', '\x1A5', 
		'\x1A7', '\a', 'm', '\x2', '\x2', '\x1A6', '\x1A5', '\x3', '\x2', '\x2', 
		'\x2', '\x1A6', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A9', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1AA', '\x5', '\x102', '\x82', 
		'\x2', '\x1A9', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AC', '\x3', '\x2', '\x2', '\x2', 
		'\x1AB', '\x1AD', '\a', 'k', '\x2', '\x2', '\x1AC', '\x1AB', '\x3', '\x2', 
		'\x2', '\x2', '\x1AC', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', '\x5', ' ', '\x11', '\x2', 
		'\x1AF', '\x1B1', '\x5', '\x104', '\x83', '\x2', '\x1B0', '\x1B2', '\x5', 
		'$', '\x13', '\x2', '\x1B1', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B1', 
		'\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B5', '\x3', '\x2', '\x2', 
		'\x2', '\x1B3', '\x1B4', '\a', 'L', '\x2', '\x2', '\x1B4', '\x1B6', '\x5', 
		'\xBE', '`', '\x2', '\x1B5', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B5', 
		'\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x1B7', '\x1B8', '\a', 'V', '\x2', '\x2', '\x1B8', '\x1BA', '\x5', 
		'\"', '\x12', '\x2', '\x1B9', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B9', 
		'\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1C5', '\x3', '\x2', '\x2', 
		'\x2', '\x1BB', '\x1BC', '\a', '`', '\x2', '\x2', '\x1BC', '\x1BE', '\x5', 
		'\x104', '\x83', '\x2', '\x1BD', '\x1BF', '\x5', '$', '\x13', '\x2', '\x1BE', 
		'\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C1', 
		'\a', 'L', '\x2', '\x2', '\x1C1', '\x1C3', '\x5', '\"', '\x12', '\x2', 
		'\x1C2', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\x3', 
		'\x2', '\x2', '\x2', '\x1C3', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1BB', '\x3', '\x2', '\x2', 
		'\x2', '\x1C5', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1CA', 
		'\a', '\xD3', '\x2', '\x2', '\x1C7', '\x1C9', '\x5', '\x8A', '\x46', '\x2', 
		'\x1C8', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CC', '\x3', 
		'\x2', '\x2', '\x2', '\x1CA', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CD', '\x3', '\x2', '\x2', 
		'\x2', '\x1CC', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CE', 
		'\a', '\xD4', '\x2', '\x2', '\x1CE', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x1CF', '\x1D0', '\t', '\x3', '\x2', '\x2', '\x1D0', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x1D1', '\x1D6', '\x5', '\xBE', '`', '\x2', '\x1D2', '\x1D3', 
		'\a', '\xD5', '\x2', '\x2', '\x1D3', '\x1D5', '\x5', '\xBE', '`', '\x2', 
		'\x1D4', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D8', '\x3', 
		'\x2', '\x2', '\x2', '\x1D6', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D6', 
		'\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D7', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', 
		'\a', '\x9D', '\x2', '\x2', '\x1DA', '\x1DB', '\x5', '&', '\x14', '\x2', 
		'\x1DB', '\x1DC', '\a', '\x9E', '\x2', '\x2', '\x1DC', '\x1E8', '\x3', 
		'\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\a', '\x9D', '\x2', '\x2', '\x1DE', 
		'\x1DF', '\x5', '(', '\x15', '\x2', '\x1DF', '\x1E0', '\a', '\x9E', '\x2', 
		'\x2', '\x1E0', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', 
		'\a', '\x9D', '\x2', '\x2', '\x1E2', '\x1E3', '\x5', '&', '\x14', '\x2', 
		'\x1E3', '\x1E4', '\a', '\xD5', '\x2', '\x2', '\x1E4', '\x1E5', '\x5', 
		'(', '\x15', '\x2', '\x1E5', '\x1E6', '\a', '\x9E', '\x2', '\x2', '\x1E6', 
		'\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1D9', '\x3', '\x2', '\x2', 
		'\x2', '\x1E7', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E1', 
		'\x3', '\x2', '\x2', '\x2', '\x1E8', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x1E9', '\x1EE', '\x5', '*', '\x16', '\x2', '\x1EA', '\x1EB', '\a', '\xD5', 
		'\x2', '\x2', '\x1EB', '\x1ED', '\x5', '*', '\x16', '\x2', '\x1EC', '\x1EA', 
		'\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1F0', '\x3', '\x2', '\x2', '\x2', 
		'\x1EE', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\x3', 
		'\x2', '\x2', '\x2', '\x1EF', '\'', '\x3', '\x2', '\x2', '\x2', '\x1F0', 
		'\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F6', '\x5', ',', '\x17', 
		'\x2', '\x1F2', '\x1F3', '\a', '\xD5', '\x2', '\x2', '\x1F3', '\x1F5', 
		'\x5', ',', '\x17', '\x2', '\x1F4', '\x1F2', '\x3', '\x2', '\x2', '\x2', 
		'\x1F5', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F4', '\x3', 
		'\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1F7', 
		')', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F6', '\x3', '\x2', '\x2', 
		'\x2', '\x1F9', '\x1FA', '\x5', '\x30', '\x19', '\x2', '\x1FA', '\x1FB', 
		'\x5', '\x104', '\x83', '\x2', '\x1FB', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x1FC', '\x1FD', '\x5', '\x30', '\x19', '\x2', '\x1FD', '\x1FE', '\x5', 
		'\x104', '\x83', '\x2', '\x1FE', '\x201', '\a', '\xD8', '\x2', '\x2', 
		'\x1FF', '\x202', '\x5', '\xBE', '`', '\x2', '\x200', '\x202', '\x5', 
		'\x10C', '\x87', '\x2', '\x201', '\x1FF', '\x3', '\x2', '\x2', '\x2', 
		'\x201', '\x200', '\x3', '\x2', '\x2', '\x2', '\x202', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x203', '\x204', '\a', '\x9D', '\x2', '\x2', '\x204', '\x209', 
		'\x5', '\xC0', '\x61', '\x2', '\x205', '\x206', '\a', '\xD5', '\x2', '\x2', 
		'\x206', '\x208', '\x5', '\xC0', '\x61', '\x2', '\x207', '\x205', '\x3', 
		'\x2', '\x2', '\x2', '\x208', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x209', 
		'\x207', '\x3', '\x2', '\x2', '\x2', '\x209', '\x20A', '\x3', '\x2', '\x2', 
		'\x2', '\x20A', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x209', 
		'\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', '\a', '\x9E', '\x2', '\x2', 
		'\x20D', '/', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x210', '\x5', '\x32', 
		'\x1A', '\x2', '\x20F', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x210', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x211', '\x20F', '\x3', '\x2', '\x2', 
		'\x2', '\x211', '\x212', '\x3', '\x2', '\x2', '\x2', '\x212', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x213', '\x211', '\x3', '\x2', '\x2', '\x2', 
		'\x214', '\x218', '\a', '\xD1', '\x2', '\x2', '\x215', '\x216', '\x5', 
		'\x104', '\x83', '\x2', '\x216', '\x217', '\a', '\xD6', '\x2', '\x2', 
		'\x217', '\x219', '\x3', '\x2', '\x2', '\x2', '\x218', '\x215', '\x3', 
		'\x2', '\x2', '\x2', '\x218', '\x219', '\x3', '\x2', '\x2', '\x2', '\x219', 
		'\x21A', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21F', '\x5', '\x34', 
		'\x1B', '\x2', '\x21B', '\x21C', '\a', '\xD5', '\x2', '\x2', '\x21C', 
		'\x21E', '\x5', '\x34', '\x1B', '\x2', '\x21D', '\x21B', '\x3', '\x2', 
		'\x2', '\x2', '\x21E', '\x221', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x21D', 
		'\x3', '\x2', '\x2', '\x2', '\x21F', '\x220', '\x3', '\x2', '\x2', '\x2', 
		'\x220', '\x222', '\x3', '\x2', '\x2', '\x2', '\x221', '\x21F', '\x3', 
		'\x2', '\x2', '\x2', '\x222', '\x223', '\a', '\xD2', '\x2', '\x2', '\x223', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x224', '\x237', '\x5', '\xC6', '\x64', 
		'\x2', '\x225', '\x226', '\x5', '\xC6', '\x64', '\x2', '\x226', '\x227', 
		'\a', '\xCF', '\x2', '\x2', '\x227', '\x228', '\x5', '\x36', '\x1C', '\x2', 
		'\x228', '\x229', '\a', '\xD0', '\x2', '\x2', '\x229', '\x237', '\x3', 
		'\x2', '\x2', '\x2', '\x22A', '\x22B', '\x5', '\xC6', '\x64', '\x2', '\x22B', 
		'\x22C', '\a', '\xCF', '\x2', '\x2', '\x22C', '\x22D', '\x5', '\x38', 
		'\x1D', '\x2', '\x22D', '\x22E', '\a', '\xD0', '\x2', '\x2', '\x22E', 
		'\x237', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x230', '\x5', '\xC6', 
		'\x64', '\x2', '\x230', '\x231', '\a', '\xCF', '\x2', '\x2', '\x231', 
		'\x232', '\x5', '\x36', '\x1C', '\x2', '\x232', '\x233', '\a', '\xD5', 
		'\x2', '\x2', '\x233', '\x234', '\x5', '\x38', '\x1D', '\x2', '\x234', 
		'\x235', '\a', '\xD0', '\x2', '\x2', '\x235', '\x237', '\x3', '\x2', '\x2', 
		'\x2', '\x236', '\x224', '\x3', '\x2', '\x2', '\x2', '\x236', '\x225', 
		'\x3', '\x2', '\x2', '\x2', '\x236', '\x22A', '\x3', '\x2', '\x2', '\x2', 
		'\x236', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x237', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x238', '\x23D', '\x5', '\xA8', 'U', '\x2', '\x239', 
		'\x23A', '\a', '\xD5', '\x2', '\x2', '\x23A', '\x23C', '\x5', '\xA8', 
		'U', '\x2', '\x23B', '\x239', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23F', 
		'\x3', '\x2', '\x2', '\x2', '\x23D', '\x23B', '\x3', '\x2', '\x2', '\x2', 
		'\x23D', '\x23E', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x23F', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x245', '\x5', ':', '\x1E', '\x2', '\x241', '\x242', '\a', '\xD5', '\x2', 
		'\x2', '\x242', '\x244', '\x5', ':', '\x1E', '\x2', '\x243', '\x241', 
		'\x3', '\x2', '\x2', '\x2', '\x244', '\x247', '\x3', '\x2', '\x2', '\x2', 
		'\x245', '\x243', '\x3', '\x2', '\x2', '\x2', '\x245', '\x246', '\x3', 
		'\x2', '\x2', '\x2', '\x246', '\x39', '\x3', '\x2', '\x2', '\x2', '\x247', 
		'\x245', '\x3', '\x2', '\x2', '\x2', '\x248', '\x249', '\a', '\xDB', '\x2', 
		'\x2', '\x249', '\x24A', '\a', '\x9F', '\x2', '\x2', '\x24A', '\x24B', 
		'\x5', '\xA8', 'U', '\x2', '\x24B', ';', '\x3', '\x2', '\x2', '\x2', '\x24C', 
		'\x24E', '\x5', '>', ' ', '\x2', '\x24D', '\x24C', '\x3', '\x2', '\x2', 
		'\x2', '\x24E', '\x251', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x24D', 
		'\x3', '\x2', '\x2', '\x2', '\x24F', '\x250', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '=', '\x3', '\x2', '\x2', '\x2', '\x251', '\x24F', '\x3', '\x2', 
		'\x2', '\x2', '\x252', '\x256', '\x5', '@', '!', '\x2', '\x253', '\x256', 
		'\x5', '\x1C', '\xF', '\x2', '\x254', '\x256', '\x5', '\x1E', '\x10', 
		'\x2', '\x255', '\x252', '\x3', '\x2', '\x2', '\x2', '\x255', '\x253', 
		'\x3', '\x2', '\x2', '\x2', '\x255', '\x254', '\x3', '\x2', '\x2', '\x2', 
		'\x256', '?', '\x3', '\x2', '\x2', '\x2', '\x257', '\x258', '\x5', '\x104', 
		'\x83', '\x2', '\x258', '\x259', '\a', '\xD6', '\x2', '\x2', '\x259', 
		'\x273', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x273', '\x5', '\x44', 
		'#', '\x2', '\x25B', '\x273', '\x5', '\x46', '$', '\x2', '\x25C', '\x273', 
		'\x5', 'P', ')', '\x2', '\x25D', '\x273', '\x5', 'R', '*', '\x2', '\x25E', 
		'\x273', '\x5', 'T', '+', '\x2', '\x25F', '\x273', '\x5', 'Z', '.', '\x2', 
		'\x260', '\x273', '\x5', '^', '\x30', '\x2', '\x261', '\x273', '\x5', 
		'`', '\x31', '\x2', '\x262', '\x273', '\x5', '\x62', '\x32', '\x2', '\x263', 
		'\x264', '\x5', '\xB4', '[', '\x2', '\x264', '\x265', '\a', '\xD7', '\x2', 
		'\x2', '\x265', '\x273', '\x3', '\x2', '\x2', '\x2', '\x266', '\x273', 
		'\x5', '\x82', '\x42', '\x2', '\x267', '\x273', '\x5', '\x88', '\x45', 
		'\x2', '\x268', '\x273', '\x5', '\x86', '\x44', '\x2', '\x269', '\x273', 
		'\x5', '\x64', '\x33', '\x2', '\x26A', '\x273', '\x5', '\x66', '\x34', 
		'\x2', '\x26B', '\x273', '\x5', 'h', '\x35', '\x2', '\x26C', '\x273', 
		'\x5', 'j', '\x36', '\x2', '\x26D', '\x273', '\x5', 'p', '\x39', '\x2', 
		'\x26E', '\x273', '\x5', 'r', ':', '\x2', '\x26F', '\x273', '\x5', 't', 
		';', '\x2', '\x270', '\x273', '\x5', '\x42', '\"', '\x2', '\x271', '\x273', 
		'\x5', 'v', '<', '\x2', '\x272', '\x257', '\x3', '\x2', '\x2', '\x2', 
		'\x272', '\x25A', '\x3', '\x2', '\x2', '\x2', '\x272', '\x25B', '\x3', 
		'\x2', '\x2', '\x2', '\x272', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x272', 
		'\x25D', '\x3', '\x2', '\x2', '\x2', '\x272', '\x25E', '\x3', '\x2', '\x2', 
		'\x2', '\x272', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x272', '\x260', 
		'\x3', '\x2', '\x2', '\x2', '\x272', '\x261', '\x3', '\x2', '\x2', '\x2', 
		'\x272', '\x262', '\x3', '\x2', '\x2', '\x2', '\x272', '\x263', '\x3', 
		'\x2', '\x2', '\x2', '\x272', '\x266', '\x3', '\x2', '\x2', '\x2', '\x272', 
		'\x267', '\x3', '\x2', '\x2', '\x2', '\x272', '\x268', '\x3', '\x2', '\x2', 
		'\x2', '\x272', '\x269', '\x3', '\x2', '\x2', '\x2', '\x272', '\x26A', 
		'\x3', '\x2', '\x2', '\x2', '\x272', '\x26B', '\x3', '\x2', '\x2', '\x2', 
		'\x272', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x272', '\x26D', '\x3', 
		'\x2', '\x2', '\x2', '\x272', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x272', 
		'\x26F', '\x3', '\x2', '\x2', '\x2', '\x272', '\x270', '\x3', '\x2', '\x2', 
		'\x2', '\x272', '\x271', '\x3', '\x2', '\x2', '\x2', '\x273', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x274', '\x275', '\a', '\xD7', '\x2', '\x2', 
		'\x275', '\x43', '\x3', '\x2', '\x2', '\x2', '\x276', '\x277', '\a', '\xD3', 
		'\x2', '\x2', '\x277', '\x278', '\x5', '<', '\x1F', '\x2', '\x278', '\x279', 
		'\a', '\xD4', '\x2', '\x2', '\x279', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x27A', '\x27B', '\a', 'U', '\x2', '\x2', '\x27B', '\x27C', '\x5', '\xA6', 
		'T', '\x2', '\x27C', '\x280', '\x5', '@', '!', '\x2', '\x27D', '\x27F', 
		'\x5', 'H', '%', '\x2', '\x27E', '\x27D', '\x3', '\x2', '\x2', '\x2', 
		'\x27F', '\x282', '\x3', '\x2', '\x2', '\x2', '\x280', '\x27E', '\x3', 
		'\x2', '\x2', '\x2', '\x280', '\x281', '\x3', '\x2', '\x2', '\x2', '\x281', 
		'\x284', '\x3', '\x2', '\x2', '\x2', '\x282', '\x280', '\x3', '\x2', '\x2', 
		'\x2', '\x283', '\x285', '\x5', 'L', '\'', '\x2', '\x284', '\x283', '\x3', 
		'\x2', '\x2', '\x2', '\x284', '\x285', '\x3', '\x2', '\x2', '\x2', '\x285', 
		'\x297', '\x3', '\x2', '\x2', '\x2', '\x286', '\x287', '\a', 'U', '\x2', 
		'\x2', '\x287', '\x288', '\x5', '\xA6', 'T', '\x2', '\x288', '\x289', 
		'\a', '\xD6', '\x2', '\x2', '\x289', '\x28D', '\x5', '<', '\x1F', '\x2', 
		'\x28A', '\x28C', '\x5', 'J', '&', '\x2', '\x28B', '\x28A', '\x3', '\x2', 
		'\x2', '\x2', '\x28C', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x28B', 
		'\x3', '\x2', '\x2', '\x2', '\x28D', '\x28E', '\x3', '\x2', '\x2', '\x2', 
		'\x28E', '\x291', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x28D', '\x3', 
		'\x2', '\x2', '\x2', '\x290', '\x292', '\x5', 'N', '(', '\x2', '\x291', 
		'\x290', '\x3', '\x2', '\x2', '\x2', '\x291', '\x292', '\x3', '\x2', '\x2', 
		'\x2', '\x292', '\x293', '\x3', '\x2', '\x2', '\x2', '\x293', '\x294', 
		'\a', 'G', '\x2', '\x2', '\x294', '\x295', '\a', '\xD7', '\x2', '\x2', 
		'\x295', '\x297', '\x3', '\x2', '\x2', '\x2', '\x296', '\x27A', '\x3', 
		'\x2', '\x2', '\x2', '\x296', '\x286', '\x3', '\x2', '\x2', '\x2', '\x297', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x298', '\x299', '\a', '\x42', '\x2', 
		'\x2', '\x299', '\x29A', '\x5', '\xA6', 'T', '\x2', '\x29A', '\x29B', 
		'\x5', '@', '!', '\x2', '\x29B', 'I', '\x3', '\x2', '\x2', '\x2', '\x29C', 
		'\x29D', '\a', '\x42', '\x2', '\x2', '\x29D', '\x29E', '\x5', '\xA6', 
		'T', '\x2', '\x29E', '\x29F', '\a', '\xD6', '\x2', '\x2', '\x29F', '\x2A0', 
		'\x5', '<', '\x1F', '\x2', '\x2A0', 'K', '\x3', '\x2', '\x2', '\x2', '\x2A1', 
		'\x2A2', '\a', '\x41', '\x2', '\x2', '\x2A2', '\x2A3', '\x5', '@', '!', 
		'\x2', '\x2A3', 'M', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A5', '\a', 
		'\x41', '\x2', '\x2', '\x2A5', '\x2A6', '\a', '\xD6', '\x2', '\x2', '\x2A6', 
		'\x2A7', '\x5', '<', '\x1F', '\x2', '\x2A7', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x2A8', '\x2A9', '\a', '\x80', '\x2', '\x2', '\x2A9', '\x2B0', 
		'\x5', '\xA6', 'T', '\x2', '\x2AA', '\x2B1', '\x5', '@', '!', '\x2', '\x2AB', 
		'\x2AC', '\a', '\xD6', '\x2', '\x2', '\x2AC', '\x2AD', '\x5', '<', '\x1F', 
		'\x2', '\x2AD', '\x2AE', '\a', 'I', '\x2', '\x2', '\x2AE', '\x2AF', '\a', 
		'\xD7', '\x2', '\x2', '\x2AF', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2B0', 
		'\x2AA', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2AB', '\x3', '\x2', '\x2', 
		'\x2', '\x2B1', 'Q', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B3', '\a', 
		'=', '\x2', '\x2', '\x2B3', '\x2B4', '\x5', '@', '!', '\x2', '\x2B4', 
		'\x2B5', '\a', '\x80', '\x2', '\x2', '\x2B5', '\x2B6', '\x5', '\xA6', 
		'T', '\x2', '\x2B6', '\x2B7', '\a', '\xD7', '\x2', '\x2', '\x2B7', 'S', 
		'\x3', '\x2', '\x2', '\x2', '\x2B8', '\x2B9', '\a', 'P', '\x2', '\x2', 
		'\x2B9', '\x2BB', '\a', '\xCF', '\x2', '\x2', '\x2BA', '\x2BC', '\x5', 
		'V', ',', '\x2', '\x2BB', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x2BB', 
		'\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BD', '\x3', '\x2', '\x2', 
		'\x2', '\x2BD', '\x2BF', '\a', '\xD7', '\x2', '\x2', '\x2BE', '\x2C0', 
		'\x5', '\xA4', 'S', '\x2', '\x2BF', '\x2BE', '\x3', '\x2', '\x2', '\x2', 
		'\x2BF', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\x3', 
		'\x2', '\x2', '\x2', '\x2C1', '\x2C3', '\a', '\xD7', '\x2', '\x2', '\x2C2', 
		'\x2C4', '\x5', 'X', '-', '\x2', '\x2C3', '\x2C2', '\x3', '\x2', '\x2', 
		'\x2', '\x2C3', '\x2C4', '\x3', '\x2', '\x2', '\x2', '\x2C4', '\x2C5', 
		'\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2CC', '\a', '\xD0', '\x2', '\x2', 
		'\x2C6', '\x2CD', '\x5', '@', '!', '\x2', '\x2C7', '\x2C8', '\a', '\xD6', 
		'\x2', '\x2', '\x2C8', '\x2C9', '\x5', '<', '\x1F', '\x2', '\x2C9', '\x2CA', 
		'\a', '\x45', '\x2', '\x2', '\x2CA', '\x2CB', '\a', '\xD7', '\x2', '\x2', 
		'\x2CB', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2CC', '\x2C6', '\x3', 
		'\x2', '\x2', '\x2', '\x2CC', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2CD', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2CF', '\x5', '\xA4', 'S', 
		'\x2', '\x2CF', 'W', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2D1', '\x5', 
		'\xA4', 'S', '\x2', '\x2D1', 'Y', '\x3', '\x2', '\x2', '\x2', '\x2D2', 
		'\x2D3', '\a', 'v', '\x2', '\x2', '\x2D3', '\x2EB', '\x5', '\xA6', 'T', 
		'\x2', '\x2D4', '\x2D6', '\a', '\xD3', '\x2', '\x2', '\x2D5', '\x2D7', 
		'\a', '\xD7', '\x2', '\x2', '\x2D6', '\x2D5', '\x3', '\x2', '\x2', '\x2', 
		'\x2D6', '\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2DB', '\x3', 
		'\x2', '\x2', '\x2', '\x2D8', '\x2DA', '\x5', '\\', '/', '\x2', '\x2D9', 
		'\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2DD', '\x3', '\x2', '\x2', 
		'\x2', '\x2DB', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2DC', 
		'\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2DE', '\x3', '\x2', '\x2', '\x2', 
		'\x2DD', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2EC', '\a', 
		'\xD4', '\x2', '\x2', '\x2DF', '\x2E1', '\a', '\xD6', '\x2', '\x2', '\x2E0', 
		'\x2E2', '\a', '\xD7', '\x2', '\x2', '\x2E1', '\x2E0', '\x3', '\x2', '\x2', 
		'\x2', '\x2E1', '\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2E2', '\x2E6', 
		'\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2E5', '\x5', '\\', '/', '\x2', 
		'\x2E4', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E8', '\x3', 
		'\x2', '\x2', '\x2', '\x2E6', '\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2E6', 
		'\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2E9', '\x3', '\x2', '\x2', 
		'\x2', '\x2E8', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2EA', 
		'\a', 'H', '\x2', '\x2', '\x2EA', '\x2EC', '\a', '\xD7', '\x2', '\x2', 
		'\x2EB', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2DF', '\x3', 
		'\x2', '\x2', '\x2', '\x2EC', '[', '\x3', '\x2', '\x2', '\x2', '\x2ED', 
		'\x2EE', '\a', '\x35', '\x2', '\x2', '\x2EE', '\x2F1', '\x5', '\xA8', 
		'U', '\x2', '\x2EF', '\x2F1', '\a', '<', '\x2', '\x2', '\x2F0', '\x2ED', 
		'\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2EF', '\x3', '\x2', '\x2', '\x2', 
		'\x2F1', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2F4', '\t', 
		'\x4', '\x2', '\x2', '\x2F3', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2F4', 
		'\x2F5', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2F3', '\x3', '\x2', '\x2', 
		'\x2', '\x2F5', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F7', 
		'\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2F8', '\x5', '<', '\x1F', '\x2', 
		'\x2F8', ']', '\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2FB', '\a', '\x33', 
		'\x2', '\x2', '\x2FA', '\x2FC', '\x5', '\xA8', 'U', '\x2', '\x2FB', '\x2FA', 
		'\x3', '\x2', '\x2', '\x2', '\x2FB', '\x2FC', '\x3', '\x2', '\x2', '\x2', 
		'\x2FC', '\x2FD', '\x3', '\x2', '\x2', '\x2', '\x2FD', '\x2FE', '\a', 
		'\xD7', '\x2', '\x2', '\x2FE', '_', '\x3', '\x2', '\x2', '\x2', '\x2FF', 
		'\x301', '\a', ':', '\x2', '\x2', '\x300', '\x302', '\x5', '\xA8', 'U', 
		'\x2', '\x301', '\x300', '\x3', '\x2', '\x2', '\x2', '\x301', '\x302', 
		'\x3', '\x2', '\x2', '\x2', '\x302', '\x303', '\x3', '\x2', '\x2', '\x2', 
		'\x303', '\x304', '\a', '\xD7', '\x2', '\x2', '\x304', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x305', '\x307', '\a', 's', '\x2', '\x2', '\x306', 
		'\x308', '\x5', '\xA8', 'U', '\x2', '\x307', '\x306', '\x3', '\x2', '\x2', 
		'\x2', '\x307', '\x308', '\x3', '\x2', '\x2', '\x2', '\x308', '\x309', 
		'\x3', '\x2', '\x2', '\x2', '\x309', '\x30A', '\a', '\xD7', '\x2', '\x2', 
		'\x30A', '\x63', '\x3', '\x2', '\x2', '\x2', '\x30B', '\x30C', '\x5', 
		'\xA8', 'U', '\x2', '\x30C', '\x30D', '\a', '\xD7', '\x2', '\x2', '\x30D', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x30F', '\a', '}', '\x2', 
		'\x2', '\x30F', '\x310', '\a', '\xCF', '\x2', '\x2', '\x310', '\x311', 
		'\x5', '\xE6', 't', '\x2', '\x311', '\x312', '\a', '\xD0', '\x2', '\x2', 
		'\x312', '\x313', '\a', '\xD7', '\x2', '\x2', '\x313', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x314', '\x33B', '\a', 'Q', '\x2', '\x2', '\x315', '\x316', 
		'\a', '\xCF', '\x2', '\x2', '\x316', '\x317', '\x5', '\xE8', 'u', '\x2', 
		'\x317', '\x319', '\a', '/', '\x2', '\x2', '\x318', '\x31A', '\a', '\xC1', 
		'\x2', '\x2', '\x319', '\x318', '\x3', '\x2', '\x2', '\x2', '\x319', '\x31A', 
		'\x3', '\x2', '\x2', '\x2', '\x31A', '\x31B', '\x3', '\x2', '\x2', '\x2', 
		'\x31B', '\x321', '\x5', '\xAA', 'V', '\x2', '\x31C', '\x31E', '\a', '\x9F', 
		'\x2', '\x2', '\x31D', '\x31F', '\a', '\xC1', '\x2', '\x2', '\x31E', '\x31D', 
		'\x3', '\x2', '\x2', '\x2', '\x31E', '\x31F', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x320', '\x3', '\x2', '\x2', '\x2', '\x320', '\x322', '\x5', 
		'\xE8', 'u', '\x2', '\x321', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x321', 
		'\x322', '\x3', '\x2', '\x2', '\x2', '\x322', '\x323', '\x3', '\x2', '\x2', 
		'\x2', '\x323', '\x324', '\a', '\xD0', '\x2', '\x2', '\x324', '\x33C', 
		'\x3', '\x2', '\x2', '\x2', '\x325', '\x326', '\a', '\xCF', '\x2', '\x2', 
		'\x326', '\x327', '\x5', '\xA8', 'U', '\x2', '\x327', '\x328', '\a', '/', 
		'\x2', '\x2', '\x328', '\x32E', '\x5', '\xAA', 'V', '\x2', '\x329', '\x32B', 
		'\a', '\x9F', '\x2', '\x2', '\x32A', '\x32C', '\a', '\xC1', '\x2', '\x2', 
		'\x32B', '\x32A', '\x3', '\x2', '\x2', '\x2', '\x32B', '\x32C', '\x3', 
		'\x2', '\x2', '\x2', '\x32C', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x32D', 
		'\x32F', '\x5', '\xE8', 'u', '\x2', '\x32E', '\x329', '\x3', '\x2', '\x2', 
		'\x2', '\x32E', '\x32F', '\x3', '\x2', '\x2', '\x2', '\x32F', '\x330', 
		'\x3', '\x2', '\x2', '\x2', '\x330', '\x331', '\a', '\xD0', '\x2', '\x2', 
		'\x331', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x332', '\x333', '\a', 
		'\xCF', '\x2', '\x2', '\x333', '\x334', '\x5', '\xE8', 'u', '\x2', '\x334', 
		'\x335', '\a', '/', '\x2', '\x2', '\x335', '\x336', '\a', '\x62', '\x2', 
		'\x2', '\x336', '\x337', '\a', '\xCF', '\x2', '\x2', '\x337', '\x338', 
		'\x5', '\xFE', '\x80', '\x2', '\x338', '\x339', '\a', '\xD0', '\x2', '\x2', 
		'\x339', '\x33A', '\a', '\xD0', '\x2', '\x2', '\x33A', '\x33C', '\x3', 
		'\x2', '\x2', '\x2', '\x33B', '\x315', '\x3', '\x2', '\x2', '\x2', '\x33B', 
		'\x325', '\x3', '\x2', '\x2', '\x2', '\x33B', '\x332', '\x3', '\x2', '\x2', 
		'\x2', '\x33C', '\x343', '\x3', '\x2', '\x2', '\x2', '\x33D', '\x344', 
		'\x5', '@', '!', '\x2', '\x33E', '\x33F', '\a', '\xD6', '\x2', '\x2', 
		'\x33F', '\x340', '\x5', '<', '\x1F', '\x2', '\x340', '\x341', '\a', '\x46', 
		'\x2', '\x2', '\x341', '\x342', '\a', '\xD7', '\x2', '\x2', '\x342', '\x344', 
		'\x3', '\x2', '\x2', '\x2', '\x343', '\x33D', '\x3', '\x2', '\x2', '\x2', 
		'\x343', '\x33E', '\x3', '\x2', '\x2', '\x2', '\x344', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x345', '\x346', '\a', 'y', '\x2', '\x2', '\x346', '\x356', 
		'\x5', '\x44', '#', '\x2', '\x347', '\x349', '\x5', 'l', '\x37', '\x2', 
		'\x348', '\x347', '\x3', '\x2', '\x2', '\x2', '\x349', '\x34A', '\x3', 
		'\x2', '\x2', '\x2', '\x34A', '\x348', '\x3', '\x2', '\x2', '\x2', '\x34A', 
		'\x34B', '\x3', '\x2', '\x2', '\x2', '\x34B', '\x34D', '\x3', '\x2', '\x2', 
		'\x2', '\x34C', '\x34E', '\x5', 'n', '\x38', '\x2', '\x34D', '\x34C', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x34E', '\x3', '\x2', '\x2', '\x2', 
		'\x34E', '\x357', '\x3', '\x2', '\x2', '\x2', '\x34F', '\x351', '\x5', 
		'l', '\x37', '\x2', '\x350', '\x34F', '\x3', '\x2', '\x2', '\x2', '\x351', 
		'\x354', '\x3', '\x2', '\x2', '\x2', '\x352', '\x350', '\x3', '\x2', '\x2', 
		'\x2', '\x352', '\x353', '\x3', '\x2', '\x2', '\x2', '\x353', '\x355', 
		'\x3', '\x2', '\x2', '\x2', '\x354', '\x352', '\x3', '\x2', '\x2', '\x2', 
		'\x355', '\x357', '\x5', 'n', '\x38', '\x2', '\x356', '\x348', '\x3', 
		'\x2', '\x2', '\x2', '\x356', '\x352', '\x3', '\x2', '\x2', '\x2', '\x357', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x358', '\x359', '\a', '\x36', '\x2', 
		'\x2', '\x359', '\x35A', '\a', '\xCF', '\x2', '\x2', '\x35A', '\x35F', 
		'\x5', '\xBE', '`', '\x2', '\x35B', '\x35C', '\a', '\xC2', '\x2', '\x2', 
		'\x35C', '\x35E', '\x5', '\xBE', '`', '\x2', '\x35D', '\x35B', '\x3', 
		'\x2', '\x2', '\x2', '\x35E', '\x361', '\x3', '\x2', '\x2', '\x2', '\x35F', 
		'\x35D', '\x3', '\x2', '\x2', '\x2', '\x35F', '\x360', '\x3', '\x2', '\x2', 
		'\x2', '\x360', '\x362', '\x3', '\x2', '\x2', '\x2', '\x361', '\x35F', 
		'\x3', '\x2', '\x2', '\x2', '\x362', '\x363', '\a', '\xDB', '\x2', '\x2', 
		'\x363', '\x364', '\a', '\xD0', '\x2', '\x2', '\x364', '\x365', '\x5', 
		'\x44', '#', '\x2', '\x365', 'm', '\x3', '\x2', '\x2', '\x2', '\x366', 
		'\x367', '\a', 'N', '\x2', '\x2', '\x367', '\x368', '\x5', '\x44', '#', 
		'\x2', '\x368', 'o', '\x3', '\x2', '\x2', '\x2', '\x369', '\x36A', '\a', 
		'w', '\x2', '\x2', '\x36A', '\x36B', '\x5', '\xA8', 'U', '\x2', '\x36B', 
		'\x36C', '\a', '\xD7', '\x2', '\x2', '\x36C', 'q', '\x3', '\x2', '\x2', 
		'\x2', '\x36D', '\x36E', '\a', 'T', '\x2', '\x2', '\x36E', '\x36F', '\x5', 
		'\x104', '\x83', '\x2', '\x36F', '\x370', '\a', '\xD7', '\x2', '\x2', 
		'\x370', 's', '\x3', '\x2', '\x2', '\x2', '\x371', '\x372', '\a', ';', 
		'\x2', '\x2', '\x372', '\x373', '\a', '\xCF', '\x2', '\x2', '\x373', '\x374', 
		'\x5', 'z', '>', '\x2', '\x374', '\x37B', '\a', '\xD0', '\x2', '\x2', 
		'\x375', '\x37C', '\x5', '@', '!', '\x2', '\x376', '\x377', '\a', '\xD6', 
		'\x2', '\x2', '\x377', '\x378', '\x5', '<', '\x1F', '\x2', '\x378', '\x379', 
		'\a', '\x44', '\x2', '\x2', '\x379', '\x37A', '\a', '\xD7', '\x2', '\x2', 
		'\x37A', '\x37C', '\x3', '\x2', '\x2', '\x2', '\x37B', '\x375', '\x3', 
		'\x2', '\x2', '\x2', '\x37B', '\x376', '\x3', '\x2', '\x2', '\x2', '\x37C', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x37D', '\x37F', '\x5', 'x', '=', '\x2', 
		'\x37E', '\x37D', '\x3', '\x2', '\x2', '\x2', '\x37F', '\x380', '\x3', 
		'\x2', '\x2', '\x2', '\x380', '\x37E', '\x3', '\x2', '\x2', '\x2', '\x380', 
		'\x381', '\x3', '\x2', '\x2', '\x2', '\x381', 'w', '\x3', '\x2', '\x2', 
		'\x2', '\x382', '\x385', '\x5', '\x6', '\x4', '\x2', '\x383', '\x385', 
		'\x5', '\n', '\x6', '\x2', '\x384', '\x382', '\x3', '\x2', '\x2', '\x2', 
		'\x384', '\x383', '\x3', '\x2', '\x2', '\x2', '\x385', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x386', '\x38B', '\x5', '\xA0', 'Q', '\x2', '\x387', '\x388', 
		'\a', '\xD5', '\x2', '\x2', '\x388', '\x38A', '\x5', '\xA0', 'Q', '\x2', 
		'\x389', '\x387', '\x3', '\x2', '\x2', '\x2', '\x38A', '\x38D', '\x3', 
		'\x2', '\x2', '\x2', '\x38B', '\x389', '\x3', '\x2', '\x2', '\x2', '\x38B', 
		'\x38C', '\x3', '\x2', '\x2', '\x2', '\x38C', '{', '\x3', '\x2', '\x2', 
		'\x2', '\x38D', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x38E', '\x390', 
		'\x5', '~', '@', '\x2', '\x38F', '\x38E', '\x3', '\x2', '\x2', '\x2', 
		'\x38F', '\x390', '\x3', '\x2', '\x2', '\x2', '\x390', '\x395', '\x3', 
		'\x2', '\x2', '\x2', '\x391', '\x392', '\a', '\xD5', '\x2', '\x2', '\x392', 
		'\x394', '\x5', '~', '@', '\x2', '\x393', '\x391', '\x3', '\x2', '\x2', 
		'\x2', '\x394', '\x397', '\x3', '\x2', '\x2', '\x2', '\x395', '\x393', 
		'\x3', '\x2', '\x2', '\x2', '\x395', '\x396', '\x3', '\x2', '\x2', '\x2', 
		'\x396', '}', '\x3', '\x2', '\x2', '\x2', '\x397', '\x395', '\x3', '\x2', 
		'\x2', '\x2', '\x398', '\x39A', '\x5', '\x30', '\x19', '\x2', '\x399', 
		'\x39B', '\a', '\xCE', '\x2', '\x2', '\x39A', '\x399', '\x3', '\x2', '\x2', 
		'\x2', '\x39A', '\x39B', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x39D', 
		'\x3', '\x2', '\x2', '\x2', '\x39C', '\x39E', '\x5', '\x80', '\x41', '\x2', 
		'\x39D', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x39E', '\x3', 
		'\x2', '\x2', '\x2', '\x39E', '\x3A0', '\x3', '\x2', '\x2', '\x2', '\x39F', 
		'\x3A1', '\a', '\xC1', '\x2', '\x2', '\x3A0', '\x39F', '\x3', '\x2', '\x2', 
		'\x2', '\x3A0', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x3A1', '\x3A3', 
		'\x3', '\x2', '\x2', '\x2', '\x3A2', '\x3A4', '\a', '\xBE', '\x2', '\x2', 
		'\x3A3', '\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3A3', '\x3A4', '\x3', 
		'\x2', '\x2', '\x2', '\x3A4', '\x3A5', '\x3', '\x2', '\x2', '\x2', '\x3A5', 
		'\x3A6', '\x5', '\x9E', 'P', '\x2', '\x3A6', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x3A7', '\x3AB', '\x5', '\xBE', '`', '\x2', '\x3A8', '\x3AB', 
		'\a', '\x34', '\x2', '\x2', '\x3A9', '\x3AB', '\x5', '\x10C', '\x87', 
		'\x2', '\x3AA', '\x3A7', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3A8', 
		'\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3A9', '\x3', '\x2', '\x2', '\x2', 
		'\x3AB', '\x81', '\x3', '\x2', '\x2', '\x2', '\x3AC', '\x3AD', '\a', 'S', 
		'\x2', '\x2', '\x3AD', '\x3B2', '\x5', '\x84', '\x43', '\x2', '\x3AE', 
		'\x3AF', '\a', '\xD5', '\x2', '\x2', '\x3AF', '\x3B1', '\x5', '\x84', 
		'\x43', '\x2', '\x3B0', '\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3B1', 
		'\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B2', '\x3B0', '\x3', '\x2', '\x2', 
		'\x2', '\x3B2', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B3', '\x3B5', 
		'\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B2', '\x3', '\x2', '\x2', '\x2', 
		'\x3B5', '\x3B6', '\a', '\xD7', '\x2', '\x2', '\x3B6', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x3B7', '\x3C0', '\a', '\xDB', '\x2', '\x2', '\x3B8', 
		'\x3B9', '\a', '\xCC', '\x2', '\x2', '\x3B9', '\x3C0', '\x5', '\xE8', 
		'u', '\x2', '\x3BA', '\x3BB', '\a', '\xCC', '\x2', '\x2', '\x3BB', '\x3BC', 
		'\a', '\xD3', '\x2', '\x2', '\x3BC', '\x3BD', '\x5', '\xA8', 'U', '\x2', 
		'\x3BD', '\x3BE', '\a', '\xD4', '\x2', '\x2', '\x3BE', '\x3C0', '\x3', 
		'\x2', '\x2', '\x2', '\x3BF', '\x3B7', '\x3', '\x2', '\x2', '\x2', '\x3BF', 
		'\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3BF', '\x3BA', '\x3', '\x2', '\x2', 
		'\x2', '\x3C0', '\x85', '\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3C2', 
		'\a', '@', '\x2', '\x2', '\x3C2', '\x3C3', '\x5', '\xA4', 'S', '\x2', 
		'\x3C3', '\x3C4', '\a', '\xD7', '\x2', '\x2', '\x3C4', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x3C5', '\x3C6', '\a', 't', '\x2', '\x2', '\x3C6', 
		'\x3CB', '\x5', '\x9E', 'P', '\x2', '\x3C7', '\x3C8', '\a', '\xD5', '\x2', 
		'\x2', '\x3C8', '\x3CA', '\x5', '\x9E', 'P', '\x2', '\x3C9', '\x3C7', 
		'\x3', '\x2', '\x2', '\x2', '\x3CA', '\x3CD', '\x3', '\x2', '\x2', '\x2', 
		'\x3CB', '\x3C9', '\x3', '\x2', '\x2', '\x2', '\x3CB', '\x3CC', '\x3', 
		'\x2', '\x2', '\x2', '\x3CC', '\x3CE', '\x3', '\x2', '\x2', '\x2', '\x3CD', 
		'\x3CB', '\x3', '\x2', '\x2', '\x2', '\x3CE', '\x3CF', '\a', '\xD7', '\x2', 
		'\x2', '\x3CF', '\x89', '\x3', '\x2', '\x2', '\x2', '\x3D0', '\x3D1', 
		'\x5', '\x30', '\x19', '\x2', '\x3D1', '\x3D3', '\x5', '\x9A', 'N', '\x2', 
		'\x3D2', '\x3D4', '\x5', '\x80', '\x41', '\x2', '\x3D3', '\x3D2', '\x3', 
		'\x2', '\x2', '\x2', '\x3D3', '\x3D4', '\x3', '\x2', '\x2', '\x2', '\x3D4', 
		'\x3D5', '\x3', '\x2', '\x2', '\x2', '\x3D5', '\x3DA', '\x5', '\x9E', 
		'P', '\x2', '\x3D6', '\x3D7', '\a', '\xD5', '\x2', '\x2', '\x3D7', '\x3D9', 
		'\x5', '\x9E', 'P', '\x2', '\x3D8', '\x3D6', '\x3', '\x2', '\x2', '\x2', 
		'\x3D9', '\x3DC', '\x3', '\x2', '\x2', '\x2', '\x3DA', '\x3D8', '\x3', 
		'\x2', '\x2', '\x2', '\x3DA', '\x3DB', '\x3', '\x2', '\x2', '\x2', '\x3DB', 
		'\x3DD', '\x3', '\x2', '\x2', '\x2', '\x3DC', '\x3DA', '\x3', '\x2', '\x2', 
		'\x2', '\x3DD', '\x3DE', '\a', '\xD7', '\x2', '\x2', '\x3DE', '\x40A', 
		'\x3', '\x2', '\x2', '\x2', '\x3DF', '\x3E1', '\x5', '\x30', '\x19', '\x2', 
		'\x3E0', '\x3E2', '\x5', '\x9C', 'O', '\x2', '\x3E1', '\x3E0', '\x3', 
		'\x2', '\x2', '\x2', '\x3E1', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3E2', 
		'\x3E3', '\x3', '\x2', '\x2', '\x2', '\x3E3', '\x3E5', '\a', '\x39', '\x2', 
		'\x2', '\x3E4', '\x3E6', '\x5', '\x80', '\x41', '\x2', '\x3E5', '\x3E4', 
		'\x3', '\x2', '\x2', '\x2', '\x3E5', '\x3E6', '\x3', '\x2', '\x2', '\x2', 
		'\x3E6', '\x3E7', '\x3', '\x2', '\x2', '\x2', '\x3E7', '\x3EC', '\x5', 
		'\xA0', 'Q', '\x2', '\x3E8', '\x3E9', '\a', '\xD5', '\x2', '\x2', '\x3E9', 
		'\x3EB', '\x5', '\xA0', 'Q', '\x2', '\x3EA', '\x3E8', '\x3', '\x2', '\x2', 
		'\x2', '\x3EB', '\x3EE', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3EA', 
		'\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3ED', '\x3', '\x2', '\x2', '\x2', 
		'\x3ED', '\x3EF', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3EC', '\x3', 
		'\x2', '\x2', '\x2', '\x3EF', '\x3F0', '\a', '\xD7', '\x2', '\x2', '\x3F0', 
		'\x40A', '\x3', '\x2', '\x2', '\x2', '\x3F1', '\x3F3', '\x5', '\x30', 
		'\x19', '\x2', '\x3F2', '\x3F4', '\x5', '\x9C', 'O', '\x2', '\x3F3', '\x3F2', 
		'\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3F4', '\x3', '\x2', '\x2', '\x2', 
		'\x3F4', '\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3F5', '\x3F7', '\a', 
		'R', '\x2', '\x2', '\x3F6', '\x3F8', '\a', '\xC1', '\x2', '\x2', '\x3F7', 
		'\x3F6', '\x3', '\x2', '\x2', '\x2', '\x3F7', '\x3F8', '\x3', '\x2', '\x2', 
		'\x2', '\x3F8', '\x3F9', '\x3', '\x2', '\x2', '\x2', '\x3F9', '\x3FB', 
		'\x5', '\x104', '\x83', '\x2', '\x3FA', '\x3FC', '\x5', '$', '\x13', '\x2', 
		'\x3FB', '\x3FA', '\x3', '\x2', '\x2', '\x2', '\x3FB', '\x3FC', '\x3', 
		'\x2', '\x2', '\x2', '\x3FC', '\x3FD', '\x3', '\x2', '\x2', '\x2', '\x3FD', 
		'\x3FE', '\a', '\xCF', '\x2', '\x2', '\x3FE', '\x3FF', '\x5', '|', '?', 
		'\x2', '\x3FF', '\x401', '\a', '\xD0', '\x2', '\x2', '\x400', '\x402', 
		'\x5', '\x96', 'L', '\x2', '\x401', '\x400', '\x3', '\x2', '\x2', '\x2', 
		'\x401', '\x402', '\x3', '\x2', '\x2', '\x2', '\x402', '\x403', '\x3', 
		'\x2', '\x2', '\x2', '\x403', '\x404', '\x5', '\x98', 'M', '\x2', '\x404', 
		'\x40A', '\x3', '\x2', '\x2', '\x2', '\x405', '\x406', '\a', '~', '\x2', 
		'\x2', '\x406', '\x407', '\x5', '\xCC', 'g', '\x2', '\x407', '\x408', 
		'\x5', '\x8C', 'G', '\x2', '\x408', '\x40A', '\x3', '\x2', '\x2', '\x2', 
		'\x409', '\x3D0', '\x3', '\x2', '\x2', '\x2', '\x409', '\x3DF', '\x3', 
		'\x2', '\x2', '\x2', '\x409', '\x3F1', '\x3', '\x2', '\x2', '\x2', '\x409', 
		'\x405', '\x3', '\x2', '\x2', '\x2', '\x40A', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x40B', '\x415', '\a', '\xD7', '\x2', '\x2', '\x40C', '\x410', 
		'\a', '\xD3', '\x2', '\x2', '\x40D', '\x40F', '\x5', '\x8E', 'H', '\x2', 
		'\x40E', '\x40D', '\x3', '\x2', '\x2', '\x2', '\x40F', '\x412', '\x3', 
		'\x2', '\x2', '\x2', '\x410', '\x40E', '\x3', '\x2', '\x2', '\x2', '\x410', 
		'\x411', '\x3', '\x2', '\x2', '\x2', '\x411', '\x413', '\x3', '\x2', '\x2', 
		'\x2', '\x412', '\x410', '\x3', '\x2', '\x2', '\x2', '\x413', '\x415', 
		'\a', '\xD4', '\x2', '\x2', '\x414', '\x40B', '\x3', '\x2', '\x2', '\x2', 
		'\x414', '\x40C', '\x3', '\x2', '\x2', '\x2', '\x415', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x416', '\x419', '\x5', '\x90', 'I', '\x2', '\x417', 
		'\x419', '\x5', '\x92', 'J', '\x2', '\x418', '\x416', '\x3', '\x2', '\x2', 
		'\x2', '\x418', '\x417', '\x3', '\x2', '\x2', '\x2', '\x419', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x41A', '\x41B', '\x5', '\xC6', '\x64', '\x2', 
		'\x41B', '\x41C', '\a', '\xBB', '\x2', '\x2', '\x41C', '\x41D', '\x5', 
		'\x104', '\x83', '\x2', '\x41D', '\x41E', '\a', '[', '\x2', '\x2', '\x41E', 
		'\x41F', '\x5', '\xCC', 'g', '\x2', '\x41F', '\x420', '\a', '\xD7', '\x2', 
		'\x2', '\x420', '\x91', '\x3', '\x2', '\x2', '\x2', '\x421', '\x422', 
		'\x5', '\x94', 'K', '\x2', '\x422', '\x428', '\a', '/', '\x2', '\x2', 
		'\x423', '\x429', '\x5', '\x106', '\x84', '\x2', '\x424', '\x426', '\x5', 
		'\x106', '\x84', '\x2', '\x425', '\x424', '\x3', '\x2', '\x2', '\x2', 
		'\x425', '\x426', '\x3', '\x2', '\x2', '\x2', '\x426', '\x427', '\x3', 
		'\x2', '\x2', '\x2', '\x427', '\x429', '\x5', '\x104', '\x83', '\x2', 
		'\x428', '\x423', '\x3', '\x2', '\x2', '\x2', '\x428', '\x425', '\x3', 
		'\x2', '\x2', '\x2', '\x429', '\x42A', '\x3', '\x2', '\x2', '\x2', '\x42A', 
		'\x42B', '\a', '\xD7', '\x2', '\x2', '\x42B', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x42C', '\x42D', '\x5', '\xC6', '\x64', '\x2', '\x42D', '\x42E', 
		'\a', '\xBB', '\x2', '\x2', '\x42E', '\x430', '\x3', '\x2', '\x2', '\x2', 
		'\x42F', '\x42C', '\x3', '\x2', '\x2', '\x2', '\x42F', '\x430', '\x3', 
		'\x2', '\x2', '\x2', '\x430', '\x431', '\x3', '\x2', '\x2', '\x2', '\x431', 
		'\x432', '\x5', '\x104', '\x83', '\x2', '\x432', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\x433', '\x434', '\a', '\xD6', '\x2', '\x2', '\x434', '\x436', 
		'\x5', '\x104', '\x83', '\x2', '\x435', '\x437', '\x5', '\xCE', 'h', '\x2', 
		'\x436', '\x435', '\x3', '\x2', '\x2', '\x2', '\x436', '\x437', '\x3', 
		'\x2', '\x2', '\x2', '\x437', '\x97', '\x3', '\x2', '\x2', '\x2', '\x438', 
		'\x43B', '\a', '\xD7', '\x2', '\x2', '\x439', '\x43B', '\x5', '\x44', 
		'#', '\x2', '\x43A', '\x438', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x439', 
		'\x3', '\x2', '\x2', '\x2', '\x43B', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x43C', '\x43F', '\x5', '\x9C', 'O', '\x2', '\x43D', '\x43F', '\a', '\x7F', 
		'\x2', '\x2', '\x43E', '\x43C', '\x3', '\x2', '\x2', '\x2', '\x43E', '\x43D', 
		'\x3', '\x2', '\x2', '\x2', '\x43F', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x440', '\x442', '\x5', '\x106', '\x84', '\x2', '\x441', '\x440', '\x3', 
		'\x2', '\x2', '\x2', '\x442', '\x443', '\x3', '\x2', '\x2', '\x2', '\x443', 
		'\x441', '\x3', '\x2', '\x2', '\x2', '\x443', '\x444', '\x3', '\x2', '\x2', 
		'\x2', '\x444', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x445', '\x448', 
		'\a', '\xDB', '\x2', '\x2', '\x446', '\x447', '\a', '\xD8', '\x2', '\x2', 
		'\x447', '\x449', '\x5', '\xD2', 'j', '\x2', '\x448', '\x446', '\x3', 
		'\x2', '\x2', '\x2', '\x448', '\x449', '\x3', '\x2', '\x2', '\x2', '\x449', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x44A', '\x44B', '\x5', '\x104', 
		'\x83', '\x2', '\x44B', '\x44C', '\a', '\xD8', '\x2', '\x2', '\x44C', 
		'\x44D', '\x5', '\xD2', 'j', '\x2', '\x44D', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\x44E', '\x44F', '\x5', '\x30', '\x19', '\x2', '\x44F', '\x450', 
		'\a', '\x39', '\x2', '\x2', '\x450', '\x455', '\x5', '\xA0', 'Q', '\x2', 
		'\x451', '\x452', '\a', '\xD5', '\x2', '\x2', '\x452', '\x454', '\x5', 
		'\xA0', 'Q', '\x2', '\x453', '\x451', '\x3', '\x2', '\x2', '\x2', '\x454', 
		'\x457', '\x3', '\x2', '\x2', '\x2', '\x455', '\x453', '\x3', '\x2', '\x2', 
		'\x2', '\x455', '\x456', '\x3', '\x2', '\x2', '\x2', '\x456', '\x458', 
		'\x3', '\x2', '\x2', '\x2', '\x457', '\x455', '\x3', '\x2', '\x2', '\x2', 
		'\x458', '\x459', '\a', '\xD7', '\x2', '\x2', '\x459', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x45A', '\x45F', '\x5', '\xA8', 'U', '\x2', '\x45B', 
		'\x45C', '\a', '\xD5', '\x2', '\x2', '\x45C', '\x45E', '\x5', '\xA8', 
		'U', '\x2', '\x45D', '\x45B', '\x3', '\x2', '\x2', '\x2', '\x45E', '\x461', 
		'\x3', '\x2', '\x2', '\x2', '\x45F', '\x45D', '\x3', '\x2', '\x2', '\x2', 
		'\x45F', '\x460', '\x3', '\x2', '\x2', '\x2', '\x460', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\x461', '\x45F', '\x3', '\x2', '\x2', '\x2', '\x462', 
		'\x465', '\a', '\xCF', '\x2', '\x2', '\x463', '\x466', '\x5', '\xA8', 
		'U', '\x2', '\x464', '\x466', '\x5', '\xB4', '[', '\x2', '\x465', '\x463', 
		'\x3', '\x2', '\x2', '\x2', '\x465', '\x464', '\x3', '\x2', '\x2', '\x2', 
		'\x466', '\x467', '\x3', '\x2', '\x2', '\x2', '\x467', '\x468', '\a', 
		'\xD0', '\x2', '\x2', '\x468', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x469', 
		'\x46A', '\b', 'U', '\x1', '\x2', '\x46A', '\x46B', '\a', '\x38', '\x2', 
		'\x2', '\x46B', '\x4B7', '\x5', '\xA8', 'U', '/', '\x46C', '\x4B7', '\x5', 
		'\xB0', 'Y', '\x2', '\x46D', '\x46E', '\x5', '\xE0', 'q', '\x2', '\x46E', 
		'\x46F', '\a', '\xD1', '\x2', '\x2', '\x46F', '\x470', '\x5', '\xA8', 
		'U', '\x2', '\x470', '\x471', '\a', '\xD2', '\x2', '\x2', '\x471', '\x4B7', 
		'\x3', '\x2', '\x2', '\x2', '\x472', '\x473', '\a', '\xCF', '\x2', '\x2', 
		'\x473', '\x474', '\x5', '\x10E', '\x88', '\x2', '\x474', '\x475', '\a', 
		'\xD0', '\x2', '\x2', '\x475', '\x476', '\x5', '\xA8', 'U', ',', '\x476', 
		'\x4B7', '\x3', '\x2', '\x2', '\x2', '\x477', '\x478', '\t', '\x5', '\x2', 
		'\x2', '\x478', '\x4B7', '\x5', '\xA8', 'U', '+', '\x479', '\x47A', '\t', 
		'\x6', '\x2', '\x2', '\x47A', '\x4B7', '\x5', '\xA8', 'U', '*', '\x47B', 
		'\x47C', '\t', '\a', '\x2', '\x2', '\x47C', '\x4B7', '\x5', '\xE8', 'u', 
		'\x2', '\x47D', '\x47E', '\x5', '\xE8', 'u', '\x2', '\x47E', '\x47F', 
		'\t', '\a', '\x2', '\x2', '\x47F', '\x4B7', '\x3', '\x2', '\x2', '\x2', 
		'\x480', '\x481', '\a', 'l', '\x2', '\x2', '\x481', '\x4B7', '\x5', '\xA8', 
		'U', '\'', '\x482', '\x4B7', '\x5', '\xE8', 'u', '\x2', '\x483', '\x4B7', 
		'\x5', '\xD8', 'm', '\x2', '\x484', '\x4B7', '\x5', '\xE2', 'r', '\x2', 
		'\x485', '\x4B7', '\a', '\xDC', '\x2', '\x2', '\x486', '\x4B7', '\a', 
		'\xE2', '\x2', '\x2', '\x487', '\x4B7', '\x5', '\xA6', 'T', '\x2', '\x488', 
		'\x4B7', '\x5', '\xAC', 'W', '\x2', '\x489', '\x4B7', '\a', '\x81', '\x2', 
		'\x2', '\x48A', '\x48B', '\a', '\x62', '\x2', '\x2', '\x48B', '\x48C', 
		'\a', '\xCF', '\x2', '\x2', '\x48C', '\x48D', '\x5', '\xFE', '\x80', '\x2', 
		'\x48D', '\x48E', '\a', '\xD0', '\x2', '\x2', '\x48E', '\x48F', '\a', 
		'\xD8', '\x2', '\x2', '\x48F', '\x490', '\x5', '\xA8', 'U', '\x1E', '\x490', 
		'\x4B7', '\x3', '\x2', '\x2', '\x2', '\x491', '\x492', '\a', '\x61', '\x2', 
		'\x2', '\x492', '\x493', '\a', '\xCF', '\x2', '\x2', '\x493', '\x494', 
		'\x5', '\xE6', 't', '\x2', '\x494', '\x495', '\a', '\xD0', '\x2', '\x2', 
		'\x495', '\x4B7', '\x3', '\x2', '\x2', '\x2', '\x496', '\x497', '\a', 
		'\x43', '\x2', '\x2', '\x497', '\x498', '\a', '\xCF', '\x2', '\x2', '\x498', 
		'\x499', '\x5', '\xE8', 'u', '\x2', '\x499', '\x49A', '\a', '\xD0', '\x2', 
		'\x2', '\x49A', '\x4B7', '\x3', '\x2', '\x2', '\x2', '\x49B', '\x49C', 
		'\a', 'J', '\x2', '\x2', '\x49C', '\x49D', '\a', '\xCF', '\x2', '\x2', 
		'\x49D', '\x49E', '\x5', '\xA8', 'U', '\x2', '\x49E', '\x49F', '\a', '\xD0', 
		'\x2', '\x2', '\x49F', '\x4B7', '\x3', '\x2', '\x2', '\x2', '\x4A0', '\x4A4', 
		'\a', 'K', '\x2', '\x2', '\x4A1', '\x4A2', '\a', '\xCF', '\x2', '\x2', 
		'\x4A2', '\x4A5', '\a', '\xD0', '\x2', '\x2', '\x4A3', '\x4A5', '\x5', 
		'\xA6', 'T', '\x2', '\x4A4', '\x4A1', '\x3', '\x2', '\x2', '\x2', '\x4A4', 
		'\x4A3', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\x4A5', '\x3', '\x2', '\x2', 
		'\x2', '\x4A5', '\x4B7', '\x3', '\x2', '\x2', '\x2', '\x4A6', '\x4A7', 
		'\t', '\b', '\x2', '\x2', '\x4A7', '\x4B7', '\x5', '\xA8', 'U', '\x19', 
		'\x4A8', '\x4A9', '\t', '\t', '\x2', '\x2', '\x4A9', '\x4B7', '\x5', '\xA8', 
		'U', '\x18', '\x4AA', '\x4B7', '\x5', '\xAE', 'X', '\x2', '\x4AB', '\x4AC', 
		'\x5', '\xAA', 'V', '\x2', '\x4AC', '\x4AD', '\x5', '\xB2', 'Z', '\x2', 
		'\x4AD', '\x4AE', '\x5', '\xA8', 'U', '\a', '\x4AE', '\x4B7', '\x3', '\x2', 
		'\x2', '\x2', '\x4AF', '\x4B0', '\x5', '\xAA', 'V', '\x2', '\x4B0', '\x4B1', 
		'\a', '\xD8', '\x2', '\x2', '\x4B1', '\x4B4', '\a', '\xC1', '\x2', '\x2', 
		'\x4B2', '\x4B5', '\x5', '\xE8', 'u', '\x2', '\x4B3', '\x4B5', '\x5', 
		'\xB0', 'Y', '\x2', '\x4B4', '\x4B2', '\x3', '\x2', '\x2', '\x2', '\x4B4', 
		'\x4B3', '\x3', '\x2', '\x2', '\x2', '\x4B5', '\x4B7', '\x3', '\x2', '\x2', 
		'\x2', '\x4B6', '\x469', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x46C', 
		'\x3', '\x2', '\x2', '\x2', '\x4B6', '\x46D', '\x3', '\x2', '\x2', '\x2', 
		'\x4B6', '\x472', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x477', '\x3', 
		'\x2', '\x2', '\x2', '\x4B6', '\x479', '\x3', '\x2', '\x2', '\x2', '\x4B6', 
		'\x47B', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x47D', '\x3', '\x2', '\x2', 
		'\x2', '\x4B6', '\x480', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x482', 
		'\x3', '\x2', '\x2', '\x2', '\x4B6', '\x483', '\x3', '\x2', '\x2', '\x2', 
		'\x4B6', '\x484', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x485', '\x3', 
		'\x2', '\x2', '\x2', '\x4B6', '\x486', '\x3', '\x2', '\x2', '\x2', '\x4B6', 
		'\x487', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x488', '\x3', '\x2', '\x2', 
		'\x2', '\x4B6', '\x489', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x48A', 
		'\x3', '\x2', '\x2', '\x2', '\x4B6', '\x491', '\x3', '\x2', '\x2', '\x2', 
		'\x4B6', '\x496', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x49B', '\x3', 
		'\x2', '\x2', '\x2', '\x4B6', '\x4A0', '\x3', '\x2', '\x2', '\x2', '\x4B6', 
		'\x4A6', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x4A8', '\x3', '\x2', '\x2', 
		'\x2', '\x4B6', '\x4AA', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x4AB', 
		'\x3', '\x2', '\x2', '\x2', '\x4B6', '\x4AF', '\x3', '\x2', '\x2', '\x2', 
		'\x4B7', '\x4F4', '\x3', '\x2', '\x2', '\x2', '\x4B8', '\x4B9', '\f', 
		'\x16', '\x2', '\x2', '\x4B9', '\x4BA', '\a', '\xAB', '\x2', '\x2', '\x4BA', 
		'\x4F3', '\x5', '\xA8', 'U', '\x16', '\x4BB', '\x4BC', '\f', '\x14', '\x2', 
		'\x2', '\x4BC', '\x4BD', '\t', '\n', '\x2', '\x2', '\x4BD', '\x4F3', '\x5', 
		'\xA8', 'U', '\x15', '\x4BE', '\x4BF', '\f', '\x13', '\x2', '\x2', '\x4BF', 
		'\x4C0', '\t', '\v', '\x2', '\x2', '\x4C0', '\x4F3', '\x5', '\xA8', 'U', 
		'\x14', '\x4C1', '\x4C2', '\f', '\x12', '\x2', '\x2', '\x4C2', '\x4C3', 
		'\t', '\f', '\x2', '\x2', '\x4C3', '\x4F3', '\x5', '\xA8', 'U', '\x13', 
		'\x4C4', '\x4C5', '\f', '\x11', '\x2', '\x2', '\x4C5', '\x4C6', '\t', 
		'\r', '\x2', '\x2', '\x4C6', '\x4F3', '\x5', '\xA8', 'U', '\x12', '\x4C7', 
		'\x4C8', '\f', '\x10', '\x2', '\x2', '\x4C8', '\x4C9', '\t', '\xE', '\x2', 
		'\x2', '\x4C9', '\x4F3', '\x5', '\xA8', 'U', '\x11', '\x4CA', '\x4CB', 
		'\f', '\xF', '\x2', '\x2', '\x4CB', '\x4CC', '\a', '\xC1', '\x2', '\x2', 
		'\x4CC', '\x4F3', '\x5', '\xA8', 'U', '\x10', '\x4CD', '\x4CE', '\f', 
		'\xE', '\x2', '\x2', '\x4CE', '\x4CF', '\a', '\xC4', '\x2', '\x2', '\x4CF', 
		'\x4F3', '\x5', '\xA8', 'U', '\xF', '\x4D0', '\x4D1', '\f', '\r', '\x2', 
		'\x2', '\x4D1', '\x4D2', '\a', '\xC2', '\x2', '\x2', '\x4D2', '\x4F3', 
		'\x5', '\xA8', 'U', '\xE', '\x4D3', '\x4D4', '\f', '\f', '\x2', '\x2', 
		'\x4D4', '\x4D5', '\a', '\xB6', '\x2', '\x2', '\x4D5', '\x4F3', '\x5', 
		'\xA8', 'U', '\r', '\x4D6', '\x4D7', '\f', '\v', '\x2', '\x2', '\x4D7', 
		'\x4D8', '\a', '\xB5', '\x2', '\x2', '\x4D8', '\x4F3', '\x5', '\xA8', 
		'U', '\f', '\x4D9', '\x4DA', '\f', '\n', '\x2', '\x2', '\x4DA', '\x4DC', 
		'\a', '\xCE', '\x2', '\x2', '\x4DB', '\x4DD', '\x5', '\xA8', 'U', '\x2', 
		'\x4DC', '\x4DB', '\x3', '\x2', '\x2', '\x2', '\x4DC', '\x4DD', '\x3', 
		'\x2', '\x2', '\x2', '\x4DD', '\x4DE', '\x3', '\x2', '\x2', '\x2', '\x4DE', 
		'\x4DF', '\a', '\xD6', '\x2', '\x2', '\x4DF', '\x4F3', '\x5', '\xA8', 
		'U', '\v', '\x4E0', '\x4E1', '\f', '\t', '\x2', '\x2', '\x4E1', '\x4E2', 
		'\a', '\xB7', '\x2', '\x2', '\x4E2', '\x4F3', '\x5', '\xA8', 'U', '\n', 
		'\x4E3', '\x4E4', '\f', '\b', '\x2', '\x2', '\x4E4', '\x4E5', '\a', '\x9C', 
		'\x2', '\x2', '\x4E5', '\x4F3', '\x5', '\xA8', 'U', '\t', '\x4E6', '\x4E7', 
		'\f', '\x5', '\x2', '\x2', '\x4E7', '\x4E8', '\a', '\x63', '\x2', '\x2', 
		'\x4E8', '\x4F3', '\x5', '\xA8', 'U', '\x6', '\x4E9', '\x4EA', '\f', '\x4', 
		'\x2', '\x2', '\x4EA', '\x4EB', '\a', '\x65', '\x2', '\x2', '\x4EB', '\x4F3', 
		'\x5', '\xA8', 'U', '\x5', '\x4EC', '\x4ED', '\f', '\x3', '\x2', '\x2', 
		'\x4ED', '\x4EE', '\a', '\x64', '\x2', '\x2', '\x4EE', '\x4F3', '\x5', 
		'\xA8', 'U', '\x4', '\x4EF', '\x4F0', '\f', '\x15', '\x2', '\x2', '\x4F0', 
		'\x4F1', '\a', 'Z', '\x2', '\x2', '\x4F1', '\x4F3', '\x5', '\xC0', '\x61', 
		'\x2', '\x4F2', '\x4B8', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4BB', 
		'\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4BE', '\x3', '\x2', '\x2', '\x2', 
		'\x4F2', '\x4C1', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4C4', '\x3', 
		'\x2', '\x2', '\x2', '\x4F2', '\x4C7', '\x3', '\x2', '\x2', '\x2', '\x4F2', 
		'\x4CA', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4CD', '\x3', '\x2', '\x2', 
		'\x2', '\x4F2', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4D3', 
		'\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4D6', '\x3', '\x2', '\x2', '\x2', 
		'\x4F2', '\x4D9', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4E0', '\x3', 
		'\x2', '\x2', '\x2', '\x4F2', '\x4E3', '\x3', '\x2', '\x2', '\x2', '\x4F2', 
		'\x4E6', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4E9', '\x3', '\x2', '\x2', 
		'\x2', '\x4F2', '\x4EC', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4EF', 
		'\x3', '\x2', '\x2', '\x2', '\x4F3', '\x4F6', '\x3', '\x2', '\x2', '\x2', 
		'\x4F4', '\x4F2', '\x3', '\x2', '\x2', '\x2', '\x4F4', '\x4F5', '\x3', 
		'\x2', '\x2', '\x2', '\x4F5', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x4F6', 
		'\x4F4', '\x3', '\x2', '\x2', '\x2', '\x4F7', '\x4FA', '\x5', '\xE8', 
		'u', '\x2', '\x4F8', '\x4FA', '\x5', '\xAC', 'W', '\x2', '\x4F9', '\x4F7', 
		'\x3', '\x2', '\x2', '\x2', '\x4F9', '\x4F8', '\x3', '\x2', '\x2', '\x2', 
		'\x4FA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FC', '\a', '.', 
		'\x2', '\x2', '\x4FC', '\x4FE', '\a', '\xCF', '\x2', '\x2', '\x4FD', '\x4FF', 
		'\x5', '\xB6', '\\', '\x2', '\x4FE', '\x4FD', '\x3', '\x2', '\x2', '\x2', 
		'\x4FE', '\x4FF', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x500', '\x3', 
		'\x2', '\x2', '\x2', '\x500', '\x507', '\a', '\xD0', '\x2', '\x2', '\x501', 
		'\x503', '\a', '\xD1', '\x2', '\x2', '\x502', '\x504', '\x5', '\xB6', 
		'\\', '\x2', '\x503', '\x502', '\x3', '\x2', '\x2', '\x2', '\x503', '\x504', 
		'\x3', '\x2', '\x2', '\x2', '\x504', '\x505', '\x3', '\x2', '\x2', '\x2', 
		'\x505', '\x507', '\a', '\xD2', '\x2', '\x2', '\x506', '\x4FB', '\x3', 
		'\x2', '\x2', '\x2', '\x506', '\x501', '\x3', '\x2', '\x2', '\x2', '\x507', 
		'\x50C', '\x3', '\x2', '\x2', '\x2', '\x508', '\x509', '\a', '\xD1', '\x2', 
		'\x2', '\x509', '\x50A', '\x5', '\xA8', 'U', '\x2', '\x50A', '\x50B', 
		'\a', '\xD2', '\x2', '\x2', '\x50B', '\x50D', '\x3', '\x2', '\x2', '\x2', 
		'\x50C', '\x508', '\x3', '\x2', '\x2', '\x2', '\x50C', '\x50D', '\x3', 
		'\x2', '\x2', '\x2', '\x50D', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x50E', 
		'\x510', '\a', 't', '\x2', '\x2', '\x50F', '\x50E', '\x3', '\x2', '\x2', 
		'\x2', '\x50F', '\x510', '\x3', '\x2', '\x2', '\x2', '\x510', '\x511', 
		'\x3', '\x2', '\x2', '\x2', '\x511', '\x513', '\a', 'R', '\x2', '\x2', 
		'\x512', '\x514', '\a', '\xC1', '\x2', '\x2', '\x513', '\x512', '\x3', 
		'\x2', '\x2', '\x2', '\x513', '\x514', '\x3', '\x2', '\x2', '\x2', '\x514', 
		'\x515', '\x3', '\x2', '\x2', '\x2', '\x515', '\x516', '\a', '\xCF', '\x2', 
		'\x2', '\x516', '\x517', '\x5', '|', '?', '\x2', '\x517', '\x519', '\a', 
		'\xD0', '\x2', '\x2', '\x518', '\x51A', '\x5', '\xBA', '^', '\x2', '\x519', 
		'\x518', '\x3', '\x2', '\x2', '\x2', '\x519', '\x51A', '\x3', '\x2', '\x2', 
		'\x2', '\x51A', '\x51D', '\x3', '\x2', '\x2', '\x2', '\x51B', '\x51C', 
		'\a', '\xD6', '\x2', '\x2', '\x51C', '\x51E', '\x5', '\x80', '\x41', '\x2', 
		'\x51D', '\x51B', '\x3', '\x2', '\x2', '\x2', '\x51D', '\x51E', '\x3', 
		'\x2', '\x2', '\x2', '\x51E', '\x51F', '\x3', '\x2', '\x2', '\x2', '\x51F', 
		'\x520', '\x5', '\x44', '#', '\x2', '\x520', '\x529', '\x3', '\x2', '\x2', 
		'\x2', '\x521', '\x522', '\a', '\x83', '\x2', '\x2', '\x522', '\x523', 
		'\a', '\xCF', '\x2', '\x2', '\x523', '\x524', '\x5', '|', '?', '\x2', 
		'\x524', '\x525', '\a', '\xD0', '\x2', '\x2', '\x525', '\x526', '\a', 
		'\x9F', '\x2', '\x2', '\x526', '\x527', '\x5', '\xA8', 'U', '\x2', '\x527', 
		'\x529', '\x3', '\x2', '\x2', '\x2', '\x528', '\x50F', '\x3', '\x2', '\x2', 
		'\x2', '\x528', '\x521', '\x3', '\x2', '\x2', '\x2', '\x529', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\x52A', '\x52B', '\a', 'g', '\x2', '\x2', 
		'\x52B', '\x52D', '\x5', '\xC0', '\x61', '\x2', '\x52C', '\x52E', '\x5', 
		'\xCE', 'h', '\x2', '\x52D', '\x52C', '\x3', '\x2', '\x2', '\x2', '\x52D', 
		'\x52E', '\x3', '\x2', '\x2', '\x2', '\x52E', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\x52F', '\x530', '\t', '\xF', '\x2', '\x2', '\x530', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\x531', '\x539', '\a', '\x81', '\x2', '\x2', '\x532', 
		'\x535', '\x5', '\xA8', 'U', '\x2', '\x533', '\x534', '\a', '\x9F', '\x2', 
		'\x2', '\x534', '\x536', '\x5', '\xA8', 'U', '\x2', '\x535', '\x533', 
		'\x3', '\x2', '\x2', '\x2', '\x535', '\x536', '\x3', '\x2', '\x2', '\x2', 
		'\x536', '\x53A', '\x3', '\x2', '\x2', '\x2', '\x537', '\x538', '\a', 
		'\x82', '\x2', '\x2', '\x538', '\x53A', '\x5', '\xA8', 'U', '\x2', '\x539', 
		'\x532', '\x3', '\x2', '\x2', '\x2', '\x539', '\x537', '\x3', '\x2', '\x2', 
		'\x2', '\x53A', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x53B', '\x540', 
		'\x5', '\xB8', ']', '\x2', '\x53C', '\x53D', '\a', '\xD5', '\x2', '\x2', 
		'\x53D', '\x53F', '\x5', '\xB8', ']', '\x2', '\x53E', '\x53C', '\x3', 
		'\x2', '\x2', '\x2', '\x53F', '\x542', '\x3', '\x2', '\x2', '\x2', '\x540', 
		'\x53E', '\x3', '\x2', '\x2', '\x2', '\x540', '\x541', '\x3', '\x2', '\x2', 
		'\x2', '\x541', '\x544', '\x3', '\x2', '\x2', '\x2', '\x542', '\x540', 
		'\x3', '\x2', '\x2', '\x2', '\x543', '\x545', '\a', '\xD5', '\x2', '\x2', 
		'\x544', '\x543', '\x3', '\x2', '\x2', '\x2', '\x544', '\x545', '\x3', 
		'\x2', '\x2', '\x2', '\x545', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x546', 
		'\x549', '\x5', '\xA8', 'U', '\x2', '\x547', '\x548', '\a', '\x9F', '\x2', 
		'\x2', '\x548', '\x54A', '\x5', '\xA8', 'U', '\x2', '\x549', '\x547', 
		'\x3', '\x2', '\x2', '\x2', '\x549', '\x54A', '\x3', '\x2', '\x2', '\x2', 
		'\x54A', '\x553', '\x3', '\x2', '\x2', '\x2', '\x54B', '\x54C', '\x5', 
		'\xA8', 'U', '\x2', '\x54C', '\x54D', '\a', '\x9F', '\x2', '\x2', '\x54D', 
		'\x54F', '\x3', '\x2', '\x2', '\x2', '\x54E', '\x54B', '\x3', '\x2', '\x2', 
		'\x2', '\x54E', '\x54F', '\x3', '\x2', '\x2', '\x2', '\x54F', '\x550', 
		'\x3', '\x2', '\x2', '\x2', '\x550', '\x551', '\a', '\xC1', '\x2', '\x2', 
		'\x551', '\x553', '\x5', '\xE8', 'u', '\x2', '\x552', '\x546', '\x3', 
		'\x2', '\x2', '\x2', '\x552', '\x54E', '\x3', '\x2', '\x2', '\x2', '\x553', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\x554', '\x555', '\a', '~', '\x2', 
		'\x2', '\x555', '\x556', '\a', '\xCF', '\x2', '\x2', '\x556', '\x55B', 
		'\x5', '\xBC', '_', '\x2', '\x557', '\x558', '\a', '\xD5', '\x2', '\x2', 
		'\x558', '\x55A', '\x5', '\xBC', '_', '\x2', '\x559', '\x557', '\x3', 
		'\x2', '\x2', '\x2', '\x55A', '\x55D', '\x3', '\x2', '\x2', '\x2', '\x55B', 
		'\x559', '\x3', '\x2', '\x2', '\x2', '\x55B', '\x55C', '\x3', '\x2', '\x2', 
		'\x2', '\x55C', '\x55E', '\x3', '\x2', '\x2', '\x2', '\x55D', '\x55B', 
		'\x3', '\x2', '\x2', '\x2', '\x55E', '\x55F', '\a', '\xD0', '\x2', '\x2', 
		'\x55F', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x560', '\x562', '\a', '\xC1', 
		'\x2', '\x2', '\x561', '\x560', '\x3', '\x2', '\x2', '\x2', '\x561', '\x562', 
		'\x3', '\x2', '\x2', '\x2', '\x562', '\x563', '\x3', '\x2', '\x2', '\x2', 
		'\x563', '\x564', '\a', '\xDB', '\x2', '\x2', '\x564', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\x565', '\x567', '\x5', '\xC6', '\x64', '\x2', '\x566', 
		'\x568', '\x5', '.', '\x18', '\x2', '\x567', '\x566', '\x3', '\x2', '\x2', 
		'\x2', '\x567', '\x568', '\x3', '\x2', '\x2', '\x2', '\x568', '\x56B', 
		'\x3', '\x2', '\x2', '\x2', '\x569', '\x56B', '\a', 't', '\x2', '\x2', 
		'\x56A', '\x565', '\x3', '\x2', '\x2', '\x2', '\x56A', '\x569', '\x3', 
		'\x2', '\x2', '\x2', '\x56B', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x56C', 
		'\x56F', '\x5', '\xC6', '\x64', '\x2', '\x56D', '\x56F', '\x5', '\xC4', 
		'\x63', '\x2', '\x56E', '\x56C', '\x3', '\x2', '\x2', '\x2', '\x56E', 
		'\x56D', '\x3', '\x2', '\x2', '\x2', '\x56F', '\x571', '\x3', '\x2', '\x2', 
		'\x2', '\x570', '\x572', '\x5', '.', '\x18', '\x2', '\x571', '\x570', 
		'\x3', '\x2', '\x2', '\x2', '\x571', '\x572', '\x3', '\x2', '\x2', '\x2', 
		'\x572', '\x577', '\x3', '\x2', '\x2', '\x2', '\x573', '\x577', '\x5', 
		'\x10C', '\x87', '\x2', '\x574', '\x577', '\a', 't', '\x2', '\x2', '\x575', 
		'\x577', '\x5', '\xC2', '\x62', '\x2', '\x576', '\x56E', '\x3', '\x2', 
		'\x2', '\x2', '\x576', '\x573', '\x3', '\x2', '\x2', '\x2', '\x576', '\x574', 
		'\x3', '\x2', '\x2', '\x2', '\x576', '\x575', '\x3', '\x2', '\x2', '\x2', 
		'\x577', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x578', '\x57A', '\x5', 
		'\x30', '\x19', '\x2', '\x579', '\x57B', '\a', 'm', '\x2', '\x2', '\x57A', 
		'\x579', '\x3', '\x2', '\x2', '\x2', '\x57A', '\x57B', '\x3', '\x2', '\x2', 
		'\x2', '\x57B', '\x57D', '\x3', '\x2', '\x2', '\x2', '\x57C', '\x57E', 
		'\x5', '\x102', '\x82', '\x2', '\x57D', '\x57C', '\x3', '\x2', '\x2', 
		'\x2', '\x57D', '\x57E', '\x3', '\x2', '\x2', '\x2', '\x57E', '\x580', 
		'\x3', '\x2', '\x2', '\x2', '\x57F', '\x581', '\a', 'k', '\x2', '\x2', 
		'\x580', '\x57F', '\x3', '\x2', '\x2', '\x2', '\x580', '\x581', '\x3', 
		'\x2', '\x2', '\x2', '\x581', '\x597', '\x3', '\x2', '\x2', '\x2', '\x582', 
		'\x584', '\x5', ' ', '\x11', '\x2', '\x583', '\x585', '\x5', '$', '\x13', 
		'\x2', '\x584', '\x583', '\x3', '\x2', '\x2', '\x2', '\x584', '\x585', 
		'\x3', '\x2', '\x2', '\x2', '\x585', '\x588', '\x3', '\x2', '\x2', '\x2', 
		'\x586', '\x587', '\a', 'L', '\x2', '\x2', '\x587', '\x589', '\x5', '\xBE', 
		'`', '\x2', '\x588', '\x586', '\x3', '\x2', '\x2', '\x2', '\x588', '\x589', 
		'\x3', '\x2', '\x2', '\x2', '\x589', '\x58C', '\x3', '\x2', '\x2', '\x2', 
		'\x58A', '\x58B', '\a', 'V', '\x2', '\x2', '\x58B', '\x58D', '\x5', '\"', 
		'\x12', '\x2', '\x58C', '\x58A', '\x3', '\x2', '\x2', '\x2', '\x58C', 
		'\x58D', '\x3', '\x2', '\x2', '\x2', '\x58D', '\x598', '\x3', '\x2', '\x2', 
		'\x2', '\x58E', '\x58F', '\a', '`', '\x2', '\x2', '\x58F', '\x591', '\x5', 
		'\x104', '\x83', '\x2', '\x590', '\x592', '\x5', '$', '\x13', '\x2', '\x591', 
		'\x590', '\x3', '\x2', '\x2', '\x2', '\x591', '\x592', '\x3', '\x2', '\x2', 
		'\x2', '\x592', '\x595', '\x3', '\x2', '\x2', '\x2', '\x593', '\x594', 
		'\a', 'L', '\x2', '\x2', '\x594', '\x596', '\x5', '\"', '\x12', '\x2', 
		'\x595', '\x593', '\x3', '\x2', '\x2', '\x2', '\x595', '\x596', '\x3', 
		'\x2', '\x2', '\x2', '\x596', '\x598', '\x3', '\x2', '\x2', '\x2', '\x597', 
		'\x582', '\x3', '\x2', '\x2', '\x2', '\x597', '\x58E', '\x3', '\x2', '\x2', 
		'\x2', '\x598', '\x599', '\x3', '\x2', '\x2', '\x2', '\x599', '\x59D', 
		'\a', '\xD3', '\x2', '\x2', '\x59A', '\x59C', '\x5', '\x8A', '\x46', '\x2', 
		'\x59B', '\x59A', '\x3', '\x2', '\x2', '\x2', '\x59C', '\x59F', '\x3', 
		'\x2', '\x2', '\x2', '\x59D', '\x59B', '\x3', '\x2', '\x2', '\x2', '\x59D', 
		'\x59E', '\x3', '\x2', '\x2', '\x2', '\x59E', '\x5A0', '\x3', '\x2', '\x2', 
		'\x2', '\x59F', '\x59D', '\x3', '\x2', '\x2', '\x2', '\x5A0', '\x5A1', 
		'\a', '\xD4', '\x2', '\x2', '\x5A1', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\x5A2', '\x5A7', '\x5', '\xF4', '{', '\x2', '\x5A3', '\x5A4', '\a', '\xBC', 
		'\x2', '\x2', '\x5A4', '\x5A6', '\x5', '\xF6', '|', '\x2', '\x5A5', '\x5A3', 
		'\x3', '\x2', '\x2', '\x2', '\x5A6', '\x5A9', '\x3', '\x2', '\x2', '\x2', 
		'\x5A7', '\x5A5', '\x3', '\x2', '\x2', '\x2', '\x5A7', '\x5A8', '\x3', 
		'\x2', '\x2', '\x2', '\x5A8', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x5A9', 
		'\x5A7', '\x3', '\x2', '\x2', '\x2', '\x5AA', '\x5AC', '\a', '\x66', '\x2', 
		'\x2', '\x5AB', '\x5AA', '\x3', '\x2', '\x2', '\x2', '\x5AB', '\x5AC', 
		'\x3', '\x2', '\x2', '\x2', '\x5AC', '\x5AE', '\x3', '\x2', '\x2', '\x2', 
		'\x5AD', '\x5AF', '\a', '\xBD', '\x2', '\x2', '\x5AE', '\x5AD', '\x3', 
		'\x2', '\x2', '\x2', '\x5AE', '\x5AF', '\x3', '\x2', '\x2', '\x2', '\x5AF', 
		'\x5B0', '\x3', '\x2', '\x2', '\x2', '\x5B0', '\x5B1', '\x5', '\xC8', 
		'\x65', '\x2', '\x5B1', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x5B2', '\x5C0', 
		'\x5', '\x104', '\x83', '\x2', '\x5B3', '\x5B8', '\x5', '\x104', '\x83', 
		'\x2', '\x5B4', '\x5B5', '\a', '\xBD', '\x2', '\x2', '\x5B5', '\x5B7', 
		'\x5', '\x104', '\x83', '\x2', '\x5B6', '\x5B4', '\x3', '\x2', '\x2', 
		'\x2', '\x5B7', '\x5BA', '\x3', '\x2', '\x2', '\x2', '\x5B8', '\x5B6', 
		'\x3', '\x2', '\x2', '\x2', '\x5B8', '\x5B9', '\x3', '\x2', '\x2', '\x2', 
		'\x5B9', '\x5BD', '\x3', '\x2', '\x2', '\x2', '\x5BA', '\x5B8', '\x3', 
		'\x2', '\x2', '\x2', '\x5BB', '\x5BC', '\a', '\xBD', '\x2', '\x2', '\x5BC', 
		'\x5BE', '\x5', '\xCA', '\x66', '\x2', '\x5BD', '\x5BB', '\x3', '\x2', 
		'\x2', '\x2', '\x5BD', '\x5BE', '\x3', '\x2', '\x2', '\x2', '\x5BE', '\x5C0', 
		'\x3', '\x2', '\x2', '\x2', '\x5BF', '\x5B2', '\x3', '\x2', '\x2', '\x2', 
		'\x5BF', '\x5B3', '\x3', '\x2', '\x2', '\x2', '\x5C0', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\x5C1', '\x5C4', '\x5', '\x104', '\x83', '\x2', 
		'\x5C2', '\x5C3', '\a', '/', '\x2', '\x2', '\x5C3', '\x5C5', '\x5', '\x104', 
		'\x83', '\x2', '\x5C4', '\x5C2', '\x3', '\x2', '\x2', '\x2', '\x5C4', 
		'\x5C5', '\x3', '\x2', '\x2', '\x2', '\x5C5', '\x5D5', '\x3', '\x2', '\x2', 
		'\x2', '\x5C6', '\x5C7', '\a', '\xD3', '\x2', '\x2', '\x5C7', '\x5CC', 
		'\x5', '\xCA', '\x66', '\x2', '\x5C8', '\x5C9', '\a', '\xD5', '\x2', '\x2', 
		'\x5C9', '\x5CB', '\x5', '\xCA', '\x66', '\x2', '\x5CA', '\x5C8', '\x3', 
		'\x2', '\x2', '\x2', '\x5CB', '\x5CE', '\x3', '\x2', '\x2', '\x2', '\x5CC', 
		'\x5CA', '\x3', '\x2', '\x2', '\x2', '\x5CC', '\x5CD', '\x3', '\x2', '\x2', 
		'\x2', '\x5CD', '\x5D0', '\x3', '\x2', '\x2', '\x2', '\x5CE', '\x5CC', 
		'\x3', '\x2', '\x2', '\x2', '\x5CF', '\x5D1', '\a', '\xD5', '\x2', '\x2', 
		'\x5D0', '\x5CF', '\x3', '\x2', '\x2', '\x2', '\x5D0', '\x5D1', '\x3', 
		'\x2', '\x2', '\x2', '\x5D1', '\x5D2', '\x3', '\x2', '\x2', '\x2', '\x5D2', 
		'\x5D3', '\a', '\xD4', '\x2', '\x2', '\x5D3', '\x5D5', '\x3', '\x2', '\x2', 
		'\x2', '\x5D4', '\x5C1', '\x3', '\x2', '\x2', '\x2', '\x5D4', '\x5C6', 
		'\x3', '\x2', '\x2', '\x2', '\x5D5', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\x5D6', '\x5DB', '\x5', '\xC6', '\x64', '\x2', '\x5D7', '\x5D8', '\a', 
		'\xD5', '\x2', '\x2', '\x5D8', '\x5DA', '\x5', '\xC6', '\x64', '\x2', 
		'\x5D9', '\x5D7', '\x3', '\x2', '\x2', '\x2', '\x5DA', '\x5DD', '\x3', 
		'\x2', '\x2', '\x2', '\x5DB', '\x5D9', '\x3', '\x2', '\x2', '\x2', '\x5DB', 
		'\x5DC', '\x3', '\x2', '\x2', '\x2', '\x5DC', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\x5DD', '\x5DB', '\x3', '\x2', '\x2', '\x2', '\x5DE', '\x5E8', 
		'\a', '\xCF', '\x2', '\x2', '\x5DF', '\x5E4', '\x5', '\xD0', 'i', '\x2', 
		'\x5E0', '\x5E1', '\a', '\xD5', '\x2', '\x2', '\x5E1', '\x5E3', '\x5', 
		'\xD0', 'i', '\x2', '\x5E2', '\x5E0', '\x3', '\x2', '\x2', '\x2', '\x5E3', 
		'\x5E6', '\x3', '\x2', '\x2', '\x2', '\x5E4', '\x5E2', '\x3', '\x2', '\x2', 
		'\x2', '\x5E4', '\x5E5', '\x3', '\x2', '\x2', '\x2', '\x5E5', '\x5E9', 
		'\x3', '\x2', '\x2', '\x2', '\x5E6', '\x5E4', '\x3', '\x2', '\x2', '\x2', 
		'\x5E7', '\x5E9', '\x5', '\xB4', '[', '\x2', '\x5E8', '\x5DF', '\x3', 
		'\x2', '\x2', '\x2', '\x5E8', '\x5E7', '\x3', '\x2', '\x2', '\x2', '\x5E8', 
		'\x5E9', '\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5EB', '\x3', '\x2', '\x2', 
		'\x2', '\x5EA', '\x5EC', '\a', '\xD5', '\x2', '\x2', '\x5EB', '\x5EA', 
		'\x3', '\x2', '\x2', '\x2', '\x5EB', '\x5EC', '\x3', '\x2', '\x2', '\x2', 
		'\x5EC', '\x5ED', '\x3', '\x2', '\x2', '\x2', '\x5ED', '\x5EE', '\a', 
		'\xD0', '\x2', '\x2', '\x5EE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x5EF', 
		'\x5F1', '\a', '\xBE', '\x2', '\x2', '\x5F0', '\x5EF', '\x3', '\x2', '\x2', 
		'\x2', '\x5F0', '\x5F1', '\x3', '\x2', '\x2', '\x2', '\x5F1', '\x5F2', 
		'\x3', '\x2', '\x2', '\x2', '\x5F2', '\x5F6', '\x5', '\xA8', 'U', '\x2', 
		'\x5F3', '\x5F4', '\a', '\xC1', '\x2', '\x2', '\x5F4', '\x5F6', '\x5', 
		'\xE8', 'u', '\x2', '\x5F5', '\x5F0', '\x3', '\x2', '\x2', '\x2', '\x5F5', 
		'\x5F3', '\x3', '\x2', '\x2', '\x2', '\x5F6', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\x5F7', '\x60D', '\x5', '\xD8', 'm', '\x2', '\x5F8', '\x60D', 
		'\x5', '\xE2', 'r', '\x2', '\x5F9', '\x5FA', '\a', '.', '\x2', '\x2', 
		'\x5FA', '\x5FF', '\a', '\xCF', '\x2', '\x2', '\x5FB', '\x5FD', '\x5', 
		'\xD4', 'k', '\x2', '\x5FC', '\x5FE', '\a', '\xD5', '\x2', '\x2', '\x5FD', 
		'\x5FC', '\x3', '\x2', '\x2', '\x2', '\x5FD', '\x5FE', '\x3', '\x2', '\x2', 
		'\x2', '\x5FE', '\x600', '\x3', '\x2', '\x2', '\x2', '\x5FF', '\x5FB', 
		'\x3', '\x2', '\x2', '\x2', '\x5FF', '\x600', '\x3', '\x2', '\x2', '\x2', 
		'\x600', '\x601', '\x3', '\x2', '\x2', '\x2', '\x601', '\x60D', '\a', 
		'\xD0', '\x2', '\x2', '\x602', '\x607', '\a', '\xD1', '\x2', '\x2', '\x603', 
		'\x605', '\x5', '\xD4', 'k', '\x2', '\x604', '\x606', '\a', '\xD5', '\x2', 
		'\x2', '\x605', '\x604', '\x3', '\x2', '\x2', '\x2', '\x605', '\x606', 
		'\x3', '\x2', '\x2', '\x2', '\x606', '\x608', '\x3', '\x2', '\x2', '\x2', 
		'\x607', '\x603', '\x3', '\x2', '\x2', '\x2', '\x607', '\x608', '\x3', 
		'\x2', '\x2', '\x2', '\x608', '\x609', '\x3', '\x2', '\x2', '\x2', '\x609', 
		'\x60D', '\a', '\xD2', '\x2', '\x2', '\x60A', '\x60B', '\t', '\x10', '\x2', 
		'\x2', '\x60B', '\x60D', '\x5', '\xD2', 'j', '\x2', '\x60C', '\x5F7', 
		'\x3', '\x2', '\x2', '\x2', '\x60C', '\x5F8', '\x3', '\x2', '\x2', '\x2', 
		'\x60C', '\x5F9', '\x3', '\x2', '\x2', '\x2', '\x60C', '\x602', '\x3', 
		'\x2', '\x2', '\x2', '\x60C', '\x60A', '\x3', '\x2', '\x2', '\x2', '\x60D', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\x60E', '\x613', '\x5', '\xD6', 'l', 
		'\x2', '\x60F', '\x610', '\a', '\xD5', '\x2', '\x2', '\x610', '\x612', 
		'\x5', '\xD6', 'l', '\x2', '\x611', '\x60F', '\x3', '\x2', '\x2', '\x2', 
		'\x612', '\x615', '\x3', '\x2', '\x2', '\x2', '\x613', '\x611', '\x3', 
		'\x2', '\x2', '\x2', '\x613', '\x614', '\x3', '\x2', '\x2', '\x2', '\x614', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\x615', '\x613', '\x3', '\x2', '\x2', 
		'\x2', '\x616', '\x619', '\x5', '\xD2', 'j', '\x2', '\x617', '\x618', 
		'\a', '\x9F', '\x2', '\x2', '\x618', '\x61A', '\x5', '\xD2', 'j', '\x2', 
		'\x619', '\x617', '\x3', '\x2', '\x2', '\x2', '\x619', '\x61A', '\x3', 
		'\x2', '\x2', '\x2', '\x61A', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x61B', 
		'\x621', '\a', 'h', '\x2', '\x2', '\x61C', '\x621', '\x5', '\xDA', 'n', 
		'\x2', '\x61D', '\x621', '\x5', '\x108', '\x85', '\x2', '\x61E', '\x621', 
		'\x5', '\xDE', 'p', '\x2', '\x61F', '\x621', '\x5', '\xC6', '\x64', '\x2', 
		'\x620', '\x61B', '\x3', '\x2', '\x2', '\x2', '\x620', '\x61C', '\x3', 
		'\x2', '\x2', '\x2', '\x620', '\x61D', '\x3', '\x2', '\x2', '\x2', '\x620', 
		'\x61E', '\x3', '\x2', '\x2', '\x2', '\x620', '\x61F', '\x3', '\x2', '\x2', 
		'\x2', '\x621', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x622', '\x627', 
		'\a', '\xDF', '\x2', '\x2', '\x623', '\x627', '\a', '\x32', '\x2', '\x2', 
		'\x624', '\x627', '\x5', '\xDC', 'o', '\x2', '\x625', '\x627', '\x5', 
		'\xE0', 'q', '\x2', '\x626', '\x622', '\x3', '\x2', '\x2', '\x2', '\x626', 
		'\x623', '\x3', '\x2', '\x2', '\x2', '\x626', '\x624', '\x3', '\x2', '\x2', 
		'\x2', '\x626', '\x625', '\x3', '\x2', '\x2', '\x2', '\x627', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\x628', '\x629', '\t', '\x11', '\x2', '\x2', 
		'\x629', '\xDD', '\x3', '\x2', '\x2', '\x2', '\x62A', '\x62B', '\t', '\x12', 
		'\x2', '\x2', '\x62B', '\x630', '\a', '\xBB', '\x2', '\x2', '\x62C', '\x631', 
		'\x5', '\x104', '\x83', '\x2', '\x62D', '\x631', '\a', '\x88', '\x2', 
		'\x2', '\x62E', '\x631', '\a', '\x84', '\x2', '\x2', '\x62F', '\x631', 
		'\a', '\x85', '\x2', '\x2', '\x630', '\x62C', '\x3', '\x2', '\x2', '\x2', 
		'\x630', '\x62D', '\x3', '\x2', '\x2', '\x2', '\x630', '\x62E', '\x3', 
		'\x2', '\x2', '\x2', '\x630', '\x62F', '\x3', '\x2', '\x2', '\x2', '\x631', 
		'\x63D', '\x3', '\x2', '\x2', '\x2', '\x632', '\x636', '\x5', '\xBE', 
		'`', '\x2', '\x633', '\x636', '\x5', '\xFA', '~', '\x2', '\x634', '\x636', 
		'\x5', '\xE2', 'r', '\x2', '\x635', '\x632', '\x3', '\x2', '\x2', '\x2', 
		'\x635', '\x633', '\x3', '\x2', '\x2', '\x2', '\x635', '\x634', '\x3', 
		'\x2', '\x2', '\x2', '\x636', '\x637', '\x3', '\x2', '\x2', '\x2', '\x637', 
		'\x63A', '\a', '\xBB', '\x2', '\x2', '\x638', '\x63B', '\x5', '\x104', 
		'\x83', '\x2', '\x639', '\x63B', '\x5', '\xFA', '~', '\x2', '\x63A', '\x638', 
		'\x3', '\x2', '\x2', '\x2', '\x63A', '\x639', '\x3', '\x2', '\x2', '\x2', 
		'\x63B', '\x63D', '\x3', '\x2', '\x2', '\x2', '\x63C', '\x62A', '\x3', 
		'\x2', '\x2', '\x2', '\x63C', '\x635', '\x3', '\x2', '\x2', '\x2', '\x63D', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\x63E', '\x63F', '\a', '\xDC', '\x2', 
		'\x2', '\x63F', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x640', '\x642', 
		'\a', '\xE6', '\x2', '\x2', '\x641', '\x643', '\a', '\xEE', '\x2', '\x2', 
		'\x642', '\x641', '\x3', '\x2', '\x2', '\x2', '\x643', '\x644', '\x3', 
		'\x2', '\x2', '\x2', '\x644', '\x642', '\x3', '\x2', '\x2', '\x2', '\x644', 
		'\x645', '\x3', '\x2', '\x2', '\x2', '\x645', '\x656', '\x3', '\x2', '\x2', 
		'\x2', '\x646', '\x648', '\a', '\xE5', '\x2', '\x2', '\x647', '\x649', 
		'\a', '\xEE', '\x2', '\x2', '\x648', '\x647', '\x3', '\x2', '\x2', '\x2', 
		'\x649', '\x64A', '\x3', '\x2', '\x2', '\x2', '\x64A', '\x648', '\x3', 
		'\x2', '\x2', '\x2', '\x64A', '\x64B', '\x3', '\x2', '\x2', '\x2', '\x64B', 
		'\x656', '\x3', '\x2', '\x2', '\x2', '\x64C', '\x656', '\a', '\xE3', '\x2', 
		'\x2', '\x64D', '\x651', '\a', '\xE4', '\x2', '\x2', '\x64E', '\x650', 
		'\x5', '\xE4', 's', '\x2', '\x64F', '\x64E', '\x3', '\x2', '\x2', '\x2', 
		'\x650', '\x653', '\x3', '\x2', '\x2', '\x2', '\x651', '\x64F', '\x3', 
		'\x2', '\x2', '\x2', '\x651', '\x652', '\x3', '\x2', '\x2', '\x2', '\x652', 
		'\x654', '\x3', '\x2', '\x2', '\x2', '\x653', '\x651', '\x3', '\x2', '\x2', 
		'\x2', '\x654', '\x656', '\a', '\xE4', '\x2', '\x2', '\x655', '\x640', 
		'\x3', '\x2', '\x2', '\x2', '\x655', '\x646', '\x3', '\x2', '\x2', '\x2', 
		'\x655', '\x64C', '\x3', '\x2', '\x2', '\x2', '\x655', '\x64D', '\x3', 
		'\x2', '\x2', '\x2', '\x656', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x657', 
		'\x65B', '\a', '\xEA', '\x2', '\x2', '\x658', '\x65B', '\a', '\xE9', '\x2', 
		'\x2', '\x659', '\x65B', '\x5', '\xE8', 'u', '\x2', '\x65A', '\x657', 
		'\x3', '\x2', '\x2', '\x2', '\x65A', '\x658', '\x3', '\x2', '\x2', '\x2', 
		'\x65A', '\x659', '\x3', '\x2', '\x2', '\x2', '\x65B', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\x65C', '\x661', '\x5', '\xE8', 'u', '\x2', '\x65D', 
		'\x65E', '\a', '\xD5', '\x2', '\x2', '\x65E', '\x660', '\x5', '\xE8', 
		'u', '\x2', '\x65F', '\x65D', '\x3', '\x2', '\x2', '\x2', '\x660', '\x663', 
		'\x3', '\x2', '\x2', '\x2', '\x661', '\x65F', '\x3', '\x2', '\x2', '\x2', 
		'\x661', '\x662', '\x3', '\x2', '\x2', '\x2', '\x662', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\x663', '\x661', '\x3', '\x2', '\x2', '\x2', '\x664', 
		'\x668', '\x5', '\xEA', 'v', '\x2', '\x665', '\x667', '\x5', '\xEC', 'w', 
		'\x2', '\x666', '\x665', '\x3', '\x2', '\x2', '\x2', '\x667', '\x66A', 
		'\x3', '\x2', '\x2', '\x2', '\x668', '\x666', '\x3', '\x2', '\x2', '\x2', 
		'\x668', '\x669', '\x3', '\x2', '\x2', '\x2', '\x669', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\x66A', '\x668', '\x3', '\x2', '\x2', '\x2', '\x66B', 
		'\x672', '\x5', '\xF4', '{', '\x2', '\x66C', '\x672', '\x5', '\xEE', 'x', 
		'\x2', '\x66D', '\x66E', '\a', '\xCF', '\x2', '\x2', '\x66E', '\x66F', 
		'\x5', '\xB0', 'Y', '\x2', '\x66F', '\x670', '\a', '\xD0', '\x2', '\x2', 
		'\x670', '\x672', '\x3', '\x2', '\x2', '\x2', '\x671', '\x66B', '\x3', 
		'\x2', '\x2', '\x2', '\x671', '\x66C', '\x3', '\x2', '\x2', '\x2', '\x671', 
		'\x66D', '\x3', '\x2', '\x2', '\x2', '\x672', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\x673', '\x674', '\a', '\xBC', '\x2', '\x2', '\x674', '\x676', 
		'\x5', '\xF6', '|', '\x2', '\x675', '\x677', '\x5', '\xF2', 'z', '\x2', 
		'\x676', '\x675', '\x3', '\x2', '\x2', '\x2', '\x676', '\x677', '\x3', 
		'\x2', '\x2', '\x2', '\x677', '\xED', '\x3', '\x2', '\x2', '\x2', '\x678', 
		'\x679', '\x5', '\xF0', 'y', '\x2', '\x679', '\x67A', '\x5', '\xF2', 'z', 
		'\x2', '\x67A', '\xEF', '\x3', '\x2', '\x2', '\x2', '\x67B', '\x680', 
		'\x5', '\xC6', '\x64', '\x2', '\x67C', '\x680', '\x5', '\xDE', 'p', '\x2', 
		'\x67D', '\x680', '\x5', '\xF4', '{', '\x2', '\x67E', '\x680', '\x5', 
		'\xA6', 'T', '\x2', '\x67F', '\x67B', '\x3', '\x2', '\x2', '\x2', '\x67F', 
		'\x67C', '\x3', '\x2', '\x2', '\x2', '\x67F', '\x67D', '\x3', '\x2', '\x2', 
		'\x2', '\x67F', '\x67E', '\x3', '\x2', '\x2', '\x2', '\x680', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\x681', '\x683', '\x5', '.', '\x18', '\x2', 
		'\x682', '\x681', '\x3', '\x2', '\x2', '\x2', '\x682', '\x683', '\x3', 
		'\x2', '\x2', '\x2', '\x683', '\x684', '\x3', '\x2', '\x2', '\x2', '\x684', 
		'\x688', '\x5', '\xCE', 'h', '\x2', '\x685', '\x687', '\x5', '\xFC', '\x7F', 
		'\x2', '\x686', '\x685', '\x3', '\x2', '\x2', '\x2', '\x687', '\x68A', 
		'\x3', '\x2', '\x2', '\x2', '\x688', '\x686', '\x3', '\x2', '\x2', '\x2', 
		'\x688', '\x689', '\x3', '\x2', '\x2', '\x2', '\x689', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\x68A', '\x688', '\x3', '\x2', '\x2', '\x2', '\x68B', 
		'\x68E', '\x5', '\xFA', '~', '\x2', '\x68C', '\x68D', '\a', '\xBB', '\x2', 
		'\x2', '\x68D', '\x68F', '\x5', '\xFA', '~', '\x2', '\x68E', '\x68C', 
		'\x3', '\x2', '\x2', '\x2', '\x68E', '\x68F', '\x3', '\x2', '\x2', '\x2', 
		'\x68F', '\x695', '\x3', '\x2', '\x2', '\x2', '\x690', '\x691', '\x5', 
		'\xBE', '`', '\x2', '\x691', '\x692', '\a', '\xBB', '\x2', '\x2', '\x692', 
		'\x693', '\x5', '\xFA', '~', '\x2', '\x693', '\x695', '\x3', '\x2', '\x2', 
		'\x2', '\x694', '\x68B', '\x3', '\x2', '\x2', '\x2', '\x694', '\x690', 
		'\x3', '\x2', '\x2', '\x2', '\x695', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\x696', '\x699', '\x5', '\xF8', '}', '\x2', '\x697', '\x699', '\x5', 
		'\xFA', '~', '\x2', '\x698', '\x696', '\x3', '\x2', '\x2', '\x2', '\x698', 
		'\x697', '\x3', '\x2', '\x2', '\x2', '\x699', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\x69A', '\x6A0', '\x5', '\x104', '\x83', '\x2', '\x69B', '\x69C', 
		'\a', '\xD3', '\x2', '\x2', '\x69C', '\x69D', '\x5', '\xA8', 'U', '\x2', 
		'\x69D', '\x69E', '\a', '\xD4', '\x2', '\x2', '\x69E', '\x6A0', '\x3', 
		'\x2', '\x2', '\x2', '\x69F', '\x69A', '\x3', '\x2', '\x2', '\x2', '\x69F', 
		'\x69B', '\x3', '\x2', '\x2', '\x2', '\x6A0', '\x6A4', '\x3', '\x2', '\x2', 
		'\x2', '\x6A1', '\x6A3', '\x5', '\xFC', '\x7F', '\x2', '\x6A2', '\x6A1', 
		'\x3', '\x2', '\x2', '\x2', '\x6A3', '\x6A6', '\x3', '\x2', '\x2', '\x2', 
		'\x6A4', '\x6A2', '\x3', '\x2', '\x2', '\x2', '\x6A4', '\x6A5', '\x3', 
		'\x2', '\x2', '\x2', '\x6A5', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x6A6', 
		'\x6A4', '\x3', '\x2', '\x2', '\x2', '\x6A7', '\x6A9', '\a', '\xCC', '\x2', 
		'\x2', '\x6A8', '\x6A7', '\x3', '\x2', '\x2', '\x2', '\x6A9', '\x6AC', 
		'\x3', '\x2', '\x2', '\x2', '\x6AA', '\x6A8', '\x3', '\x2', '\x2', '\x2', 
		'\x6AA', '\x6AB', '\x3', '\x2', '\x2', '\x2', '\x6AB', '\x6B3', '\x3', 
		'\x2', '\x2', '\x2', '\x6AC', '\x6AA', '\x3', '\x2', '\x2', '\x2', '\x6AD', 
		'\x6B4', '\a', '\xDB', '\x2', '\x2', '\x6AE', '\x6AF', '\a', '\xCC', '\x2', 
		'\x2', '\x6AF', '\x6B0', '\a', '\xD3', '\x2', '\x2', '\x6B0', '\x6B1', 
		'\x5', '\xA8', 'U', '\x2', '\x6B1', '\x6B2', '\a', '\xD4', '\x2', '\x2', 
		'\x6B2', '\x6B4', '\x3', '\x2', '\x2', '\x2', '\x6B3', '\x6AD', '\x3', 
		'\x2', '\x2', '\x2', '\x6B3', '\x6AE', '\x3', '\x2', '\x2', '\x2', '\x6B4', 
		'\x6B8', '\x3', '\x2', '\x2', '\x2', '\x6B5', '\x6B7', '\x5', '\xFC', 
		'\x7F', '\x2', '\x6B6', '\x6B5', '\x3', '\x2', '\x2', '\x2', '\x6B7', 
		'\x6BA', '\x3', '\x2', '\x2', '\x2', '\x6B8', '\x6B6', '\x3', '\x2', '\x2', 
		'\x2', '\x6B8', '\x6B9', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '\x6BA', '\x6B8', '\x3', '\x2', '\x2', '\x2', 
		'\x6BB', '\x6BD', '\a', '\xD1', '\x2', '\x2', '\x6BC', '\x6BE', '\x5', 
		'\xA8', 'U', '\x2', '\x6BD', '\x6BC', '\x3', '\x2', '\x2', '\x2', '\x6BD', 
		'\x6BE', '\x3', '\x2', '\x2', '\x2', '\x6BE', '\x6BF', '\x3', '\x2', '\x2', 
		'\x2', '\x6BF', '\x6C5', '\a', '\xD2', '\x2', '\x2', '\x6C0', '\x6C1', 
		'\a', '\xD3', '\x2', '\x2', '\x6C1', '\x6C2', '\x5', '\xA8', 'U', '\x2', 
		'\x6C2', '\x6C3', '\a', '\xD4', '\x2', '\x2', '\x6C3', '\x6C5', '\x3', 
		'\x2', '\x2', '\x2', '\x6C4', '\x6BB', '\x3', '\x2', '\x2', '\x2', '\x6C4', 
		'\x6C0', '\x3', '\x2', '\x2', '\x2', '\x6C5', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\x6C6', '\x6C8', '\x5', '\x100', '\x81', '\x2', '\x6C7', '\x6C6', 
		'\x3', '\x2', '\x2', '\x2', '\x6C7', '\x6C8', '\x3', '\x2', '\x2', '\x2', 
		'\x6C8', '\x6CF', '\x3', '\x2', '\x2', '\x2', '\x6C9', '\x6CB', '\a', 
		'\xD5', '\x2', '\x2', '\x6CA', '\x6CC', '\x5', '\x100', '\x81', '\x2', 
		'\x6CB', '\x6CA', '\x3', '\x2', '\x2', '\x2', '\x6CB', '\x6CC', '\x3', 
		'\x2', '\x2', '\x2', '\x6CC', '\x6CE', '\x3', '\x2', '\x2', '\x2', '\x6CD', 
		'\x6C9', '\x3', '\x2', '\x2', '\x2', '\x6CE', '\x6D1', '\x3', '\x2', '\x2', 
		'\x2', '\x6CF', '\x6CD', '\x3', '\x2', '\x2', '\x2', '\x6CF', '\x6D0', 
		'\x3', '\x2', '\x2', '\x2', '\x6D0', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\x6D1', '\x6CF', '\x3', '\x2', '\x2', '\x2', '\x6D2', '\x6DA', '\x5', 
		'\xE8', 'u', '\x2', '\x6D3', '\x6D4', '\a', '\x62', '\x2', '\x2', '\x6D4', 
		'\x6D5', '\a', '\xCF', '\x2', '\x2', '\x6D5', '\x6D6', '\x5', '\xFE', 
		'\x80', '\x2', '\x6D6', '\x6D7', '\a', '\xD0', '\x2', '\x2', '\x6D7', 
		'\x6DA', '\x3', '\x2', '\x2', '\x2', '\x6D8', '\x6DA', '\x5', '\xB8', 
		']', '\x2', '\x6D9', '\x6D2', '\x3', '\x2', '\x2', '\x2', '\x6D9', '\x6D3', 
		'\x3', '\x2', '\x2', '\x2', '\x6D9', '\x6D8', '\x3', '\x2', '\x2', '\x2', 
		'\x6DA', '\x101', '\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6DC', '\t', 
		'\x13', '\x2', '\x2', '\x6DC', '\x103', '\x3', '\x2', '\x2', '\x2', '\x6DD', 
		'\x6DE', '\t', '\x14', '\x2', '\x2', '\x6DE', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x6DF', '\x6E0', '\t', '\x15', '\x2', '\x2', '\x6E0', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x6E1', '\x6E2', '\t', '\x16', '\x2', '\x2', 
		'\x6E2', '\x109', '\x3', '\x2', '\x2', '\x2', '\x6E3', '\x6E4', '\t', 
		'\x17', '\x2', '\x2', '\x6E4', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x6E5', 
		'\x6E6', '\t', '\x18', '\x2', '\x2', '\x6E6', '\x10D', '\x3', '\x2', '\x2', 
		'\x2', '\x6E7', '\x6E8', '\t', '\x19', '\x2', '\x2', '\x6E8', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\x111', '\x116', '\x11E', '\x123', 
		'\x13D', '\x141', '\x146', '\x14B', '\x151', '\x15E', '\x162', '\x168', 
		'\x16D', '\x172', '\x179', '\x17F', '\x186', '\x18D', '\x192', '\x196', 
		'\x19D', '\x1A0', '\x1A6', '\x1A9', '\x1AC', '\x1B1', '\x1B5', '\x1B9', 
		'\x1BE', '\x1C2', '\x1C4', '\x1CA', '\x1D6', '\x1E7', '\x1EE', '\x1F6', 
		'\x201', '\x209', '\x211', '\x218', '\x21F', '\x236', '\x23D', '\x245', 
		'\x24F', '\x255', '\x272', '\x280', '\x284', '\x28D', '\x291', '\x296', 
		'\x2B0', '\x2BB', '\x2BF', '\x2C3', '\x2CC', '\x2D6', '\x2DB', '\x2E1', 
		'\x2E6', '\x2EB', '\x2F0', '\x2F5', '\x2FB', '\x301', '\x307', '\x319', 
		'\x31E', '\x321', '\x32B', '\x32E', '\x33B', '\x343', '\x34A', '\x34D', 
		'\x352', '\x356', '\x35F', '\x37B', '\x380', '\x384', '\x38B', '\x38F', 
		'\x395', '\x39A', '\x39D', '\x3A0', '\x3A3', '\x3AA', '\x3B2', '\x3BF', 
		'\x3CB', '\x3D3', '\x3DA', '\x3E1', '\x3E5', '\x3EC', '\x3F3', '\x3F7', 
		'\x3FB', '\x401', '\x409', '\x410', '\x414', '\x418', '\x425', '\x428', 
		'\x42F', '\x436', '\x43A', '\x43E', '\x443', '\x448', '\x455', '\x45F', 
		'\x465', '\x4A4', '\x4B4', '\x4B6', '\x4DC', '\x4F2', '\x4F4', '\x4F9', 
		'\x4FE', '\x503', '\x506', '\x50C', '\x50F', '\x513', '\x519', '\x51D', 
		'\x528', '\x52D', '\x535', '\x539', '\x540', '\x544', '\x549', '\x54E', 
		'\x552', '\x55B', '\x561', '\x567', '\x56A', '\x56E', '\x571', '\x576', 
		'\x57A', '\x57D', '\x580', '\x584', '\x588', '\x58C', '\x591', '\x595', 
		'\x597', '\x59D', '\x5A7', '\x5AB', '\x5AE', '\x5B8', '\x5BD', '\x5BF', 
		'\x5C4', '\x5CC', '\x5D0', '\x5D4', '\x5DB', '\x5E4', '\x5E8', '\x5EB', 
		'\x5F0', '\x5F5', '\x5FD', '\x5FF', '\x605', '\x607', '\x60C', '\x613', 
		'\x619', '\x620', '\x626', '\x630', '\x635', '\x63A', '\x63C', '\x644', 
		'\x64A', '\x651', '\x655', '\x65A', '\x661', '\x668', '\x671', '\x676', 
		'\x67F', '\x682', '\x688', '\x68E', '\x694', '\x698', '\x69F', '\x6A4', 
		'\x6AA', '\x6B3', '\x6B8', '\x6BD', '\x6C4', '\x6C7', '\x6CB', '\x6CF', 
		'\x6D9',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
